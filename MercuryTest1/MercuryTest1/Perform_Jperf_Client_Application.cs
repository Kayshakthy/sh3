///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Perform_Jperf_Client_Application recording.
    /// </summary>
    [TestModule("acdbc8cb-f9ee-4e3c-a418-f23b1d725623", ModuleType.Recording, 1)]
    public partial class Perform_Jperf_Client_Application : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Perform_Jperf_Client_Application instance = new Perform_Jperf_Client_Application();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Perform_Jperf_Client_Application()
        {
            Client_Server_Addr = "";
            Client_Server_Port = "";
            Client_Protocol = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Perform_Jperf_Client_Application Instance
        {
            get { return instance; }
        }

#region Variables

        string _Client_Server_Addr;

        /// <summary>
        /// Gets or sets the value of variable Client_Server_Addr.
        /// </summary>
        [TestVariable("8973e7b7-a408-4437-904b-07ac592b1f1d")]
        public string Client_Server_Addr
        {
            get { return _Client_Server_Addr; }
            set { _Client_Server_Addr = value; }
        }

        string _Client_Server_Port;

        /// <summary>
        /// Gets or sets the value of variable Client_Server_Port.
        /// </summary>
        [TestVariable("1d2e5e9a-a186-4897-bfe8-2a7304bad033")]
        public string Client_Server_Port
        {
            get { return _Client_Server_Port; }
            set { _Client_Server_Port = value; }
        }

        string _Client_Protocol;

        /// <summary>
        /// Gets or sets the value of variable Client_Protocol.
        /// </summary>
        [TestVariable("bb2a9491-5350-443e-8f06-ff796673dbf0")]
        public string Client_Protocol
        {
            get { return _Client_Protocol; }
            set { _Client_Protocol = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Host.Local.RunApplication("C:\\Work\\Test Tools\\jperf-2.0.2\\jperf-2.0.2\\jperf.bat", "", "C:\\Work\\Test Tools\\jperf-2.0.2\\jperf-2.0.2", false);
            Delay.Milliseconds(0);
            
            repo.JPerf202NetworkPerformanceMeasur.Maximize.Click("12;12");
            Delay.Milliseconds(200);
            
            repo.JPerf202NetworkPerformanceMeasur.Toolbar.Client.Click("10;11");
            Delay.Milliseconds(200);
            
            repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddress.Click("9;14");
            Delay.Milliseconds(200);
            
            repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddress.PressKeys(Client_Server_Addr);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddress'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, new RecordItemIndex(5));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='192.168.0.10') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddress'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, new RecordItemIndex(6));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, "Text", "192.168.0.10");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (BaseType='javax.swing.JTextField') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddress'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, new RecordItemIndex(7));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, "BaseType", "javax.swing.JTextField");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Name='serverAddress') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddress'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, new RecordItemIndex(8));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, "Name", "serverAddress");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Type='JTextField') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddress'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, new RecordItemIndex(9));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, "Type", "JTextField");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=126,Height=20}) on item 'JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddress'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, new RecordItemIndex(10));
            //Validate.ContainsImage(repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo, ServerAddress_Screenshot1, ServerAddress_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1.MoveTo("48;7");
            Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
            Delay.Milliseconds(200);
            
            repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1.MoveTo("95;10");
            Mouse.ButtonUp(System.Windows.Forms.MouseButtons.Left);
            Delay.Milliseconds(200);
            
            repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1.PressKeys(Client_Server_Port);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, new RecordItemIndex(14));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='22') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, new RecordItemIndex(15));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, "Text", "22");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (BaseType='javax.swing.JTextField') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, new RecordItemIndex(16));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, "BaseType", "javax.swing.JTextField");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Name='Spinner.formattedTextField') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, new RecordItemIndex(17));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, "Name", "Spinner.formattedTextField");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Type='JFormattedTextField') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, new RecordItemIndex(18));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, "Type", "JFormattedTextField");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=99,Height=14}) on item 'JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, new RecordItemIndex(19));
            //Validate.ContainsImage(repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info, SpinnerFormattedTextField1_Screenshot1, SpinnerFormattedTextField1_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(20));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Pressed='False') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(21));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, "Pressed", "False");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Run IPerf!') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(22));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, "Text", "Run IPerf!");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleName='Run IPerf!') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(23));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, "AccessibleName", "Run IPerf!");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (BaseType='javax.swing.JButton') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(24));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, "BaseType", "javax.swing.JButton");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Name='startIperf') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(25));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, "Name", "startIperf");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Type='JButton') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(26));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, "Type", "JButton");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Label='Run IPerf!') on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(27));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, "Label", "Run IPerf!");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=171,Height=39}) on item 'JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf'.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, new RecordItemIndex(28));
            //Validate.ContainsImage(repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo, RunIPerf_Screenshot1, RunIPerf_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            //repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerf.Click("99;24");
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'JPerf202NetworkPerformanceMeasur.Output'.", repo.JPerf202NetworkPerformanceMeasur.OutputInfo, new RecordItemIndex(30));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.OutputInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (SelectionStart='230') on item 'JPerf202NetworkPerformanceMeasur.Output'.", repo.JPerf202NetworkPerformanceMeasur.OutputInfo, new RecordItemIndex(31));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.OutputInfo, "SelectionStart", "230");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='bin/iperf.exe -s -P 0 -i 1 -p 22 -f k\n------------------------------------------------------------\nServer listening on TCP port 22\nTCP window size: 8.00 KByte (default)\n------------------------------------------------------------\n') on item 'JPerf202NetworkPerformanceMeasur.Output'.", repo.JPerf202NetworkPerformanceMeasur.OutputInfo, new RecordItemIndex(32));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.OutputInfo, "Text", "bin/iperf.exe -s -P 0 -i 1 -p 22 -f k\n------------------------------------------------------------\nServer listening on TCP port 22\nTCP window size: 8.00 KByte (default)\n------------------------------------------------------------\n");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (BaseType='javax.swing.JTextArea') on item 'JPerf202NetworkPerformanceMeasur.Output'.", repo.JPerf202NetworkPerformanceMeasur.OutputInfo, new RecordItemIndex(33));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.OutputInfo, "BaseType", "javax.swing.JTextArea");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Name='output') on item 'JPerf202NetworkPerformanceMeasur.Output'.", repo.JPerf202NetworkPerformanceMeasur.OutputInfo, new RecordItemIndex(34));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.OutputInfo, "Name", "output");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Type='JTextArea') on item 'JPerf202NetworkPerformanceMeasur.Output'.", repo.JPerf202NetworkPerformanceMeasur.OutputInfo, new RecordItemIndex(35));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.OutputInfo, "Type", "JTextArea");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=1023,Height=152}) on item 'JPerf202NetworkPerformanceMeasur.Output'.", repo.JPerf202NetworkPerformanceMeasur.OutputInfo, new RecordItemIndex(36));
            //Validate.ContainsImage(repo.JPerf202NetworkPerformanceMeasur.OutputInfo, Output_Screenshot1, Output_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'JPerf202NetworkPerformanceMeasur.Toolbar.StopIPerf' at 74;21.", repo.JPerf202NetworkPerformanceMeasur.Toolbar.StopIPerfInfo, new RecordItemIndex(37));
            //repo.JPerf202NetworkPerformanceMeasur.Toolbar.StopIPerf.Click("74;21");
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='bin/iperf.exe -s -P 0 -i 1 -p 22 -f k\n------------------------------------------------------------\nServer listening on TCP port 22\nTCP window size: 8.00 KByte (default)\n------------------------------------------------------------\nDone.\n\n') on item 'JPerf202NetworkPerformanceMeasur.Output'.", repo.JPerf202NetworkPerformanceMeasur.OutputInfo, new RecordItemIndex(38));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.OutputInfo, "Text", "bin/iperf.exe -s -P 0 -i 1 -p 22 -f k\n------------------------------------------------------------\nServer listening on TCP port 22\nTCP window size: 8.00 KByte (default)\n------------------------------------------------------------\nDone.\n\n");
            //Delay.Milliseconds(100);
            
            Validate_Output();
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'JPerf202NetworkPerformanceMeasur.JPerf'.", repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, new RecordItemIndex(40));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='False') on item 'JPerf202NetworkPerformanceMeasur.JPerf'.", repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, new RecordItemIndex(41));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, "Checked", "False");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='JPerf') on item 'JPerf202NetworkPerformanceMeasur.JPerf'.", repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, new RecordItemIndex(42));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, "Text", "JPerf");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleName='JPerf') on item 'JPerf202NetworkPerformanceMeasur.JPerf'.", repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, new RecordItemIndex(43));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, "AccessibleName", "JPerf");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Name='menuJPerf') on item 'JPerf202NetworkPerformanceMeasur.JPerf'.", repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, new RecordItemIndex(44));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, "Name", "menuJPerf");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Type='JMenu') on item 'JPerf202NetworkPerformanceMeasur.JPerf'.", repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, new RecordItemIndex(45));
            //Validate.Attribute(repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, "Type", "JMenu");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=33,Height=19}) on item 'JPerf202NetworkPerformanceMeasur.JPerf'.", repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, new RecordItemIndex(46));
            //Validate.ContainsImage(repo.JPerf202NetworkPerformanceMeasur.JPerfInfo, JPerf_Screenshot1, JPerf_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            //repo.JPerf202NetworkPerformanceMeasur.JPerf.Click("21;7");
            //Delay.Milliseconds(200);
            
            //repo.JPerf202NetworkPerformanceMeasur.JPerf.Click("5;6");
            //Delay.Milliseconds(200);
            
            //repo.JPerf202NetworkPerformanceMeasur.Quit.Click("53;15");
            //Delay.Milliseconds(200);
            
        }

#region Image Feature Data
        CompressedImage ServerAddress_Screenshot1
        { get { return repo.JPerf202NetworkPerformanceMeasur.Toolbar.ServerAddressInfo.GetScreenshot1(new Rectangle(0, 0, 126, 20)); } }

        Imaging.FindOptions ServerAddress_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage SpinnerFormattedTextField1_Screenshot1
        { get { return repo.JPerf202NetworkPerformanceMeasur.Toolbar.SpinnerFormattedTextField1Info.GetScreenshot1(new Rectangle(0, 0, 99, 14)); } }

        Imaging.FindOptions SpinnerFormattedTextField1_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage RunIPerf_Screenshot1
        { get { return repo.JPerf202NetworkPerformanceMeasur.Toolbar.RunIPerfInfo.GetScreenshot1(new Rectangle(0, 0, 171, 39)); } }

        Imaging.FindOptions RunIPerf_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage Output_Screenshot1
        { get { return repo.JPerf202NetworkPerformanceMeasur.OutputInfo.GetScreenshot1(new Rectangle(0, 0, 1023, 152)); } }

        Imaging.FindOptions Output_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage JPerf_Screenshot1
        { get { return repo.JPerf202NetworkPerformanceMeasur.JPerfInfo.GetScreenshot1(new Rectangle(0, 0, 33, 19)); } }

        Imaging.FindOptions JPerf_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
