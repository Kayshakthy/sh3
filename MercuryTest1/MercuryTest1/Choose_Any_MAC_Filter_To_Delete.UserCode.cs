///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Choose_Any_MAC_Filter_To_Delete
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Choose_Any_MAC_Filtering_To_Delete(string argument1, string argument2, string argument3, string argument4, string argument5, string argument6)
        {
        	//This method is to select any MAC filter rules to delete
        	//argument1 - MAC Address0, argument2- MAC Address1
        	//argument3 - MAC Address3, argument4 - MAC Address4
        	//argument5 - MAC Address5
        	
        	Delay.Seconds(30);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
        	//Report.Info(webDocument.GetHtml());
        	TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'macFilterTable']"); 
            //Count the total no of IPv4 port Filter rules (rows)
	     	IList<TrTag> totalMACRules = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalMACRules.Count;   
	     	string totalMACFilterRules = "Total Rules : "+rulesCount.ToString();
	     	Report.Info("Active MAC  Filter Rules ",totalMACFilterRules);
	     	
	     	if(rulesCount == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("MAC Filter ","There are no active rules to delete !!");
	     		TestSuite.Current.GetTestCase("Delete_Any_MAC_Filtering_Rules").Checked = false;
	     		return;
	     	}else{
	     		Report.Info(" There are " + totalMACFilterRules + " MAC Filter Rules to delete !!! ");
			    int rowNum = 1;  
			    int delCheck = 0;
			    Boolean isMatch = false;
			    string macAddress="",macAddress1="";
			    macAddress = argument1+":"+argument2+":"+argument3+":"+argument4+":"+argument5+":"+argument6;
			    Report.Info("MAC Address : " + macAddress);
			    foreach (var row in totalMACRules)  
			    {  
			        Report.Info("Row: " + rowNum);     
			        //Report.Info(row.GetInnerHtml().ToString());
			        IList<TdTag> cols = row.Find<TdTag>("./td");
			        int colNum = 1;
			        foreach(TdTag MacCol in cols){
			        	//Report.Info("MacCol: " + colNum);   
			        	//Report.Info("MacCol Info: "+MacCol.InnerText);	
			        	if(colNum == 2){
							//Report.Info(MacCol.InnerText);
							macAddress1 = MacCol.InnerText;
							Report.Info("MAC Address1 : " + macAddress1);
						}else if (colNum == 4){
			        		// check if Mac address is matching
			        		//Report.Info("----------------- click delete checkbox ------");
			        		if(macAddress == macAddress1){
			        			isMatch = true;
			        			//Report.Info("----------------- Rules Matches !!! ------");
			        			String newPath = "";
			        			newPath = MacCol.GetPath() + "/input[#'macFilterTable-Delete-"+delCheck+"']";
			        			Ranorex.InputTag MACFilterTableDeleteTag = newPath;
						        if (MACFilterTableDeleteTag.Checked.ToString() == "False"){
						        	//Report.Info("----------------- MACFilterTableDeleteTag was False ---");
						        	Delay.Seconds(1);
						        	MACFilterTableDeleteTag.PerformClick();
						        }else{
									Report.Info(" MACFilterTableDeleteTag is already Enabled ");
								}
			        			string rst = "The following MACFilter_Filtering rule is deleted permanently !!!";
								Report.Success(rst);
					        	Report.Screenshot("MACFilter_Filtering",row.Element,true);
					        	
			        	
			        		}
			        	}
			        	colNum++;
			        }	// end of for-loop (column)
			        if(isMatch){
				    	break;
				    }
			        rowNum++;
			        delCheck++;	//counter to select delete checkbox
			        	
			    }	//end of for-loop (row)
			    if((rowNum-1) == rulesCount  && !isMatch){	//if rule does not exist
					Report.Info(" ===== This Rule does not exist =====");
					Delay.Seconds(1);
			        Report.Screenshot("MAC_Filtering",myTable.Element,true);
			    }			   
	     	}	//end of IF-ELSE
        }

    }
}