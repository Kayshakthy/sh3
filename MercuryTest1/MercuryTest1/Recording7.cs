///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Recording7 recording.
    /// </summary>
    [TestModule("29759d6b-3eb8-4541-b84d-8be1e1bd976d", ModuleType.Recording, 1)]
    public partial class Recording7 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Recording7 instance = new Recording7();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Recording7()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Recording7 Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(0));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Application", "Run application 'C:\\Windows\\System32\\cmd.exe' with arguments '' in normal mode.", new RecordItemIndex(1));
            Host.Local.RunApplication("C:\\Windows\\System32\\cmd.exe", "", "C:\\Windows\\System32", false);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'ping{Space}192.1680.0.1'.", new RecordItemIndex(2));
            Keyboard.Press("ping{Space}192.1680.0.1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Up}{Left}{Left}{Left}{Left}{Back}{Return}'.", new RecordItemIndex(3));
            Keyboard.Press("{Up}{Left}{Left}{Left}{Left}{Back}{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowExtendedStyle='RightScrollBar, Left, AcceptFiles, OverlappedWindow, ApplicationWindow') on item 'AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdE'.", repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo, new RecordItemIndex(4));
            Validate.Attribute(repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo, "WindowExtendedStyle", "RightScrollBar, Left, AcceptFiles, OverlappedWindow, ApplicationWindow");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowStyle='Overlapped, VerticalScrollBar, OverlappedWindow, ClipSiblings, Visible') on item 'AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdE'.", repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo, new RecordItemIndex(5));
            Validate.Attribute(repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo, "WindowStyle", "Overlapped, VerticalScrollBar, OverlappedWindow, ClipSiblings, Visible");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (WindowText='Administrator: C:\\Windows\\System32\\cmd.exe') on item 'AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdE'.", repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo, new RecordItemIndex(6));
            Validate.Attribute(repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo, "WindowText", "Administrator: C:\\Windows\\System32\\cmd.exe");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=376,Y=206,Width=74,Height=20}) on item 'AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdE'.", repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo, new RecordItemIndex(7));
            Validate.ContainsImage(repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo, AdministratorCWindowsSystem32CmdE_Screenshot1, AdministratorCWindowsSystem32CmdE_Screenshot1_Options);
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
        CompressedImage AdministratorCWindowsSystem32CmdE_Screenshot1
        { get { return repo.AdministratorCWindowsSystem32CmdE.AdministratorCWindowsSystem32CmdEInfo.GetScreenshot1(new Rectangle(376, 206, 74, 20)); } }

        Imaging.FindOptions AdministratorCWindowsSystem32CmdE_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
