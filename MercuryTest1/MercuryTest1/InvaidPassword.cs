///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The InvaidPassword recording.
    /// </summary>
    [TestModule("84090e54-5c48-45fa-b852-e14916296a0f", ModuleType.Recording, 1)]
    public partial class InvaidPassword : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static InvaidPassword instance = new InvaidPassword();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public InvaidPassword()
        {
            VeryStrongPass = "";
            InvalidPass = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static InvaidPassword Instance
        {
            get { return instance; }
        }

#region Variables

        string _VeryStrongPass;

        /// <summary>
        /// Gets or sets the value of variable VeryStrongPass.
        /// </summary>
        [TestVariable("e7b21d26-1fd6-4262-a86d-b400c3b38064")]
        public string VeryStrongPass
        {
            get { return _VeryStrongPass; }
            set { _VeryStrongPass = value; }
        }

        string _InvalidPass;

        /// <summary>
        /// Gets or sets the value of variable InvalidPass.
        /// </summary>
        [TestVariable("b90c8af3-7778-404c-a3a9-e40c3a0db513")]
        public string InvalidPass
        {
            get { return _InvalidPass; }
            set { _InvalidPass = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Down item 'WebDocument19216801.Passphrase' at 143;14.", repo.WebDocument19216801.PassphraseInfo, new RecordItemIndex(0));
            repo.WebDocument19216801.Passphrase.MoveTo("143;14");
            Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'WebDocument19216801.Passphrase' at 151;6.", repo.WebDocument19216801.PassphraseInfo, new RecordItemIndex(1));
            repo.WebDocument19216801.Passphrase.MoveTo("151;6");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Up item 'WebDocument19216801.WiFiPasswordSecurityKey' at 262;2.", repo.WebDocument19216801.WiFiPasswordSecurityKeyInfo, new RecordItemIndex(2));
            repo.WebDocument19216801.WiFiPasswordSecurityKey.MoveTo("262;2");
            Mouse.ButtonUp(System.Windows.Forms.MouseButtons.Left);
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+V' Press with focus on 'WebDocument19216801.Passphrase'.", repo.WebDocument19216801.PassphraseInfo, new RecordItemIndex(3));
            Keyboard.PrepareFocus(repo.WebDocument19216801.Passphrase);
            Keyboard.Press(System.Windows.Forms.Keys.V | System.Windows.Forms.Keys.Control, 47, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$InvalidPass' with focus on 'WebDocument19216801.Passphrase'.", repo.WebDocument19216801.PassphraseInfo, new RecordItemIndex(4));
            repo.WebDocument19216801.Passphrase.PressKeys(InvalidPass);
            Delay.Milliseconds(800);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='invalid') on item 'WebDocument19216801.PasstextWifi'.", repo.WebDocument19216801.PasstextWifiInfo, new RecordItemIndex(5));
            Validate.Attribute(repo.WebDocument19216801.PasstextWifiInfo, "InnerText", "invalid");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot2' with region {X=0,Y=0,Width=48,Height=21}) on item 'WebDocument19216801.PasstextWifi'.", repo.WebDocument19216801.PasstextWifiInfo, new RecordItemIndex(6));
            Validate.ContainsImage(repo.WebDocument19216801.PasstextWifiInfo, PasstextWifi_Screenshot2, PasstextWifi_Screenshot2_Options);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(7));
            
        }

#region Image Feature Data
        CompressedImage PasstextWifi_Screenshot2
        { get { return repo.WebDocument19216801.PasstextWifiInfo.GetScreenshot2(new Rectangle(0, 0, 48, 21)); } }

        Imaging.FindOptions PasstextWifi_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
