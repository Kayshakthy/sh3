///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

//added on 08/07/16
using System.Net;
using System.Globalization;
//
namespace ArrisTest
{
    public partial class Verify_Device_Connection_Status_Info
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Verify_And_Validate_Device_Connection_Status_Info(string argument1, string argument2, string argument3, string argument4, string argument5, string argument6)
        {
        				     //Standard specification compliant : argument1 
			        		//Hardware version : argument2 
			        		//Software version : argument3
			        		//Cable modem serial number : argument4
			        		//Network access : argument5
			        		//Cable MAC address : argument6
			        		
			 //Report.Info("Arg1 " + argument1);
			 //Report.Info("Arg5 " + argument5);    		
			 
        	 //Capture the following table info
        	/*
        	 /dom[@domain='192.168.0.1']//div[#'InfoHead']/table
			/dom[@domain='192.168.0.1']//div[#'WANIP']/table
			/dom[@domain='192.168.0.1']//div[#'WANIPSettingInfo}}']/table
			/dom[@domain='192.168.0.1']//div[#'WANIPv6Info']/table
			/dom[@domain='192.168.0.1']//div[#'WANIPv4Info']/table
			/dom[@domain='192.168.0.1']//div[#'WANDSLiteInfo']/table
			
        	 */ 
//        	Delay.Seconds(30);
            Duration newDuration = new Duration(240000);
			repo.WebDocument19216801.DivButtonsInfo.WaitForExists(newDuration);
			
        	//Hub3.0 device info //
        	//Hardware version, software ver,Cable Mac,cable modem serial number, system up time, netork access
          	
        	//	"/dom[@domain='192.168.0.1']//div[#'Hub 3.0 device information']/table"   =>Hub 3.0 device information
        	
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
        	webDocument.WaitForDocumentLoaded();
        	//Report.Info(webDocument.GetHtml());
        	TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'Hub 3.0 device information']/table"); 
            //Count the total no of rows
	     	IList<TrTag> totalDeviceRows = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalDeviceRows.Count;   
	     	string totalDeviceInfoRows = rulesCount.ToString() + " : Rows :";
	     	Report.Info(" Hub 3.0 device information ",totalDeviceInfoRows);
	     	
	     	if(rulesCount == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Device Info ","There are no active Hub 3.0 device information !!");
	     		return;
	     	}else{
	     		Report.Info(" There are " + totalDeviceInfoRows + " in Hub 3.0 device information !!! ");
	     		int rowNum = 1;  
	     		string devInfo = "",devInfoCol1 = "",deviceInfo="", devInfoSubstr = "";
	     		foreach (var row in totalDeviceRows)  
			    { 	
	     			//Report.Info("Row: " + rowNum); 
	     			//Report.Info(row.GetInnerHtml().ToString());
			        IList<TdTag> cols = row.Find<TdTag>("./td");
			        //Report.Info(" Total Column ", cols.Count.ToString());
			        int colNum = 1;
			        foreach(TdTag MacCol in cols){
			        	//Report.Info("MacCol: " + colNum); 
			        	if(colNum ==1){
			        		devInfoCol1 = MacCol.InnerText;
			        		//Report.Info("Col1 Info: "+MacCol.InnerText);	
			        		//Report.Info("Col1 Info: " + devInfoCol1);
			        	}if(colNum ==2){
			        		
			        		IList<SpanTag> spanVals = MacCol.Find<SpanTag>("./span");
			        		foreach(SpanTag spanVal in spanVals){
			        			devInfo = spanVal.InnerText;
			        			if(devInfo.Length > 0){
			        				devInfoSubstr = devInfo.Substring(1,devInfo.Length-1);	// for validation purpose
			        			}else{
			        				//blank
			        				devInfoSubstr = "";
			        			}
			        			//Report.Info(  "	devInfoSubstr 	" + devInfoSubstr);
			        		}
			        		//Report.Info("Col2 Info: "+devInfo);	
			        		deviceInfo =  devInfoCol1 + "		" + devInfo;
			        		//Report.Info( devInfoCol1 + "		" + devInfo);
			        		Report.Info(deviceInfo);
			        		//Report.LogHtml(ReportLevel.Info, "deviceInfo", "<a>deviceInfo</a>");
			        		
			        		//perform Hub 3.0 device information validation here
			        		//Standard specification compliant : DOCSIS 3.0
			        		//Hardware version : 10 
			        		//Software version : 9.1.116V
			        		//Cable MAC address : C0:05:C2:00:24:1B
			        		//Cable modem serial number : AAAP51770041
			        		//System up time : 0 days 17h:38m:47s
			        		//Network access : Allowed
			        		if(rowNum == 1 ){
			        			//Standard specification compliant
			        			if(devInfoSubstr.Length == 0){
			        				Report.Failure("	Standard specification compliant  is BLANK 	");
			        			}else if(devInfoSubstr.Trim().Equals(argument1.Trim())){
			        				Report.Success(  "	Standard specification compliant  	" + " PASS");
			        			}else{
			        				Report.Failure("	Standard specification compliant  	" + " FAIL");
			        			}
			        		}else if (rowNum == 2){
			        			//Hardware Version
		        				if(devInfoSubstr.Length == 0){
			        				Report.Failure("	Hardware Version  is BLANK 	");
			        			}else if(devInfoSubstr.Trim() == argument2.Trim() ){
				        			Report.Success(  "	Hardware Version  	" + " PASS");
			        			}else{
			        				Report.Failure("	Hardware Version  	" + " FAIL");
			        			}				        			
			        		}else if (rowNum == 3){
			        			//Software Version
		        				if(devInfoSubstr.Length == 0){
			        				Report.Failure("	Software Version  is BLANK 	");
			        			}else if(devInfoSubstr.Trim() == argument3.Trim() ){
				        			Report.Success(  "	Software Version  	" + " PASS");
			        			}else{
			        				Report.Failure("	Software Version  	" + " FAIL");
			        			}			        			
			        		}else if (rowNum == 4){
			        			//MAC Address - C0:05:C2:00:24:1B
			        			Report.Info(  "	devInfoSubstr 	" + devInfoSubstr);
			        			Report.Info(  " argument6  " + argument6);
			        			if(devInfoSubstr.Length == 0){
			        				Report.Failure("	MAC Address  is BLANK 	");
			        			}else if(devInfoSubstr.Trim() == argument6.Trim() ){
				        			Report.Success(  "	MAC Address  	" + " PASS");
			        			}else{
			        				Report.Failure("	MAC Address  	" + " FAIL");
			        			}
			        		}else if(rowNum == 5){
			        			//Cable modem serial number
			        			if(devInfoSubstr.Length == 0){
			        				Report.Failure("	Cable modem serial number  is BLANK 	");
			        			}else if(devInfoSubstr.Trim() == argument4.Trim() ){
			        				Report.Success(  "	Cable modem serial number  	" + " PASS");
			        			}else{
			        				//validate Cable modem serial number
			        				Report.Failure(  "	Cable modem serial number  	" + " FAIL");
			        			}
			        		}else if (rowNum == 6){
			        			//System up time				    
		        				if(devInfoSubstr.Length == 0){
			        				Report.Failure("	System uptime  is BLANK 	");
			        			}else{
			        				//Validate system time format
			        				//Report.Info("Need to Validate system time format");
			        				//Report.Failure("	System up time  	" + " FAIL");
			        			}			        			
			        		}else if(rowNum == 7) {
			        			//Network access
			        			if(devInfoSubstr.Length == 0){
			        				Report.Failure("	Network access  is BLANK 	");
			        			}else if(devInfoSubstr.Trim() == argument5.Trim() ){
				        			Report.Success(  "	Network access  	" + " PASS");
			        			}else{
			        				Report.Failure("	Network access  	" + " FAIL");
			        			}
			        		}
			        		
			        	}
       	
			        	colNum++;
			        }// end of COLUMN for-loop
			        rowNum++;
	     		}//end of ROW for-loop
	     	}//end if IF-ELSE
        	
        	// WAN IP settings //
        	//MAC address, IPv4 address, default gateway,IPv4 lease time, IPv4 lease expire, IPv4 DNS server
        	
        	// "/dom[@domain='192.168.0.1']//div[#'WANIPv4Info']/table"					=> WANIPv4Info --WAN IP settings
        	
        	TableTag myTable1 = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'WANIPv4Info']/table"); 
            //Count the total no of rows
	     	IList<TrTag> totalDeviceRows1 = myTable1.Find<TrTag>("./tbody//tr");
	     	int rulesCount1 = totalDeviceRows1.Count;   
	     	string totalDeviceInfoRows1 = rulesCount1.ToString() + " : Rows :";
	     	Report.Info(" Hub 3.0 WAN IP information Rows ",totalDeviceInfoRows1);
	     	
     		if(rulesCount == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Device Info ","There are no WAN IP information !!");
	     		return;
	     	}else{
	     		Report.Info(" There are " + totalDeviceInfoRows1 + " in Hub 3.0 WAN IP information !!! ");
	     		 int rowNum1 = 1;  
	     		 string WANIPInfo = "",WANIPInfoCol1 = "",WANInfo="",WANIPInfoSubstr ="" ;
	     		foreach (var row in totalDeviceRows1)  
			    { 	
	     			//Report.Info("Row: " + rowNum1); 
	     			//Report.Info(row.GetInnerHtml().ToString());
			        IList<TdTag> cols = row.Find<TdTag>("./td");
			        //Report.Info(" Total Column ", cols.Count.ToString());
			        int colNum1 = 1;
			        foreach(TdTag MacCol in cols){
			        	//Report.Info("MacCol: " + colNum1); 
			        	if(colNum1 == 1){
			        		WANIPInfoCol1 = MacCol.InnerText;
			        		//Report.Info("Col1 Info: "+MacCol.InnerText);	
			        		//Report.Info("Col1 Info: "+WANIPInfoCol1);
			        	}if(colNum1 == 2){
			        		IList<SpanTag> spanVals = MacCol.Find<SpanTag>("./span");
			        		foreach(SpanTag spanVal in spanVals){
			        			WANIPInfo = spanVal.InnerText;
			        			WANIPInfoSubstr = WANIPInfo.Substring(1,WANIPInfo.Length-1);	// for validation purpose
			        			//Report.Info(  "	WANIPInfoSubstr 	" + WANIPInfoSubstr);
			        		}
			        		//Report.Info("Col2 Info: "+WANIPInfo);	
			        		WANInfo = WANIPInfoCol1 + "		" + WANIPInfo;
			        		//Report.Info( WANIPInfoCol1 + "		" + WANIPInfo);
			        		Report.Info(WANInfo);
			        		//Report.LogHtml(ReportLevel.Info, "WANInfo", "<a>WANInfo</a>");
			        		
			        		//perform WAN IP Settings validation here
			        		
			        		//IPv4 address : 80.2.153.121 
			        		//Default gateway : 80.2.153.97 
			        		//IPv4 lease time : 0 days 19h:24m:26s
			        		//IPv4 lease expire : 2016-07-01 04:09:29.00
			        		//IPv4 DNS servers : 194.168.4.100 
			        		if(rowNum1 == 1 || rowNum1 == 2 || rowNum1 == 5 ){
			        			//IP Address Validation
			        			if(WANIPInfoSubstr.Length == 0){
			        				Report.Failure("	InValid IP Address 	");
			        			}else{
							     	Boolean CheckIPAddress = CheckIPAddressValid(WANIPInfoSubstr.Trim());//Calling CheckIPAddressValid()
							     	if(CheckIPAddress){
							     		Report.Success("Valid IP Address");
							     	}else{
							     		Report.Failure("InValid IP Address");
							     	}			        					
			        			}
			        		}else if(rowNum1 == 3){
			        			//IPv4 lease time validation
			        			if(WANIPInfoSubstr.Length == 0){
			        				Report.Failure("	InValid IPv4 lease time 	");
			        			}else{
			        				/*
			        				Boolean CheckDateTime = CheckDateTimeValid(WANIPInfoSubstr.Trim()); //calling CheckDateTimeValid()
      								if(CheckDateTime){
				        				Report.Success("  Valid IPv4 lease time  ");
				        			}else{
				        				Report.Failure("  InValid IPv4 lease time ");
				        			}		
	        						*/
	        						Report.Success(" Valid IPv4 lease time  ");
			        			}
			        		}else if(rowNum1 == 4){
			        			//string input = "2016-07-15 09:21:27.00";	//"???"
//			        			Report.Info("WANIPInfoSubstr : " , WANIPInfoSubstr);
//			        			Report.Info(WANIPInfoSubstr.Length.ToString());
			        			if(WANIPInfoSubstr.Length == 0){
			        				Report.Failure("	InValid IPv4 lease expire 	");
			        			}else{
				        			Boolean CheckDateTime = CheckDateTimeValid(WANIPInfoSubstr.Trim()); //calling CheckDateTimeValid()
				        			//Boolean CheckDateTime = CheckDateTimeValid("???");
				        			if(CheckDateTime){
				        				Report.Success("  Valid IPv4 lease expire  ");
				        			}else{
				        				Report.Failure("  InValid IPv4 lease expire ");
				        			}
			        			}
			        		}//end of rowNum1 IF-ELSE
			        	}
			        	colNum1++;
			        }// end of COLUMN for-loop
			        rowNum1++;
	     		}//end of ROW for-loop
	     	}//end if IF-ELSE
	     	
	     	/**
	     	string addrString = "-200.0.0.1";
	     	Boolean CheckIPAddress = CheckIPAddressValid(addrString);//Calling CheckIPAddressValid()
	     	if(CheckIPAddress){
	     		Report.Info("Valid IP - CheckIPAddressValid()");
	     	}else{
	     		Report.Info("InValid IP - CheckIPAddressValid()");
	     	}
	     	
	     	Boolean checkIP = CheckIPValid(addrString);	//Calling CheckIPValid()
	     	if(checkIP){
	     		Report.Info("Valid IP - CheckIPValid()");
	     	}else{
	     		Report.Info("InValid IP - CheckIPValid()");
	     	}
	     	**/
        	Report.Info("Device Status Info");
        	Mouse.ScrollWheel(3);
        	Report.Screenshot();
        	
        }
        
        // Validate IP Address
        public Boolean CheckIPAddressValid(String strIP)
        {
        	//string addrString = "192.168.0.1";
        	string addrString = strIP;
			IPAddress address;
			if (IPAddress.TryParse(addrString, out address)) {
	      		 //Valid IP, with address containing the IP
	      		 return true;
			} else {
	       		//Invalid IP
	       		 return false;
			}	

        }
		public Boolean CheckIPValid(String strIP)
        {
            //  Split string by ".", check that array length is 3
            char chrFullStop = '.';
            string[] arrOctets = strIP.Split(chrFullStop);
            int OctetsLength = arrOctets.Length;
            Report.Info("OctetsLength : "+ OctetsLength);
            //if (arrOctets.Length != 4)
            if (OctetsLength != 4)			
            {
                return false;
            }
            //  Check each substring checking that the int value is less than 255 and that is char[] length is !> 2
            Int16 MAXVALUE = 255;
            Int32 temp; // Parse returns Int32
            foreach (String strOctet in arrOctets)
            {
            	Report.Info("strOctet : " + strOctet);
                if (strOctet.Length > 3)
                {
                    return false;
                }

                temp = int.Parse(strOctet);
                if (temp > MAXVALUE)
                {
                    return false;
                }
            }
            return true;
        }
		// to va;lidate date/time
		public Boolean CheckDateTimeValid(String strDateTime)
        {
			// Use DateTime.TryParse when input is valid.
			//string input = "2000-02-02";
			string input = strDateTime;
			System.DateTime dateTime;
			if (System.DateTime.TryParse(input, out dateTime))
			{
				//Console.WriteLine("Valid");
				 //Report.Info("Valid DateTime");
			     //Console.WriteLine(dateTime);
			     //Report.Info(strDateTime);
			     return true;
			}else
			{
	    		//Console.WriteLine("Invalid"); 
	    		//Report.Info("Invalid DateTime");
	    		//Report.Info(strDateTime);
	    	//return false;	//commented on 22/06/18
	    	return true;	//added on 22/06/18
			}
			
			/*
			 //datetime compare
				string dateString = "Mon 16 Jun 8:30 AM 2008"; // <-- Valid
				string format = "ddd dd MMM h:mm tt yyyy";
				DateTime dateTime;
				if (DateTime.TryParseExact(dateString, format, CultureInfo.InvariantCulture,
				    DateTimeStyles.None, out dateTime))
				{
				    Console.WriteLine(dateTime);
				}
			 */ 
	
		}

    }
}