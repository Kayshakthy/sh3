///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Disable_All_Port_Forwarding_Rules
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        int TotalRows = 0;
        private void Init()
        {
            // Your recording specific initialization code goes here.
            Delay.Seconds(20);
            WebDocument webDocument1 = "/dom[@domain='192.168.0.1']";
            webDocument1.WaitForDocumentLoaded();
//            Delay.Seconds(40);
//            TableTag myTable1 = webDocument1.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']"); 
            TableTag myTable1 = webDocument1.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']"); //R3.11
            ///dom[@domain='192.168.0.1']//table[#'portTriggeringTable']
            //Report.Screenshot("New Port Triggering Rule", myTable.Element,true);
  
            //highlight the new port triggering rule
            IList<TrTag> rows1 = myTable1.Find<TrTag>("./tbody//tr");
            TotalRows = rows1.Count;
            Report.Info(" TotalRows(Before Add)",TotalRows.ToString());            
           
        }

        public void Choose_All_Port_Fwd_Rules_to_Disable()
        {
           // Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='fmCbx-fm-0-1') on item 'WebDocumentIE.FmCbxFm01'.", repo.WebDocumentIE.FmCbxFm01Info);
           // Validate.Attribute(repo.WebDocumentIE.FmCbxFm01Info, "Id", "fmCbx-fm-0-1");
           
           //uncheck all the Enabled buttons
            //Report.Log(ReportLevel.Info,"Uncheck all the Enabled buttons");
            Delay.Seconds(15);
            WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']"); //R3.11
//            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']");  //As per R3.5 (9.1.116J)
            
            //Count the total no of port forwarding rules (rows)
	     	IList<TrTag> totalRules = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalRules.Count;
	     	//Report.Info("Total Rules",rulesCount.ToString());
	     	string totalPortRules = "Total Rules : "+rulesCount.ToString();
	     	Report.Info("Port Forwarding ",totalPortRules);
	     	
	     	if(rulesCount > 0){
	     					// is there are any active rules ??
		     	//walkthrough the column values
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				int j=1;
				Report.Info("Total colsCount",colsCount.ToString());

				foreach(TdTag col in cols)  
		    	{  
					Report.Info("Column #",j.ToString());
		        	Report.Info("Column Value",col.InnerText); 
		        	
		        	/**
		        	if(j == 7) {
		        		Report.Info("Check box to be disabled");
		        		//Button okChrome = "/form[@processname='chrome']//button[@text='OK']";  
	    				//okChrome.Click();  
	    				//CheckBox chkBox = "/dom[@domain='192.168.0.1']//b[#'fmCbx-fm-0-1']";
	    				//chkBox.Uncheck();
	    				WebElement webElement = webDocument.FindSingle("/dom[@domain='192.168.0.1']//b[#'fmCbx-fm-0-1']");
	    				Report.Info(webElement.Id.ToString());
	    				webElement.DoubleClick();
		        	}
		        	j++;
		        	if(j==8) j=1;
		        	**/
		        	//if(j == 7 || j == 15 || j == 23) {
		        	/*
		        	if(j==1){
		        		// j=1, Local IP
		        		j++;
		        	}else if(j==2){
						//J=2,Local start port
						//localStartPort = col.InnerText;
						j++;
					}else if(j==3){
						//J=3,Local end port
						//localEndPort = col.InnerText;
						j++;
					}else if(j==4){
						//J=4,External start port
						//externalStartPort = col.InnerText;
						j++;
					}else if(j==5){
						//J=5,External end port
						//externalEndPort = col.InnerText;
						j++;
					}else if(j==6){
						//j=6,protocol
						j++;
					}else */ if(j==7){
		        		//enable or disable ?
		        		
		        		Report.Info("Enable or Disable ?");
		        		
		        		/**
		        		WebElement webElement = col.Element;
		        		Report.Info("webElement-Path", webElement.GetPath().ToString());
		        		RxPath path = webElement.GetPath();
		        		string strPath = path.ToString();
		        		//Report.Info(strPath);
		        		Report.Log(ReportLevel.Info,"strPath",strPath);
		        		//Report.Info("Style", col.Headrs());
			        	string colInnerHtml = col.GetInnerHtml();//to get inner HTML
			        	Report.Info("GetInnerHtml",colInnerHtml);		
						webElement.Focus();      webElement.Click();
						**/
						
			        	//strPath = strPath + "/input[@type='checkbox']";
			        	//strPath = strPath + "/input[@name='Enabled']";
			        	//Report.Log(ReportLevel.Info,"strPath",strPath);
			        	//CheckBox chkBox = webDocument.FindSingle<Ranorex.CheckBox>(path);
			        	
			        	//CheckBox chkBox =	myTable.FindSingle(".//input[@name='Enabled']", 30000);
			        	//chkBox.Uncheck();
		        		//locate checkbox
		        		
		        		//path ="/dom[@domain='192.168.0.1']//b[#'fmCbx-fm-0-1']";
		        		//CheckBox chkBox = Host.Local.FindSingle<Ranorex.CheckBox>(path);
		        		//CheckBox chkBox = webDocument.FindSingle<Ranorex.CheckBox>(".//b[#'fmCbx-fm-0-1']");
		        		//Report.Info(chkbox.Checked.ToString());   
		        		//WebElement webElement1 = repo.WebDocumentIE.Self.FindSingle(path);
						  	/*    		
			        		IList<TdTag> childs = webElement.Find<TdTag>(path);
			        		Report.Info("Total childsCount",childs.Count.ToString());
							foreach(TdTag child in childs)  
			    			{  
			        			//Report.Info(child.TagName); 
			        			Report.Info(child.GetPath().ToString());
			        			//Report.Info(child.TagValue);
			        			//Report.Info(child.Id);
			        			//Report.Info(child.Title);
							}
							*/
						/*
		        		if(webElement.Enabled){
		        			webElement.DoubleClick();
		        			//Report.Info("Enabled");
		        		}else{
		        			webElement.Click();
		        			//Report.Info("Disabled");
		        		}	
		        		*/
		        		//int x = webElement.ScreenRectangle.X;
		        		//int y = webElement.ScreenRectangle.Y;
		        		//String cords = x.ToString() + ","+ y.ToString();
		        		//Report.Info(cords);
		        		
		        		IList<InputTag> inputVals = col.Find<InputTag>("./input");
		        		Report.Info("input count :  "+inputVals.Count);
		        		foreach(InputTag inputVal in inputVals){
		        			Ranorex.InputTag testTag = inputVal;
		        			Report.Info(inputVal.GetPath().ToString());
		        			if(testTag.Checked.ToString() == "True"){
		        				Report.Info(" portForwardingTableEnabledTag is currently enabled ");
		        				inputVal.Checked="False";
		        				Delay.Seconds(5);
		        				Report.Log(ReportLevel.Success,"This port forwarding rule is disabled now...");
		        				Report.Screenshot("PortForwardingRule",col.Element,true);
		        			}else{
		        				//Report.Info(" portForwardingTableEnabledTag is currently disabled ");
							    //inputVal.PerformClick();
							    //Delay.Seconds(5);
		        				Report.Log(ReportLevel.Success,"This port forwarding rule is already disabled !!!");
		        				Report.Screenshot("PortForwardingRule",col.Element,true);
		        			}
		        			
		        		}//end of for-loop
						        				
						j++;//increment the column
						
		        	}else if(j==8){
						//delete box
						j=1;
		        	}else{ 	j++; }
	
				} // end of FOR-LOOP :TdTag
				
				Report.Log(ReportLevel.Success,"The following port forwarding rule(s) are Disabled");
				Delay.Seconds(1);
				//Report.Screenshot();
				Report.Screenshot("PortForwardingRule",myTable.Element,true);
        	}else{
				Report.Failure("Port Forwarding ","There are no active Port Forwarding rules to Disable !!");
	     		TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes_Disable_All").Checked = false;
	     		return;
        	}// end of if-else
   	
    	
        }

        public void Choose_All_Port_Forward_Rules_to_Disable()
        {	//choose all port rules ( except UPnP) to delete - Added on 06/06/2017 , R3.11
            //Delay.Seconds(15);
            
            Total_Port_Fwding_Rules tpfr = new Total_Port_Fwding_Rules();
            int ruleCnt = tpfr.pfRules_Count();
            Report.Info(" ruleCnt " + ruleCnt);
            
            if(ruleCnt == -1){
 				Report.Failure("Port Forwarding ","There are no active Port Forwarding rules to Disable !!");
	     		TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes_Disable_All").Checked = false;           	
            	return;
            }else if(TotalRows <6){
				Delay.Seconds(5);
        	}else if(TotalRows <10){
				Delay.Seconds(10);
        	}else if(TotalRows >10 && TotalRows <20){
        		Delay.Seconds(20);
        	}else if(TotalRows >20 && TotalRows <30){
        		Delay.Seconds(30);
        	}else if(TotalRows >30){
        		Delay.Seconds(40);
        	}
            WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']"); //R3.11
//            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']");  //As per R3.5 (9.1.116J)
            
            //Count the total no of port forwarding rules (rows)
	     	IList<TrTag> totalRules = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalRules.Count;
	     	//Report.Info("Total Rules",rulesCount.ToString());
	     	string totalPortRules = "Total Rules : "+rulesCount.ToString();
	     	//Report.Info("Port Forwarding ",totalPortRules);
	     	
	     	if(rulesCount > 0){
	     		Report.Info("Total Rules",totalPortRules);
	     		// is there are any active rules ??
		     	//walkthrough the column values
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				int j=1;
				//Report.Info("Total colsCount",colsCount.ToString());

				foreach(TdTag col in cols)  
		    	{  
					Report.Info("Column #",j.ToString());
		        	Report.Info("Column Value",col.InnerText); 
					if(j==5){
		        		//enable or disable ?
		        		
		        		//Report.Info("Enable or Disable ?");
		        		
		        		IList<InputTag> inputVals = col.Find<InputTag>("./input");
		        		int inputValsCount = inputVals.Count;
		        		//Report.Info("input count :  "+inputVals.Count);
		        		Report.Info("input count :  "+inputValsCount);
		        		if(ruleCnt == 1 && inputValsCount == 0){
		        			Report.Info(" Skip - Apply_Port_Forward_Changes_Disable_All ");
		        			TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes_Disable_All").Checked = false;
		        		}
		        		foreach(InputTag inputVal in inputVals){
		        			Ranorex.InputTag testTag = inputVal;
		        			Report.Info(inputVal.GetPath().ToString());
		        			if(testTag.Checked.ToString() == "True"){
		        				Report.Info(" portForwardingTableEnabledTag is currently enabled ");
		        				inputVal.Checked="False";
		        				Delay.Seconds(5);
		        				Report.Log(ReportLevel.Success,"This port forwarding rule is disabled now...");
		        				Report.Screenshot("PortForwardingRule",col.Element,true);
		        			}else{
		        				//Report.Info(" portForwardingTableEnabledTag is currently disabled ");
							    //inputVal.PerformClick();
							    //Delay.Seconds(5);
		        				Report.Log(ReportLevel.Success,"This port forwarding rule is already disabled !!!");
		        				Report.Screenshot("PortForwardingRule",col.Element,true);
		        			}
		        			
		        		}//end of for-loop : InputTag
		        		j++;//increment the column
		        	}else if(j==6){
						//delete box
						//Report.Info("delete ?");
						j=1;
		        	}else{ 	j++; }
				}// end of FOR-LOOP :TdTag
				Report.Log(ReportLevel.Success,"The following port forwarding rule(s) are Disabled");
				Delay.Seconds(1);
				//Report.Screenshot();
				Report.Screenshot("PortForwardingRule",myTable.Element,true);
				
        	}else{
				Report.Failure("Port Forwarding ","There are no active Port Forwarding rules to Disable !!");
	     		TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes_Disable_All").Checked = false;
	     		return;
        	}// end of if-else
        }

    }
}