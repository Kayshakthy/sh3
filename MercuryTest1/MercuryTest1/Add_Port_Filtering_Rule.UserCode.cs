///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Add_Port_Filtering_Rule
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        int TotalRows=0;
        private void Init()
        {
            // Your recording specific initialization code goes here.
            WebDocument webDocument1 = "/dom[@domain='192.168.0.1']";
            TableTag myTable1 = webDocument1.FindSingle("/dom[@domain='192.168.0.1']//table[#'ipv4FilterTable']"); 

            //highlight the new MACFiltering rule
            IList<TrTag> rows1 = myTable1.Find<TrTag>("./tbody//tr");
            TotalRows = rows1.Count;
            Report.Info("------Inside Init()------ TotalRows" ,TotalRows.ToString());                
        }

        public void Validate_New_IPv4Port_Filtering_Rule()
        {
        	// Read the screen and IPv4Port_Filtering table to validate the new rule
        	
        	Report.Info("------------Inside Validate_New_IPv4Port_Filtering_RANGE_Rule -------");
        	if(TotalRows <10){
				Delay.Seconds(20);
        	}else if(TotalRows >10 && TotalRows <20){
        		Delay.Seconds(30);
        	}else if(TotalRows >20 && TotalRows <30){
        		Delay.Seconds(40);
        	}else if(TotalRows >30){
        		Delay.Seconds(50);
        	}
            WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            //Report.Info(webDocument.GetHtml());
           
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ipv4FilterTable']"); 
            //Count the total no of IPv4 port Filter rules (rows)
	     	IList<TrTag> totalIPv4Rules = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalIPv4Rules.Count;   
	     	string totalIPv4PortRules = "Total Rules : "+rulesCount.ToString();
	     	Report.Info("Active IPv4 Port Filter ",totalIPv4PortRules);
	     	
 			if(TotalRows == 1 && TotalRows == rulesCount){
            	//Report.Info("//-------------------- TotalRows == 1 && TotalRows == rowsCnt--------// ");
            	int rowNum = 1; 
            	foreach (var row in totalIPv4Rules){  
            		/**
			        Report.Info("Row: " + rowNum);     
			        IList<TdTag> cols = row.Find<TdTag>("./td");
			        foreach(TdTag MacCol in cols){
			        	Report.Info(MacCol.InnerText.ToString());
			        }
			        **/
					if(rowNum == rulesCount){	//to get the last  added rule (row)
						//Report.Info("//-------------------- rowNum == rowsCnt ------------------------// ");
						Mouse.ScrollWheel(10);
						row.EnsureVisible();
						//Report.Info("Valid... New MAC Filtering Rule is added!");
						IList<TdTag> cols = row.Find<TdTag>("./td");
						if(cols.Count == 1){
							Report.Failure("No new filtering rule is added !!!");
							Delay.Seconds(1);
							//Report.Screenshot("ipv4FilterTable",row.Element,true);
							Report.Screenshot("ipv4FilterTable",myTable.Element,true);
						}else{
							Report.Success("Valid... New IPv4 Port Filtering Rule is added!");
							Delay.Seconds(1);
							//Report.Screenshot("ipv4FilterTable",row.Element,true);
							Report.Screenshot("ipv4FilterTable",myTable.Element,true);
						}
						break;
					}
					rowNum++;			       
            	}
            }else if(TotalRows > 1 && TotalRows == rulesCount ){		// no rows are added
            	Report.Info("//-------------------- TotalRows == rowsCnt ------------------------// ");
            	Report.Failure("No new filtering rule is added  !!!");
	     	}else{		// difference in rows
	     		
            	Report.Info("//-------------------- Rules are added -----------------//");
				int rowNum = 1;  
				foreach (var row in totalIPv4Rules)  
				{ 
					if(rowNum == rulesCount){	//to get the last  added rule (row)
						Report.Info("//-------------------- rowNum == rowsCnt ------------------------// ");
						Mouse.ScrollWheel(10);
						row.EnsureVisible();
						//Report.Info("Valid... New MAC Filtering Rule is added!");
						Report.Success("Valid... New IPv4 Port Filtering Rule is added!");
						Report.Screenshot("ipv4FilterTable",row.Element,true);
						break;
					}
					rowNum++;
				}	//end of for-loop
            }//end of if-else
	     	
        }

    }
}