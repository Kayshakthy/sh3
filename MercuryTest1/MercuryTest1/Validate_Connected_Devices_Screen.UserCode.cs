///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Validate_Connected_Devices_Screen
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_Connection_Device_Table()
        {
//        	Report.Screenshot(repo.WebDocument19216801.DevicesInformation.Element,true);
			WebDocument webDocument = "/dom[@domain='192.168.0.1']"; webDocument.WaitForDocumentLoaded();
			Delay.Seconds(5);
        	TableTag Connection_DeviceTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'AttachedDevicesTable']"); //R3.9 ( 9.1.116AD)
        	Report.Screenshot("Devices Connected",Connection_DeviceTable.Element,true);	// print the devices table
        	IList<TrTag> rows = Connection_DeviceTable.Find<TrTag>("./tbody//tr");
        	int rowsCount = rows.Count;
        	Report.Info("Total Devices Connected",rowsCount.ToString());
        	int rowNum = 1,speed =0;  
        	string networkType="",tempSpeed="";
        	bool isSuccess = true;
        	foreach (var row in rows)
        	{
        		IList<TdTag> cols = row.Find<TdTag>("./td");
        		int colNum = 1;
        		
        		foreach(TdTag MacCol in cols){
        			//Report.Info("colNum: " + colNum);
        			//Report.Info("Col1 Info: "+MacCol.InnerText);	
        			if(colNum ==4){
        				tempSpeed = MacCol.InnerText;
        				isSuccess = int.TryParse(tempSpeed,out speed);
        			}else if(colNum ==5){
        				networkType = MacCol.InnerText;
        			}
        			
        			colNum++;
        		}	// end of COLUMN for-loop
        		if(networkType.StartsWith("Ethernet")){
        			if(isSuccess){
        				if(speed >= 1000){
        					Report.Success("Ethernet network devices speed validation pass!");
        				}else{
        					Report.Failure("Ethernet network devices speed validation Failure");
        				}
        			}
        		}/* else if(networkType.StartsWith("Wi-Fi"){
        		         	if(isSuccess){
        		         		if(speed >= 50){
        		         			Report.Success("Wi-Fi network devices speed validation pass!");
        		         		}else{
        		         			Report.Failure("Wi-Fi network devices speed validation Failure");
        		         		}
        		         	}
        		}*/
        		rowNum++;
        	}	//end of ROW for-loop

        }

        public void Validate_ConnectedTo()
        {
            Validate.Attribute(repo.WebDocument19216801.AttachedDevicesTable1.ConnectedToInfo, "InnerText", "Connected to");
            
        }

    }
}