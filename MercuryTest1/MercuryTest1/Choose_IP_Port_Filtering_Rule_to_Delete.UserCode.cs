///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Choose_IP_Port_Filtering_Rule_to_Delete
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Choose_IP_Port_Filter_Rules_to_Delete(string argument1, string argument2, string argument3, string argument4, string argument5, string argument6, string argument7, string argument8)
        {
        	//This method is to find the rows to delete
        	
        	//argument1 - src start IP, argument2-src end IP
        	//argument3 - Dest start IP, argument4 - Dest end IP
        	//argument5 - src start port, argument6 - src end port
        	//argument7 - Dest start port, argument8 - Dest end port
        	
       		//Report.Info("---inside Choose_IP_Port_Filter_Rules_to_Delete --- ");
        	Delay.Seconds(30);
        	 
            WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            //Report.Info(webDocument.GetHtml());
           
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ipv4FilterTable']"); 
            //Count the total no of IPv4 port Filter rules (rows)
	     	IList<TrTag> totalIPv4Rules = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalIPv4Rules.Count;   
	     	string totalIPv4PortRules = "Total Rules : "+rulesCount.ToString();
	     	Report.Info("Active IPv4 Port Filter ",totalIPv4PortRules);
	     	
	     	if(rulesCount == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("IPv4 Port Filter ","There are no active rules to delete !!");
	     		TestSuite.Current.GetTestCase("Delete_All_IPv4Port_Filtering_Rules").Checked = false;
	     		return;
	     	}else{
	     		Report.Info(" IPv4 Port_filter Rules are there to delete !!! ");
	     		//walkthrough the column values
	     		
				/**
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				Report.Info("Total colsCount",colsCount.ToString());
				**/
			    int rowNum = 1;  
			    int delCheck = 0;
			    Boolean isMatch = false;
			    foreach (var row in totalIPv4Rules)  
			    {  
			        //Report.Info("===========================");  
			        //Report.Info("Row: " + rowNum);     
			        //Report.Info(row.GetInnerHtml().ToString());
			        IList<TdTag> cols = row.Find<TdTag>("./td");
			        //int colsCount = cols.Count;
			        int colNum = 1;
			        String newPath = "";
			        String sourceIP = "", destIP = "",sourceStartIP="", sourceEndIP="",destStartIP = "",destEndIP = "",protocol="",srcStartPort="",srcEndPort="",destStartPort="",destEndPort="",srcportRange="";
			        foreach(TdTag col in cols){
			        	//Report.Info("Col: " + colNum);   
			        	//Report.Info("Col Info: "+col.InnerText);
			        	if(colNum == 1){
			        		//Report.Info("----------------- Source IP ------ ");
			        		//Report.Info(col.GetInnerHtml().ToString());
			        		IList<SpanTag> spanVals = col.Find<SpanTag>("./span");
			        		//Report.Info("span count :  "+spanVals.Count);
			        		
			        		 foreach(SpanTag spanVal in spanVals){
			        			sourceIP = spanVal.InnerText;
			        			//Report.Info("Source IP : " + sourceIP);
			        		 }

			        		int i = sourceIP.IndexOf('-');
			        		if(i>0){
			        			sourceStartIP=sourceIP.Substring(0,i);
			        			sourceEndIP=sourceIP.Substring(i+1);
			        		}else{
			        			sourceStartIP="All";
			        			sourceEndIP="All";
			        		}
			        		//Report.Info("-----------------sourceStartIP,sourceEndIP"+sourceStartIP + ";"+sourceEndIP);
			        	}else if(colNum == 2){
			        		//Report.Info("----------------- Destination IP ------ ");
			        		//Report.Info(col.GetInnerHtml().ToString());
			        		IList<SpanTag> spanVals = col.Find<SpanTag>("./span");
			        		foreach(SpanTag spanVal in spanVals){
			        			destIP = spanVal.InnerText;
			        			//Report.Info("Dest IP : " + destIP);
			        		 }
			        		int i = destIP.IndexOf('-');
			        		if(i>0){
			        			destStartIP = destIP.Substring(0,i);
			        			destEndIP = destIP.Substring(i+1);
			        		}else{
			        			destStartIP ="All";
			        			destEndIP ="All";
			        		}
			        		//Report.Info("-----------------destStartIP,destEndIP"+destStartIP+";"+destEndIP);
			        	}else if(colNum == 3){
			        		//Protocol
			        		protocol = col.InnerText.ToString();
			        		//Report.Info("----------------- Protocol");
			        	}else if(colNum == 4){
			        		//source port range - start , end
			        		IList<SpanTag> spanVals = col.Find<SpanTag>("./span");
			        		foreach(SpanTag spanVal in spanVals){
			        			srcportRange = col.InnerText;
			        			Report.Info(srcportRange);
			        		}
			        		//Report.Info(srcportRange);
			        		int i = srcportRange.IndexOf(':');
			        		Report.Info("----------------- "+i.ToString());
			        		if(i>0){
			        			srcStartPort = srcportRange.Substring(0,i);
			        			srcEndPort = srcportRange.Substring(i+1);
			        		}else{
			        			srcStartPort="All";
			        			srcEndPort="All";
			        		}
			        		//Report.Info("-----------------source port range- start, end"+srcStartPort +";"+srcEndPort );
			        	}else if(colNum == 5){
			        		//desinatin port range - start, end
			        		String destportRange = col.InnerText.ToString();
			        		int i = destportRange.IndexOf(':');
			        		//Report.Info("----------------- "+i.ToString());
			        		if(i>0){
			        			destStartPort = destportRange.Substring(0,i);
			        			destEndPort = destportRange.Substring(i+1);
			        		}else{
			        			destStartPort ="All";
			        			destEndPort ="All";
			        		}
			        		//Report.Info("-----------------desinatin port range - start, end" + destStartPort + ";"+destEndPort);
			        	}else if(colNum == 6){
			        		//enabled or disabled
			        		//Report.Info("-----------------enabled or disabled");
			        	}else if(colNum == 7){
			
			        		// check if source ,dest IP addresses and port numbers are matching;if true check the delete box
			        		//Report.Info("----------------- click delete checkbox ------");
			        		//Report.Info(argument1 + ";"+ argument2 + ";"+argument3 + ";"+argument4 + ";"+argument5 + ";"+argument6 + ";"+argument7 + ";"+argument8);
			        		if(sourceStartIP == argument1 && sourceEndIP == argument2 && destStartIP == argument3 && destEndIP == argument4 && srcStartPort == argument5 && srcEndPort == argument6 && destStartPort == argument7 && destEndPort == argument8 ){
			        			//checking the source ,dest IP addresses and port numbers are matching
			        			isMatch = true;
				        		Report.Info("=================== match,rule exist ===========");
			        			//Report.Info(col.GetInnerHtml().ToString());
				        		//Report.Info("Col path: "+col.GetPath().ToString());
				        			//	/input[#'ipv4FilterTable-Delete-0']
				
				        		newPath = col.GetPath() + "/input[#'ipv4FilterTable-Delete-"+delCheck+"']";		 
				        		//Report.Info("newPath : "+ newPath);
				        		
				        		Ranorex.InputTag ipv4FilterTableDeleteTag = newPath;
				        		//Report.Info("ipv4FilterTableDeleteTag(Default) : " + ipv4FilterTableDeleteTag.Checked.ToString());
				        		
				        		if (ipv4FilterTableDeleteTag.Checked.ToString() == "False"){
				        			//Report.Info("----------------- ipv4FilterTableDeleteTag was False ---");
				        			Delay.Seconds(1);
									//ipv4FilterTableDeleteTag.Checked = "True";
									ipv4FilterTableDeleteTag.PerformClick();
								}else{
									Report.Info(" ipv4FilterTableDeleteTag is already Enabled ");
								}	
			    				string rst = "The following IPv4Port_Filtering rule is deleted permanently !!!";
								Report.Success(rst);				        		
			        			Report.Screenshot("IPv4Port_Filtering",row.Element,true);	
			        			
			        		}
			        		/*else{
			        			Report.Info(" ===== This Rule does not exist =====");
			        			Report.Screenshot("IPv4Port_Filtering",myTable.Element,true);
			        		}*/
	
			        	}
	
						colNum++;
			        	}//end of for-loop: column
				        if(isMatch){
				        	break;
				        }
			        	rowNum++;
			        	delCheck++;	//counter to select delete checkbox
			        }//end of for-loop: row
			    	//Report.Info(rowNum + ";"+ rulesCount);
			    	if((rowNum-1) == rulesCount  && !isMatch){	//if rule does not exist
					    Report.Info(" ===== This Rule does not exist =====");
					    Delay.Seconds(1);
			        	Report.Screenshot("IPv4Port_Filtering",myTable.Element,true);
			    	}
			    	/*else if((rowNum-1) == rulesCount  && isMatch){
			    		 Report.Info(" ===== This Rule deleted successfully =====");
			    	}*/

					
	
        }

    }
}
}