///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Add_New_Port_Trigger_rule recording.
    /// </summary>
    [TestModule("68d2b59a-0d8e-45ba-ba4c-358639c77056", ModuleType.Recording, 1)]
    public partial class Add_New_Port_Trigger_rule : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Add_New_Port_Trigger_rule instance = new Add_New_Port_Trigger_rule();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Add_New_Port_Trigger_rule()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Add_New_Port_Trigger_rule Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                repo.WebDocument19216801.ApplyAddRule.Click("67;24");
                Delay.Milliseconds(200);
            } catch(Exception) {  }
            
            Add_New_PortTriggerRule();
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'WebDocument19216801.ApplyAddRule'.", repo.WebDocument19216801.ApplyAddRuleInfo, new RecordItemIndex(2));
            //Validate.Attribute(repo.WebDocument19216801.ApplyAddRuleInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Class='submitBtn') on item 'WebDocument19216801.ApplyAddRule'.", repo.WebDocument19216801.ApplyAddRuleInfo, new RecordItemIndex(3));
            //Validate.Attribute(repo.WebDocument19216801.ApplyAddRuleInfo, "Class", "submitBtn");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='ApplyAddRule') on item 'WebDocument19216801.ApplyAddRule'.", repo.WebDocument19216801.ApplyAddRuleInfo, new RecordItemIndex(4));
            //Validate.Attribute(repo.WebDocument19216801.ApplyAddRuleInfo, "Id", "ApplyAddRule");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagName='input') on item 'WebDocument19216801.ApplyAddRule'.", repo.WebDocument19216801.ApplyAddRuleInfo, new RecordItemIndex(5));
            //Validate.Attribute(repo.WebDocument19216801.ApplyAddRuleInfo, "TagName", "input");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='Add rule') on item 'WebDocument19216801.ApplyAddRule'.", repo.WebDocument19216801.ApplyAddRuleInfo, new RecordItemIndex(6));
            //Validate.Attribute(repo.WebDocument19216801.ApplyAddRuleInfo, "TagValue", "Add rule");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=110,Height=42}) on item 'WebDocument19216801.ApplyAddRule'.", repo.WebDocument19216801.ApplyAddRuleInfo, new RecordItemIndex(7));
            //Validate.ContainsImage(repo.WebDocument19216801.ApplyAddRuleInfo, ApplyAddRule_Screenshot1, ApplyAddRule_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocumentIE.ErrTipTriggerStartPort'.", repo.WebDocumentIE.ErrTipTriggerStartPortInfo, new RecordItemIndex(8));
            //Validate.Attribute(repo.WebDocumentIE.ErrTipTriggerStartPortInfo, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocumentIE.InvalidRangeOfPorts1'.", repo.WebDocumentIE.InvalidRangeOfPorts1Info, new RecordItemIndex(9));
            //Validate.Attribute(repo.WebDocumentIE.InvalidRangeOfPorts1Info, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocumentIE.ErrTipTriggerEndPort'.", repo.WebDocumentIE.ErrTipTriggerEndPortInfo, new RecordItemIndex(10));
            //Validate.Attribute(repo.WebDocumentIE.ErrTipTriggerEndPortInfo, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocumentIE.InvalidRangeOfPorts2'.", repo.WebDocumentIE.InvalidRangeOfPorts2Info, new RecordItemIndex(11));
            //Validate.Attribute(repo.WebDocumentIE.InvalidRangeOfPorts2Info, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocumentIE.ErrTipTargetStartPort'.", repo.WebDocumentIE.ErrTipTargetStartPortInfo, new RecordItemIndex(12));
            //Validate.Attribute(repo.WebDocumentIE.ErrTipTargetStartPortInfo, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocumentIE.InvalidRangeOfPorts3'.", repo.WebDocumentIE.InvalidRangeOfPorts3Info, new RecordItemIndex(13));
            //Validate.Attribute(repo.WebDocumentIE.InvalidRangeOfPorts3Info, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Invalid range of ports') on item 'WebDocument19216801.InvalidRangeOfPorts'.", repo.WebDocument19216801.InvalidRangeOfPortsInfo, new RecordItemIndex(14));
            //Validate.Attribute(repo.WebDocument19216801.InvalidRangeOfPortsInfo, "InnerText", "Invalid range of ports");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocumentIE.ErrTipTargetEndPort'.", repo.WebDocumentIE.ErrTipTargetEndPortInfo, new RecordItemIndex(15));
            //Validate.Attribute(repo.WebDocumentIE.ErrTipTargetEndPortInfo, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            try {
                //Validate_ApplyAdd_Port_Triggering_Rule();
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
        }

#region Image Feature Data
        CompressedImage ApplyAddRule_Screenshot1
        { get { return repo.WebDocument19216801.ApplyAddRuleInfo.GetScreenshot1(new Rectangle(0, 0, 110, 42)); } }

        Imaging.FindOptions ApplyAddRule_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ApplyAddRule_Screenshot1_2
        { get { return repo.WebDocument19216801.ApplyAddRuleInfo.GetScreenshot1(new Rectangle(0, 0, 0, 0)); } }

        Imaging.FindOptions ApplyAddRule_Screenshot1_2_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
