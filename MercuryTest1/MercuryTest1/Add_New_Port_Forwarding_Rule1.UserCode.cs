///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Add_New_Port_Forwarding_Rule1
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        int TotalRows=0,colCnts=0;
        private void Init()
        {
            // Your recording specific initialization code goes here.
            Delay.Seconds(30);
            WebDocument webDocument1 = "/dom[@domain='192.168.0.1']";
            webDocument1.WaitForDocumentLoaded();
            TableTag myTable1 = webDocument1.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']"); // As per R3.11 (9.1.116BA)
//            TableTag myTable1 = webDocument1.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']");  //As per R3.5 (9.1.116J)
            //Report.Screenshot("New Port Triggering Rule", myTable.Element,true);
            
          
            //highlight the new port triggering rule
            IList<TrTag> rows1 = myTable1.Find<TrTag>("./tbody//tr");
            TotalRows = rows1.Count;
            //Report.Info("------Inside Init()------ TotalRows(init)----- : " ,TotalRows.ToString());
            Report.Info("TotalRules(Before)",TotalRows.ToString());
            IList<TdTag> cols = myTable1.Find<TdTag>("./tbody//td"); 
            colCnts = cols.Count;
            Report.Info("colCnts :",colCnts.ToString());
        }

        public void Validate_New_PortForwardingRule()
        {
        	Report.Info(" --- Inside Validate_New_PortForwardingRule --- ");
        	//Validate New_PortForwardingRule
        	if(TotalRows <5 ){
        		Delay.Seconds(30);
        	}else if (TotalRows >=5 && TotalRows < 10 ){
        		Delay.Seconds(40);
        	}else if (TotalRows >=10 && TotalRows < 15 ){
        		Delay.Seconds(50);
        	}else{
        		Delay.Seconds(60);
        	}
			//Ranorex.Report.Log(ReportLevel.Success,"New Port Triggering Added Successfully!!");
			
			//Code to display the result screen
			
			WebDocument webDocument = "/dom[@domain='192.168.0.1']";
			webDocument.WaitForDocumentLoaded();
			//IList<TableTag> Tb = webDocument.FindChildren<TableTag>();
            //Report.Info(Tb.Count.ToString());
           
            //Report.Info(webDocument.GetHtml());
            
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']");  //As per R3.11 (9.1.116BA)
//            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']");  //As per R3.5 (9.1.116J)
            //Report.Screenshot("New Port Triggering Rule", myTable.Element,true);
                       
            //highlight the new port triggering rule
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            Report.Info("Total Rules(After)",rowsCnt.ToString());
            //Report.Info("------TotalRows(before Adding) : " ,TotalRows.ToString());
            
            if(TotalRows == rowsCnt & colCnts >1){		// no rows are added
            	Report.Info("//-------------------- TotalRows == rowsCnt ------------------------// ");
            	
            	if(rowsCnt == 32){
					//Report.Success("PortForwardingTable"," There are already 32 rules, FW Table is full !!! ");
					Report.Info(" Already 32 rules in the table !!! ");
					//return;
				}
            	
            	//Report.Info("InValid... This PortForwardingTable cannot be added !");
				//Report.Log(ReportLevel.Failure,"PortForwardingTable","Unable to add this new rule");
				
				/*
				TableTag errorTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'AddRule']/table");
				IList<TrTag> errorRows = errorTable.Find<TrTag>("./tbody//tr");
				Report.Info("errorRows",errorRows.ToString());
				*/
				//bool rst=true;
				bool tblRst = false;
				tblRst = Validate.Attribute(repo.MessageFromWebpage.Text65535Info, "WindowText", "Table FWVirtSrvTable is full","{2}",true);
            	//Report.Info("tblRst",tblRst.ToString());
            	
            	//if(rst == tblRst){
            	if(tblRst){	// if "Table FWVirtSrvTable is full"
            		if(rowsCnt == 31){
	            		Report.Log(ReportLevel.Success,"Table FWVirtSrvTable is full,  Adding 32nd Rule !!!");
	            		Report.Screenshot("PortForwardingTable",repo.MessageFromWebpage.MessageFromWebpage,true);
	            		//System.Environment.Exit(0);
	            		Delay.Seconds(2);
	            		repo.MessageFromWebpage.ButtonOK.Click();	//Click OK Button
	            		return;
            		}else{
            			string tabFull = "Unable to add this new rule after:  "+rowsCnt+ " rules";
            			//Report.Failure("PortForwardingTable",tabFull);
            			//Ranorex.Validate.Fail(tabFull);// Method to mark a test case as failed and immediately exit the current module and test case iteration
            			throw new Ranorex.ValidationException(tabFull);
            			//return;
            		}
            	}
            
				Report.Failure("PortForwardingTable","Unable to add this new rule because of the below reason !!! ");
				Delay.Seconds(5);
				
				//errorTable.EnsureVisible();
				//Report.Screenshot("PortForwardingTable",errorTable.Element,false);
				
				Report.Screenshot("PortForwardingTable",myTable.Element,true);
				return;
            }else{		// difference in rows
				int rowNum = 1;  
				foreach (var row in rows)  
				{  
					//Report.Info("<---This port triggering rule is disabled from the list--->");
					if(rowNum == rowsCnt){	//to get the last  added rule (row)
						Report.Info("//-------------------- rowNum == rowsCnt ------------------------// ");
						//Report.Info(row.Element.Visible.ToString());
						//Report.Info(row.Element.Size.ToString());
						
						/*
							row.Element.Focus();
							if(row.Element.Visible){// if true
								Report.Info("Valid... New PortForwardingTable is added!");
								Report.Screenshot("PortForwardingTable",row.Element,true);
							}else if(!row.Element.Visible){ //if false
								Report.Info("InValid... This PortForwardingTable cannot be added !");
								Report.Log(ReportLevel.Failure,"PortForwardingTable","Unable to add this new rule");
								Report.Screenshot();
							}
						*/
						Mouse.ScrollWheel(10);
						//row.Element.Focus();
						row.EnsureVisible();
						//Report.Info(row.Element.Visible.ToString());
						Report.Info("Valid... New PortForwardingTable is added!");
						Report.Screenshot("PortForwardingTable",row.Element,true);
						//CompressedImage CI = row.CaptureCompressedImage();
						//Delay.Seconds(2);
						//Report.Screenshot();
						break;
					}
					rowNum++;
				}	//end of for-loop
            }
        }

    }
}