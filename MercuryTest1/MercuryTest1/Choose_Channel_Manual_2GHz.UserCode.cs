///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
	public partial class Choose_Channel_Manual_2GHz
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void Choose_Manual_Channel_2GHz(string argument1)
		{
			Report.Info("Channel Number(2GHz) : "+argument1);
			int channelNumber = Int32.Parse(argument1.Trim()); 
			if(channelNumber < 52){
				Delay.Seconds(5);
				WebDocument webDocument = "/dom[@domain='192.168.0.1']";
				//Ranorex.SelectTag protocolTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'IPv4ProtocolGrp']");
				//Ranorex.SelectTag protocolTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'WirelessMode50']");
				//Ranorex.SelectTag protocolTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'WirelessMode24']");
				//Ranorex.SelectTag protocolTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'Channel50']");
				Ranorex.SelectTag protocolTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'Channel24']");
				//dom[@domain='192.168.0.1']//select[#'WiFi24ChannelBW']
				//dom[@domain='192.168.0.1']//select[#'WiFi50ChannelBW']
				foreach(Ranorex.OptionTag optTag in protocolTag.Find(".//option"))
				{
					Report.Info(optTag.InnerText);
					string tempChannel = " Channel "+argument1.Trim();
					Report.Info("tempChannel : " + tempChannel);
//					if(optTag.InnerText.Trim() == argument1.Trim()){
					if(optTag.InnerText.Trim() == tempChannel.Trim()){	
						Report.Info("2GHz Matching-True");
						optTag.Selected = true;
						break;
					}
				}
				//captute screen shot
				//TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ipv4FilterTable']");
				TableTag table_2GHz = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'WirelessFrequency24GHz']/table");
				Report.Screenshot("Wireless_2.4GHz",table_2GHz.Element,false);
			}else{
				Report.Info("DFS channel value is >= 52");
				//call another module deal with this
			}
		}

	}
}