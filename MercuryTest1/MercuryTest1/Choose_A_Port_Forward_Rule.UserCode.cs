///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Choose_A_Port_Forward_Rule
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Delete_A_Port_Fwd_Rule(string argument1, string argument2, string argument3, string argument4, string argument5)
        {
        	//Report.Info( "--------Inside Delete_A_Port_Fwd_Rule-------");
        	//Report.Info( argument1 + "=="+argument2+ "=="+argument3+ "=="+argument4+ "=="+argument5);
        	string localIP="",localStartPort="",localEndPort="",externalStartPort="",externalEndPort="";
        	Delay.Seconds(20);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            //TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']"); 
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']");  //As per R3.5 (9.1.116J)
            //walkthrough the column values
			IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
			int colsCount = cols.Count;
			Report.Info("Total colsCount",colsCount.ToString());
			int j=1;
			bool isRuleExist=false;
			String portFwdRule ="";
			foreach(TdTag col in cols)  
	    	{
				//Report.Info(col.InnerText);
				if(j==1){
					//Ip Address
					localIP = col.InnerText;
				}else if(j==2){
					//Local start port
					localStartPort = col.InnerText;
				}else if(j==3){
					//Local end port
					localEndPort = col.InnerText;
				}else if(j==4){
					//External start port
					externalStartPort = col.InnerText;
				}else if(j==5){
					//External end port
					externalEndPort = col.InnerText;
				}
				
				if (j ==8){
					//perfrom validation
					if((localIP==argument1) && (localStartPort== argument2)&& (localEndPort == argument3)&& (externalStartPort == argument4)&& (externalEndPort ==argument5) ){

						Delay.Seconds(5);
						//click the delete checkbox
						WebElement webElement = col.Element;
						webElement.Click();
	        			//Report.Info("Clicked");
	        			portFwdRule = "localIP :: "+ localIP + "||"+"localStartPort :: "+localStartPort+"||"+"localEndPort :: "+localEndPort+ "||"+"externalStartPort :: "+externalStartPort + "||"+"externalEndPort :: "+externalEndPort;
						Report.Log(ReportLevel.Success,"portFwdRule",portFwdRule);
						//Report.Info("<---This port forwarding rule is deleted from the list--->");
						Report.Log(ReportLevel.Success,"portFwdRule","This port forwarding rule is deleted from the list");
						Report.Screenshot("",webElement,true);
	        			isRuleExist = true;
	        			break;
					}
					j=0;
				}
				j++;
			}	//end of foreach
			if(!isRuleExist){
				portFwdRule = "localIP :: "+ argument1 + "||"+"localStartPort :: "+argument2+"||"+"localEndPort :: "+argument3+ "||"+"externalStartPort :: "+argument4 + "||"+"externalEndPort :: "+argument5;
				Report.Log(ReportLevel.Failure,"portFwdRule",portFwdRule);
				Report.Log(ReportLevel.Failure,"portFwdRule","This port forwarding rule does not exist");
			}
        }

        public void Delete_Any_Port_Forward_Rule(string argument1, string argument2, string argument3, string argument4, string argument5)
        {
        	//Delete any fort forwarding rules, implemented based on R3.5(9.1.116J)
        	//argument1- LocalIP,argument2-Localstart,argument3-Localend,argument4-Externalstart,argument5-ExternalEnd
        	string localIP="",localPortRange="",local_Start_End_Port_Range="",externalPortRange="",external_Start_End_Port_Range ="";
            Delay.Seconds(15);
            WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']"); 
//            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']");  //As per R3.5 (9.1.116J)
            
            //Count the total no of port forwarding rules (rows)
	     	IList<TrTag> totalRules = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalRules.Count;
	     	//Report.Info("Total Rules",rulesCount.ToString());
	     	string totalPortRules = "Total Rules : "+rulesCount.ToString();
	     	if(rulesCount>1){
	     		Report.Info("Port Forwarding ",totalPortRules);
	     	}
	     	
	     	if(rulesCount > 0){
	     		//Report.Info("Total Rules",totalPortRules);
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				bool isRuleExist=false;
				String portFwdRule ="";
				int j=1,colsCount = cols.Count;
				//Report.Info("Total colsCount",colsCount.ToString());

				foreach(TdTag col in cols)  
		    	{
					//Report.Info(col.InnerText);
					
					//check if there any rows
					if(j == 1 && col.InnerText.StartsWith("No forwarding rule!")){
						//Report.Failure("PortForwardingRule","There are no active port forwarding rules to delete !!");
						TestSuite.Current.GetTestCase("Delete_Any_Port_Forward_Rule").Checked = false;
						isRuleExist=false;
						//return;
						break;
					}						
					if(j==1){	//Ip Address
						localIP = col.InnerText;
						j++;
					}else if(j==2){		//Local Port range
						//Local start & end port
						//localStartPort = col.InnerText;
						localPortRange=col.InnerText;
						local_Start_End_Port_Range = argument2+"-"+argument3;
						j++;
					}else if(j==3){	//External start & end port
						//externalStartPort = col.InnerText;
						externalPortRange=col.InnerText;
						external_Start_End_Port_Range = argument4+"-"+argument5;
						j++;
					}else if(j==4){	//protocol
						j++;
					}else if(j==5){		//enable or disable ?
						j++;//increment the column
					}else if(j==6){		//delete check box
						if((localIP==argument1) && (localPortRange== local_Start_End_Port_Range)&& (externalPortRange == external_Start_End_Port_Range) )
						{	
							IList<InputTag> inputVals = col.Find<InputTag>("./input");
							//Report.Info("input count :  "+inputVals.Count);
							foreach(InputTag inputVal in inputVals){
								Ranorex.InputTag testTag = inputVal;
								Report.Info(inputVal.GetPath().ToString());
								if(testTag.Checked.ToString() == "True"){
									Report.Info(" portForwarding rule is already selected for deletion ");
									//inputVal.Checked="False";
									Delay.Seconds(5);
									//Report.Log(ReportLevel.Success,"This port forwarding rule is deleted now...");
									Report.Screenshot("PortForwardingRule",col.Element,true);
								}else{
									Report.Info(" portForwarding rule is currently not selected ");
									Delay.Seconds(5);
									inputVal.Checked="True";	//check the port forwarding delete box
									/*
									//below 3 lines added on 18-10-17
									Report.Info("3 lines begining");
									Ranorex.InputTag PortFwdTableDeleteTag = "/dom[@caption='Hub 3.0' and @page='' and @path='/' and @browsername='IE' and @pageurl='http://192.168.0.1/?portforwarding&mid=PortForwarding']//input[#'portForwardingTable-Delete-7'] ";
									PortFwdTableDeleteTag.Click();
									PortFwdTableDeleteTag.PerformClick();
									*/
									Report.Screenshot();
									Delay.Seconds(5);
									Report.Log(ReportLevel.Success,"This port forwarding rule is selected for deletion !!!");
								//	Report.Screenshot("PortForwardingRule",col.Element,true);
								}
								
							}//end of for-loop : InputTag
							isRuleExist = true;
		        			break;
							
						}//end of if-else : 						
						j=1;
					}
	     		 
	     		}//end of for-loop :TdTag
				if(!isRuleExist){
					if(colsCount == 1){
						Report.Failure("Port Forwarding ","There are no active Port Forwarding rules to Delete !!");
			     		//TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes_Disable_All").Checked = false;
			     		TestSuite.Current.GetTestCase("Delete_Any_Port_Forward_Rule").Checked = false;
			     		return;						
					}else{
						portFwdRule = "localIP :: "+ argument1 + "||"+"localStartPort :: "+argument2+"||"+"localEndPort :: "+argument3+ "||"+"externalStartPort :: "+argument4 + "||"+"externalEndPort :: "+argument5;
						Report.Log(ReportLevel.Failure,"portFwdRule",portFwdRule);
						Report.Log(ReportLevel.Failure,"portFwdRule","This port forwarding rule does not exist");
					}
				}					
	     	}else{
				Report.Failure("Port Forwarding ","There are no active Port Forwarding rules to Delete !!");
	     		//TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes_Disable_All").Checked = false;
	     		TestSuite.Current.GetTestCase("Delete_Any_Port_Forward_Rule").Checked = false;
	     		return;
	     	}        	
        }

    }
}