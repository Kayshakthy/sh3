///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Validate_Network_Log_Date_Time
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_Network_Logs_Date_Time()
        {
        	Delay.Seconds(30);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
        	webDocument.WaitForDocumentLoaded();
        	TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ConnectionTable']"); 
        	
	     	//display the content of the table - ConnectionTable//
	     	Report.Screenshot();
			//identify the heading columns
	     	IList<ThTag> headCols = myTable.Find<ThTag>("./thead//th");
	     	int headColsCount = headCols.Count;
			//Report.Info("HeadColsCount",headColsCount.ToString());
			string deviceHeadInfo=" ";
			int i=1;
			foreach(ThTag col in headCols)  
	    	{  
				//Report.Info("i:",i.ToString());
	        	//Report.Info(col.InnerText); 
	        	if(i < headColsCount && i >1){
	        		deviceHeadInfo = deviceHeadInfo + col.InnerText +"||||";
	        	}else if(i == headColsCount){
	        		deviceHeadInfo = deviceHeadInfo + col.InnerText;
	        	}
	        	i++;
			}
	    	Report.Info(deviceHeadInfo);
	    	
	    	//Count the total number of rows 
			IList<TrTag> totalConfig = myTable.Find<TrTag>("./tbody//tr");
	     	int rowsCount = totalConfig.Count;   
	     	string totalRowsCnt = "Total Network Logs(Rows) : "+rowsCount.ToString();
	     	Report.Info("Network Logs ",totalRowsCnt);   
	     	bool isUKDate=true;
	     	//walkthrough all the columns
	    	foreach ( TrTag row in myTable.Find ("./ tbody /tr"))
			{
		     	string rowInfo = "";
		     	string dateTime = "";
				TdTag rowNameCell = row. FindSingle ("./ td [2] ");
				dateTime = rowNameCell . PreviousSibling . InnerText;
				rowInfo += " Date And Time : " + rowNameCell . PreviousSibling . InnerText + ", ";
				rowInfo += " Error Number : " + rowNameCell . InnerText + ", ";
				rowInfo += " Event Description : " + rowNameCell . NextSibling . InnerText + " ";
				// Get all cells from the row
					/* rowInfo += " All Cells : ";  */
				foreach ( TdTag cell in row . Find ("./ td"))
				{
						/* rowInfo += cell . InnerText + ", "; */
					// Move the mouse to each cell element
					cell . MoveTo ();
					// Set css style
					cell . SetStyle (" background - color "," #33 ff00 ");
				}
				
				Report . Info ( rowInfo );	
				//Report . Info ("dateTime:", dateTime);
				int start=0,at=0;
				at = dateTime.IndexOf('-', start);
				if(at > 2){//Year first
					//Report . Info ("at:",at.ToString());
					isUKDate = false;
					//Report . Info (" Date is in US format");
					break;
					
				}else if(at==2){//Date First
					//Report . Info ("at:",at.ToString());
					Report . Info (" Date is in UK format");

				}
				
	     	}	//end of for-loop
	    	if(!isUKDate){
	    		Report.Failure(" Network logs Date is in US format");
	    	}else{
	    		Report.Success(" Date is in UK format");
	    	}
	    	Report.Screenshot();
        }

    }
}