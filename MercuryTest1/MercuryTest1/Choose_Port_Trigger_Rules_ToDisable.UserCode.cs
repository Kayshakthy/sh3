///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Choose_Port_Trigger_Rules_ToDisable
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Disable_Any_Port_Trigger_Rule(string argument1, string argument2, string argument3, string argument4)
        {
        	//Implemented based on R2.4.2 (9.1.88S)
			//identify the rules to disable
        	//Report.Info( "--------Inside Disable_Any_Port_Trigger_Rule -------");
			//string triggerRangeStartPort="",triggerRangeEndPort="",targetRangeStartPort="",targetRangeEndPort="";
			Delay.Seconds(20);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
        	webDocument.WaitForDocumentLoaded();
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']"); 
            
            //count the rows
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            bool isRuleExist=false;
            //Report.Info("Total rowsCnt",rowsCnt.ToString());
            Report.Info("Total Rules",rowsCnt.ToString());

            Report.Info("Trigger range start port : ",argument1);
            Report.Info("Trigger range end port : ",argument2);
            Report.Info("Target range start port : ",argument3);
            Report.Info("Target range end port : ",argument4);
            //Report.Info("TProtocol : ",argument5);
            //Report.Info("Enable/Disable : ",argument6);            
            if(rowsCnt > 0){	//if there are any rules exist ?
				int rowNum = 1;  
				//int c=0;
				//int enableCheck = 0;
				
				foreach (var row in rows)  
				{  
	           					var cells = row.FindDescendants<TdTag>(); 
						        int colNum=1;
						        string triggerStart="" , triggerEnd="", targetStart="", targetEnd="";
						        //Report.Info("cells count",cells.Count.ToString());//count columns in a row
						        //Report.Info("Cell[0]: " + cells[c].InnerText);
						        foreach (var cell in cells)  
						        {  
						           	//Report.Info("Cell: " + cell.InnerText);  
   									if(cells.Count ==1 && cell.InnerText.StartsWith("No triggering rule")){
							           		Report.Failure("There are no active PortTriggerRule to disable !!!");
            								Report.Screenshot("PortTriggerRule",myTable.Element,true);
            								TestSuite.Current.GetTestCase("Apply_Port_Triggering_Changes").Checked = false;
            								break;
						           	}else{
								            if(colNum==1){
								            	//triggerRangeStartPort
								            	triggerStart = cell.InnerText;
								            }else if(colNum==2){
								            	//triggerRangeEndPort
								            	triggerEnd= cell.InnerText; 
								            }else if(colNum==3){
								            	//targetRangeStartPort
								            	targetStart = cell.InnerText; 
								            }else if(colNum==4){
								            	//targetRangeEndPort
								            	targetEnd = cell.InnerText;
								           }else if(colNum==5){
								           		//enabled of disabled?
								           }
								            colNum++;
								            //cell.click();
						        	}
						        }//end of for-loop column
						        if(triggerStart == argument1 && triggerEnd == argument2 && targetStart == argument3 && targetEnd == argument4 ){
						        	//Report.Info(cells[5].GetInnerHtml().ToString());
						        	
						        	//cells[5].Click();
						        	//Delay.Seconds(2);
						        	
						        	//String newPath = "";
						        	//newPath ="/dom[@domain='192.168.0.1']//input[#'portTriggeringTable-Enabled-"+enableCheck+"']";
						        	//Report.Info("Cells path : " , cells[5].GetPath().ToString());
						        	
						        	//newPath = cells[5].GetPath() + "/input[#'portTriggeringTable-Enabled-"+enableCheck+"']";
						        	//Report.Info("newPath : " , newPath);
						        	//Ranorex.InputTag portTriggringTableEnabledTag = Host.Local.FindSingle<Ranorex.InputTag>(newPath);
						        	//Ranorex.InputTag portTriggringTableEnabledTag = Host.Local.FindSingle<Ranorex.InputTag>(cells[5].GetPath().ToString());
						        	
						        	//Ranorex.InputTag portTriggringTableEnabledTag = newPath;
						        	
						        	//Report.Info(portTriggringTableEnabledTag.Name.ToString());
						        	//Report.Info(portTriggringTableEnabledTag.Id.ToString());
						        	
						        	
						        	IList<InputTag> inputVals = cells[5].Find<InputTag>("./input");
			        				//Report.Info("input count :  "+inputVals.Count);
			        		 		foreach(InputTag inputVal in inputVals){
			        					Ranorex.InputTag testTag = inputVal;
			        					//Report.Info(inputVal.GetPath().ToString());
			        					if(testTag.Checked.ToString() == "True"){
			        						Report.Info(" portTriggeringTableEnabledTag is currently enabled ");
			        						//inputVal.DoubleClick();
			        						inputVal.Checked="False";
			        						Delay.Seconds(5);
			        						Report.Log(ReportLevel.Success,"This port triggering rule is disabled");
					        				Report.Screenshot("PortTriggerRule",row.Element,true);
			        					}else{
			        						Report.Info(" portTriggeringTableEnabledTag is currently disabled ");
			        						inputVal.PerformClick();
			        						Delay.Seconds(5);
			        						Report.Log(ReportLevel.Success,"This port triggering rule is disabled");
					        				Report.Screenshot("PortTriggerRule",row.Element,true);			        						
			        					}
			        					
			        				}	//end of for loop: InputTag
			        				
			        				/*
									if(portTriggringTableEnabledTag.Checked.ToString() == "True"){
										// portTriggeringTableEnabledTag is already Enabled
										Report.Info("-----------------portTriggeringTableEnabledTag  is checked---");
										//Delay.Seconds(1);
										//portTriggringTableEnabledTag.Checked = " ";	//uncheck the checkbox to disable
										//portTriggringTableEnabledTag.Checked ="False";
										
										portTriggringTableEnabledTag.Focus();
										portTriggringTableEnabledTag.DoubleClick();
										//cells[5].Click();
										//Delay.Seconds(1);
										//Report.Info(portTriggringTableEnabledTag.GetInnerHtml().ToString());
									}else{
						        		Report.Info("-----------------portTriggeringTableEnabledTag  is unchecked---");
										//portTriggeringTableEnabledTag is already disabled
										Report.Info(" portTriggeringTableEnabledTag is already disabled ");
										//portTriggringTableEnabledTag.Focus();
										//portTriggringTableEnabledTag.Checked ="checked";
										//portTriggringTableEnabledTag.Checked="true";
										//Report.Info(portTriggringTableEnabledTag.HasFocus.ToString());
										//Report.Info(portTriggringTableEnabledTag.Element.GetInnerHtml().ToString());
										//portTriggringTableEnabledTag.Click();
										//portTriggringTableEnabledTag.PerformClick();
										
										//Ranorex.CheckBox testCheckBox = cells[5].GetPath() + "/input[#'fmChbx-portTriggeringTable-Enabled-"+enableCheck+"']";
										//Ranorex.CheckBox testCheckBox = "/dom[@domain='192.168.0.1']//b[#'fmChbx-portTriggeringTable-Enabled-"+enableCheck+"']";
										//testCheckBox.Focus();
										//Report.Info(testCheckBox.CheckState.ToString());
										//testCheckBox.Click();
									}
									*/
									isRuleExist = true;
									//Report.Info(cells[5].GetInnerHtml().ToString());					        	
						        	Report.Success("PortTriggerRule","This port triggering rule is disabled from the list");
						        	Report.Screenshot("PortTriggerRule",row.Element,true);
						        	break;
						        }else{
						        	isRuleExist=false;
						        }
						        rowNum++;
						        //enableCheck++;
				}  //end of for-loop ROWS
            }else{
            	Report.Failure("There are no active port triggering rules to disable !!!");
            	Report.Screenshot("PortTriggerRule",myTable.Element,true);
            }
            if(!isRuleExist){
            	Report.Failure("The given Port Triggering Rule does not exist in the PortTrigger Table");
            	//TestSuite.Current.GetTestCase("Apply_Disable_Any_Port_Trigger_Rule").Checked=false;
            }
			/**
            //walkthrough the column values//
			IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
			int colsCount = cols.Count;
			Report.Info("Total colsCount",colsCount.ToString());
			int j=1;
			bool isRuleExist=false;
			String portTriggerRule ="";
			foreach(TdTag col in cols)  
	    	{
				//Report.Info(col.InnerText);
				if(j==1 && (!(col.InnerText.Equals("No triggering rule!")))){	//if there are port trigger rules
					//triggerRangeStartPort
					triggerRangeStartPort = col.InnerText;
				}else if(j==2){
					//triggerRangeEndPort
					triggerRangeEndPort = col.InnerText;
				}else if(j==3){
					//targetRangeStartPort
					targetRangeStartPort = col.InnerText;
				}else if(j==4){
					//targetRangeEndPort
					targetRangeEndPort = col.InnerText;
				}
				
				if (j ==7){
					//perfrom validation
					if((triggerRangeStartPort==argument1) && (triggerRangeEndPort== argument2)&& (targetRangeStartPort == argument3)&& (targetRangeEndPort == argument4) ){

						//Delay.Seconds(5);
						//click the delete checkbox
						WebElement webElement = col.Element;
						webElement.Click();
						Delay.Seconds(3);
	        			//Report.Info("Clicked");
	        			//portTriggerRule = "triggerRangeStartPort :: "+ triggerRangeStartPort + "||"+"triggerRangeEndPort :: "+triggerRangeEndPort+"||"+"targetRangeStartPort :: "+targetRangeStartPort+ "||"+"targetRangeEndPort :: "+targetRangeEndPort;
						portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
	        			Report.Log(ReportLevel.Success,"PortTriggerRule",portTriggerRule);
						//Report.Info("<---This port forwarding rule is deleted from the list--->");
						Report.Log(ReportLevel.Success,"PortTriggerRule","This port triggering rule is deleted from the list");
						//Report.Snapshot(myTable);
						//Report.Snapshot("PortTriggerRule",myTable);
						//Report.Screenshot("PortTriggerRule",myTable,true);
						//Report.Screenshot("PortTriggerRule",webElement,true);
						
						int rowNum = 1;  
					    foreach (var row in rows)  
					    {  
           					var cells = row.FindDescendants<TdTag>(); 
					        int colNum=1;
					        string triggerStart="" , triggerEnd="", targetStart="", targetEnd="";
					        foreach (var cell in cells)  
					        {  
					           // Report.Info("Cell: " + cell.InnerText);  
					            if(colNum==1){
					            	//triggerRangeStartPort
					            	triggerStart = cell.InnerText;
					            }else if(colNum==2){
					            	//triggerRangeEndPort
					            	triggerEnd= cell.InnerText; 
					            }else if(colNum==3){
					            	//targetRangeStartPort
					            	targetStart = cell.InnerText; 
					            }else if(colNum==4){
					            	//targetRangeEndPort
					            	targetEnd = cell.InnerText;
					            }
					            colNum++;
					        }
					        if(triggerStart == triggerRangeStartPort && triggerEnd == triggerRangeEndPort && targetStart == targetRangeStartPort && targetEnd == targetRangeEndPort ){
					        	Report.Screenshot("PortTriggerRule",row.Element,true);
					        	break;
					        }
					        rowNum++;                 
					    } 
		    
	        			isRuleExist = true;
	        			break;
					}
					j=0;
				}
				j++;
			}	//end of foreach
			if(!isRuleExist){
				portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
				Report.Log(ReportLevel.Failure,"PortTriggerRule",portTriggerRule);
				Report.Log(ReportLevel.Failure,"PortTriggerRule","This port triggering rule does not exist");
			}   
     	**/
        }
        public void Disable_Any_Port_Triggering_Rule(string argument1, string argument2, string argument3, string argument4){
        	//Implemented based on R3.5 (9.1.116J),R3.7 (9.1.116S) and later version
        	Report.Info( "//--------Inside Disable_Any_Port_Triggering_Rule -------//");
			string triggerRangeStartPort="",triggerRangeEndPort="",targetRangeStartPort="",targetRangeEndPort="";
			string triggerRangePort="",targetRangePort="";
			Delay.Seconds(45);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']"); 
            
            //count the rows
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            //Report.Info("Total rowsCnt",rowsCnt.ToString());
            Report.Info("Total Rules",rowsCnt.ToString());
			if(rowsCnt == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Port Triggering ","There are no active port triggering rules to disable !!");
	     		//TestSuite.Current.GetTestCase("Delete_All_Port_Trigger_Rules").Checked = false;
	     		return;
	     	}else{
	            //walkthrough the column values
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				Report.Info("Total colsCount",colsCount.ToString());
				int j=1;
				bool isRuleExist=false;
				String portTriggerRule ="";
				int index=0,strLen=0;
				foreach(TdTag col in cols)  
		    	{
					//Report.Info("J value ",j.ToString());
					if(j==1 && (!(col.InnerText.Equals("No triggering rule!")))){	//if there are port trigger rules
						triggerRangePort= col.InnerText;
						//Report.Info("TriRangePort",triggerRangePort.ToString());
						index = triggerRangePort.IndexOf("-");
						//Report.Info("TriRangePort-index",index.ToString());
						triggerRangeStartPort = triggerRangePort.Substring(0,index);
						//Report.Info("TriRangeStartPort",triggerRangeStartPort.ToString());
						strLen = triggerRangePort.Length;
						//Report.Info("TriRangePort-strLen",strLen.ToString());
						triggerRangeEndPort= triggerRangePort.Substring(index+1);
						//Report.Info("TriRangeEndPort",triggerRangeEndPort.ToString());
						//j++;
					}else if(j==2){
						targetRangePort = col.InnerText;
						//Report.Info("TarRangePort",targetRangePort.ToString());
						index = targetRangePort.IndexOf("-");
						//Report.Info("tarRangePort-index",index.ToString());
						targetRangeStartPort = targetRangePort.Substring(0,index);
						//Report.Info("tarRangeStartPort",targetRangeStartPort.ToString());
						targetRangeEndPort = targetRangePort.Substring(index+1);
						//Report.Info("tarRangeEndPort",targetRangeEndPort.ToString());
						//j++;
					}else if(j==3){
						//j++;	//protocol
					}else if(j==4){
						if((triggerRangeStartPort==argument1) && (triggerRangeEndPort== argument2)&& (targetRangeStartPort == argument3)&& (targetRangeEndPort == argument4) ){
							portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
							Report.Log(ReportLevel.Success,"PortTrigger",portTriggerRule);
							Report.Log(ReportLevel.Success,"PortTrigger","This port triggering rule will be disabled from the list");
							
							IList<InputTag> inputVals = col.Find<InputTag>("./input");
							//Report.Info("input count :  "+inputVals.Count);
							foreach(InputTag inputVal in inputVals){
								Ranorex.InputTag testTag = inputVal;
								//Report.Info(inputVal.GetPath().ToString());
								if(testTag.Checked.ToString() == "True"){
									Report.Info(" portTriggeringTableEnabledTag is currently enabled ");
									//inputVal.DoubleClick();
									inputVal.Checked="False";
									Delay.Seconds(5);
									Report.Log(ReportLevel.Success,"This port triggering rule is disabled");
									Report.Screenshot("PortTrigger",col.Element,true);
								}else{
									Report.Info(" portTriggeringTableEnabledTag is already disabled ");
									//inputVal.PerformClick();
									//Delay.Seconds(5);
									//Report.Log(ReportLevel.Success,"This port triggering rule is disabled");
									Report.Screenshot("PortTrigger",col.Element,true);
								}
			        		}	//end of for loop: InputTag
							isRuleExist = true;
							break;
						}else{
							isRuleExist = false;
						}//end of port comparision IF-ELSE
						//j=0;
					}else if(j==5){
						//j++;	//delete
						j=0;
					}
					j++;
				}//end of for-loop : TdTag
				
				if(!isRuleExist){
	            	portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
	            	Report.Log(ReportLevel.Failure,"PortTrigger",portTriggerRule);
	            	Report.Log(ReportLevel.Failure,"PortTrigger","This port triggering rule does not exist");
				}
            }//end of if-else
			            
        }//end of method
        public void Disable_Any_Port_Triggering_Rule1(string argument1, string argument2, string argument3, string argument4)
        {
        	//identify the rules to delete
        	Report.Info( "//--------Inside Disable_Any_Port_Triggering_Rule1 -------//");
			string triggerRangeStartPort="",triggerRangeEndPort="",targetRangeStartPort="",targetRangeEndPort="";
			string triggerRangePort="",targetRangePort="";
			Delay.Seconds(45);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']"); 
            
            //count the rows
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            //Report.Info("Total rowsCnt",rowsCnt.ToString());
            Report.Info("Total Rules",rowsCnt.ToString());
			if(rowsCnt == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Port Triggering ","There are no active port triggering rules to disable !!");
	     		//TestSuite.Current.GetTestCase("Delete_All_Port_Trigger_Rules").Checked = false;
	     		return;
	     	}else{
	            //walkthrough the column values
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				Report.Info("Total colsCount",colsCount.ToString());
				int j=1;
				bool isRuleExist=false;
				String portTriggerRule ="";
				int index=0,strLen=0;
				foreach(TdTag col in cols)  
		    	{
					if(j==1 && (!(col.InnerText.Equals("No triggering rule!")))){	//if there are port trigger rules
						triggerRangePort= col.InnerText;
						Report.Info(triggerRangePort.ToString());
						index = triggerRangePort.IndexOf("-");
						Report.Info(index.ToString());
						triggerRangeStartPort = triggerRangePort.Substring(0,index);
						Report.Info(triggerRangeStartPort.ToString());
						strLen = triggerRangePort.Length;
						Report.Info(strLen.ToString());
						triggerRangeEndPort= triggerRangePort.Substring(index+1);
						Report.Info(triggerRangeEndPort.ToString());
						
					}else if(j==2){
						targetRangePort = col.InnerText;
						Report.Info(targetRangePort.ToString());
						index = targetRangePort.IndexOf("-");
						Report.Info(index.ToString());
						targetRangeStartPort = targetRangePort.Substring(0,index);
						Report.Info(targetRangeStartPort.ToString());
						targetRangeEndPort = targetRangePort.Substring(index+1);
						Report.Info(targetRangeEndPort.ToString());
						
					}else if(j==4){
						// j==3 -> prototocol  	//j==4 -> Enable or Disable		//j==5 --> Delete
						//perfrom validation
						if((triggerRangeStartPort==argument1) && (triggerRangeEndPort== argument2)&& (targetRangeStartPort == argument3)&& (targetRangeEndPort == argument4) ){
							//Delay.Seconds(5);
							//click the delete checkbox
							WebElement webElement = col.Element;
							webElement.Click();
							Delay.Seconds(3);
							//Report.Info("Clicked");
							//portTriggerRule = "triggerRangeStartPort :: "+ triggerRangeStartPort + "||"+"triggerRangeEndPort :: "+triggerRangeEndPort+"||"+"targetRangeStartPort :: "+targetRangeStartPort+ "||"+"targetRangeEndPort :: "+targetRangeEndPort;
							portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
							Report.Log(ReportLevel.Success,"PortTriggerRule",portTriggerRule);
							//Report.Info("<---This port forwarding rule is deleted from the list--->");
							Report.Log(ReportLevel.Success,"PortTriggerRule","This port triggering rule is disabled from the list");
							
							int rowNum = 1;
							foreach (var row in rows)
							{
								var cells = row.FindDescendants<TdTag>();
								int colNum=1;
								string triggerStart="" , triggerEnd="", targetStart="", targetEnd="";
								int index1=0;
								foreach (var cell in cells)
								{
									// Report.Info("Cell: " + cell.InnerText);
									if(colNum==1){
										//triggerRangeStartPort
										//triggerRangeEndPort
										triggerRangePort = cell.InnerText;
										index1 = triggerRangePort.IndexOf("-");
										triggerStart = targetRangePort.Substring(0,index1);
										triggerEnd= triggerRangePort.Substring(index1+1);
									}else if(colNum==2){
										//targetRangeStartPort
										//targetRangeEndPort
										targetRangePort = col.InnerText;
										index1 = targetRangePort.IndexOf("-");
										targetStart = targetRangePort.Substring(0,index1);								
										targetEnd = targetRangePort.Substring(index1+1);									
									}
									colNum++;
								}
								if(triggerStart == triggerRangeStartPort && triggerEnd == triggerRangeEndPort && targetStart == targetRangeStartPort && targetEnd == targetRangeEndPort ){
									Report.Screenshot("PortTriggerRule",row.Element,true);
									break;
								}
								rowNum++;
							}
							
							isRuleExist = true;
							break;
						} //end of if
						j=0;						
					}
					j++;
	            }//end of for-loop : TdTag
				if(!isRuleExist){
					portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
					Report.Log(ReportLevel.Failure,"PortTriggerRule",portTriggerRule);
					Report.Log(ReportLevel.Failure,"PortTriggerRule","This port triggering rule does not exist");
				}				
            }        	
        }//end of method-Disable_Any_Port_Triggering_Rule1()

    }
}