///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Configure_DHCP_IP_Range recording.
    /// </summary>
    [TestModule("6ed38b50-7ed0-4933-875b-c99882936ce1", ModuleType.Recording, 1)]
    public partial class Configure_DHCP_IP_Range : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Configure_DHCP_IP_Range instance = new Configure_DHCP_IP_Range();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Configure_DHCP_IP_Range()
        {
            IPv4_Source_Single3 = "1";
            IPv4_Source_Single2 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Configure_DHCP_IP_Range Instance
        {
            get { return instance; }
        }

#region Variables

        string _IPv4_Source_Single3;

        /// <summary>
        /// Gets or sets the value of variable IPv4_Source_Single3.
        /// </summary>
        [TestVariable("d4953c0d-72a2-44f0-85a1-90c6c5442054")]
        public string IPv4_Source_Single3
        {
            get { return _IPv4_Source_Single3; }
            set { _IPv4_Source_Single3 = value; }
        }

        string _IPv4_Source_Single2;

        /// <summary>
        /// Gets or sets the value of variable IPv4_Source_Single2.
        /// </summary>
        [TestVariable("16a87faf-b3a8-4b2e-a8b0-0176d16809b1")]
        public string IPv4_Source_Single2
        {
            get { return _IPv4_Source_Single2; }
            set { _IPv4_Source_Single2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='StartIPAddress_2') on item 'WebDocumentIE.StartIPAddress2'.", repo.WebDocumentIE.StartIPAddress2Info, new RecordItemIndex(0));
            //Validate.Attribute(repo.WebDocumentIE.StartIPAddress2Info, "Id", "StartIPAddress_2");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagName='input') on item 'WebDocumentIE.StartIPAddress2'.", repo.WebDocumentIE.StartIPAddress2Info, new RecordItemIndex(1));
            //Validate.Attribute(repo.WebDocumentIE.StartIPAddress2Info, "TagName", "input");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='0') on item 'WebDocumentIE.StartIPAddress2'.", repo.WebDocumentIE.StartIPAddress2Info, new RecordItemIndex(2));
            //Validate.Attribute(repo.WebDocumentIE.StartIPAddress2Info, "TagValue", "0");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='0') on item 'WebDocumentIE.StartIPAddress2'.", repo.WebDocumentIE.StartIPAddress2Info, new RecordItemIndex(3));
            //Validate.Attribute(repo.WebDocumentIE.StartIPAddress2Info, "Value", "0");
            //Delay.Milliseconds(100);
            
            repo.WebDocumentIE.StartIPAddress2.Click("20;17");
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocumentIE.StartIPAddress2);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocumentIE.StartIPAddress2.PressKeys("{Delete}");
            Delay.Milliseconds(0);
            
            repo.WebDocumentIE.StartIPAddress2.PressKeys(IPv4_Source_Single2);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.StartIPAddress3.Click("29;10");
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.StartIPAddress3);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.StartIPAddress3.PressKeys("{Delete}");
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.StartIPAddress3.PressKeys(IPv4_Source_Single3);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.DHCPv4.Click("84;25");
            Delay.Milliseconds(200);
            
            //repo.WebDocumentIE.StartIPAddress2.Click("18;13");
            //Delay.Milliseconds(200);
            
            //Keyboard.PrepareFocus(repo.WebDocumentIE.StartIPAddress2);
            //Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            //Delay.Milliseconds(0);
            
            //repo.WebDocumentIE.StartIPAddress2.PressKeys("1");
            //Delay.Milliseconds(0);
            
            //repo.WebDocument19216801.StartIPAddress3.Click("10;13");
            //Delay.Milliseconds(200);
            
            //Keyboard.PrepareFocus(repo.WebDocument19216801.StartIPAddress3);
            //Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            //Delay.Milliseconds(0);
            
            //repo.WebDocument19216801.StartIPAddress3.PressKeys("{Delete}");
            //Delay.Milliseconds(0);
            
            //repo.WebDocument19216801.StartIPAddress3.PressKeys("1000");
            //Delay.Milliseconds(0);
            
            //repo.WebDocument19216801.DHCPv4.MoveTo("71;21");
            //Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.DHCPv4.MoveTo("71;21");
            //Mouse.ButtonUp(System.Windows.Forms.MouseButtons.Left);
            //Delay.Milliseconds(200);
            
            Validate.Attribute(repo.WebDocument19216801.ErrCloseStartIPAddressInfo, "Class", "errTipClose");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.ErrCloseStartIPAddressInfo, "Id", "errClose-StartIPAddress");
            Delay.Milliseconds(100);
            
            Validate.ContainsImage(repo.WebDocument19216801.ErrCloseStartIPAddressInfo, ErrCloseStartIPAddress_Screenshot1, ErrCloseStartIPAddress_Screenshot1_Options);
            Delay.Milliseconds(100);
            
            //Validate.Attribute(repo.WebDocument19216801.IPAddressIsInvalidInfo, "InnerText", "IP address is invalid.");
            //Delay.Milliseconds(100);
            
            //Validate.ContainsImage(repo.WebDocument19216801.IPAddressIsInvalidInfo, IPAddressIsInvalid_Screenshot1, IPAddressIsInvalid_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocumentIE.SorryThereWasAnErrorWhileUpdatingInfo, "Class", "confirm-wizard-text");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocumentIE.SorryThereWasAnErrorWhileUpdatingInfo, "InnerText", "Sorry! There was an error while updating your settings. Please try again a bit later.");
            Delay.Milliseconds(100);
            
            Validate.ContainsImage(repo.WebDocumentIE.SorryThereWasAnErrorWhileUpdatingInfo, SorryThereWasAnErrorWhileUpdating_Screenshot2, SorryThereWasAnErrorWhileUpdating_Screenshot2_Options);
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocumentIE.ConfirmWizard1.Http19216801IErrorIconSvgInfo, "Src", "http://192.168.0.1/i/error-icon.svg");
            Delay.Milliseconds(100);
            
            Validate.ContainsImage(repo.WebDocumentIE.ConfirmWizard1.Http19216801IErrorIconSvgInfo, Http19216801IErrorIconSvg_Screenshot2, Http19216801IErrorIconSvg_Screenshot2_Options);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(32));
            
        }

#region Image Feature Data
        CompressedImage ErrCloseStartIPAddress_Screenshot1
        { get { return repo.WebDocument19216801.ErrCloseStartIPAddressInfo.GetScreenshot1(new Rectangle(0, 0, 31, 36)); } }

        Imaging.FindOptions ErrCloseStartIPAddress_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage IPAddressIsInvalid_Screenshot1
        { get { return repo.WebDocument19216801.IPAddressIsInvalidInfo.GetScreenshot1(new Rectangle(0, 0, 125, 26)); } }

        Imaging.FindOptions IPAddressIsInvalid_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage SorryThereWasAnErrorWhileUpdating_Screenshot2
        { get { return repo.WebDocumentIE.SorryThereWasAnErrorWhileUpdatingInfo.GetScreenshot2(new Rectangle(0, 0, 688, 60)); } }

        Imaging.FindOptions SorryThereWasAnErrorWhileUpdating_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage Http19216801IErrorIconSvg_Screenshot2
        { get { return repo.WebDocumentIE.ConfirmWizard1.Http19216801IErrorIconSvgInfo.GetScreenshot2(new Rectangle(0, 0, 37, 37)); } }

        Imaging.FindOptions Http19216801IErrorIconSvg_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
