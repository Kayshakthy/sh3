///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The NavigateToModemMode recording.
    /// </summary>
    [TestModule("5afd3010-dd6c-450d-b4b7-956539404b5c", ModuleType.Recording, 1)]
    public partial class NavigateToModemMode : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static NavigateToModemMode instance = new NavigateToModemMode();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public NavigateToModemMode()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static NavigateToModemMode Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocument1921681001.ModemMode'.", repo.WebDocument1921681001.ModemModeInfo, new RecordItemIndex(0));
            //Validate.Attribute(repo.WebDocument1921681001.ModemModeInfo, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'WebDocument1921681001.ModemMode'.", repo.WebDocument1921681001.ModemModeInfo, new RecordItemIndex(1));
            //Validate.Attribute(repo.WebDocument1921681001.ModemModeInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Modem mode') on item 'WebDocument1921681001.ModemMode'.", repo.WebDocument1921681001.ModemModeInfo, new RecordItemIndex(2));
            //Validate.Attribute(repo.WebDocument1921681001.ModemModeInfo, "InnerText", "Modem mode");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=97,Height=18}) on item 'WebDocument1921681001.ModemMode'.", repo.WebDocument1921681001.ModemModeInfo, new RecordItemIndex(3));
            //Validate.ContainsImage(repo.WebDocument1921681001.ModemModeInfo, ModemMode_Screenshot1, ModemMode_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocument1921681001.ModemMode'.", repo.WebDocument1921681001.ModemModeInfo, new RecordItemIndex(4));
            //Validate.Attribute(repo.WebDocument1921681001.ModemModeInfo, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'WebDocument1921681001.ModemMode'.", repo.WebDocument1921681001.ModemModeInfo, new RecordItemIndex(5));
            //Validate.Attribute(repo.WebDocument1921681001.ModemModeInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Modem mode') on item 'WebDocument1921681001.ModemMode'.", repo.WebDocument1921681001.ModemModeInfo, new RecordItemIndex(6));
            //Validate.Attribute(repo.WebDocument1921681001.ModemModeInfo, "InnerText", "Modem mode");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=97,Height=18}) on item 'WebDocument1921681001.ModemMode'.", repo.WebDocument1921681001.ModemModeInfo, new RecordItemIndex(7));
            //Validate.ContainsImage(repo.WebDocument1921681001.ModemModeInfo, ModemMode_Screenshot1_2, ModemMode_Screenshot1_2_Options);
            //Delay.Milliseconds(100);
            
            repo.WebDocument1921681001.ModemMode.Click("59;9");
            Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocument1921681001.LabelModemMode'.", repo.WebDocument1921681001.LabelModemModeInfo, new RecordItemIndex(9));
            //Validate.Attribute(repo.WebDocument1921681001.LabelModemModeInfo, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'WebDocument1921681001.LabelModemMode'.", repo.WebDocument1921681001.LabelModemModeInfo, new RecordItemIndex(10));
            //Validate.Attribute(repo.WebDocument1921681001.LabelModemModeInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='label_ModemMode') on item 'WebDocument1921681001.LabelModemMode'.", repo.WebDocument1921681001.LabelModemModeInfo, new RecordItemIndex(11));
            //Validate.Attribute(repo.WebDocument1921681001.LabelModemModeInfo, "Id", "label_ModemMode");
            //Delay.Milliseconds(100);
            
            //Validate.Attribute(repo.WebDocument1921681001.LabelModemModeInfo, "InnerText", "Enabled Modem Mode");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=728,Height=66}) on item 'WebDocument1921681001.LabelModemMode'.", repo.WebDocument1921681001.LabelModemModeInfo, new RecordItemIndex(13));
            //Validate.ContainsImage(repo.WebDocument1921681001.LabelModemModeInfo, LabelModemMode_Screenshot1, LabelModemMode_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
        }

#region Image Feature Data
        CompressedImage ModemMode_Screenshot1
        { get { return repo.WebDocument1921681001.ModemModeInfo.GetScreenshot1(new Rectangle(0, 0, 97, 18)); } }

        Imaging.FindOptions ModemMode_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ModemMode_Screenshot1_2
        { get { return repo.WebDocument1921681001.ModemModeInfo.GetScreenshot1(new Rectangle(0, 0, 97, 18)); } }

        Imaging.FindOptions ModemMode_Screenshot1_2_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage LabelModemMode_Screenshot1
        { get { return repo.WebDocument1921681001.LabelModemModeInfo.GetScreenshot1(new Rectangle(0, 0, 728, 66)); } }

        Imaging.FindOptions LabelModemMode_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
