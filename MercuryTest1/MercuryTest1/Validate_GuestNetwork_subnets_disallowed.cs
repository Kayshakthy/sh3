///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Validate_GuestNetwork_subnets_disallowed recording.
    /// </summary>
    [TestModule("2951ae8d-91b2-48a9-853e-556c29f918f3", ModuleType.Recording, 1)]
    public partial class Validate_GuestNetwork_subnets_disallowed : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Validate_GuestNetwork_subnets_disallowed instance = new Validate_GuestNetwork_subnets_disallowed();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Validate_GuestNetwork_subnets_disallowed()
        {
            IPv4_Source_Single2 = "4";
            IPv4_Source_Single3 = "4";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Validate_GuestNetwork_subnets_disallowed Instance
        {
            get { return instance; }
        }

#region Variables

        string _IPv4_Source_Single2;

        /// <summary>
        /// Gets or sets the value of variable IPv4_Source_Single2.
        /// </summary>
        [TestVariable("720b9dd4-5c3e-4210-8f21-f14dda16ce2a")]
        public string IPv4_Source_Single2
        {
            get { return _IPv4_Source_Single2; }
            set { _IPv4_Source_Single2 = value; }
        }

        string _IPv4_Source_Single3;

        /// <summary>
        /// Gets or sets the value of variable IPv4_Source_Single3.
        /// </summary>
        [TestVariable("db785c64-3d1e-44a0-914e-e0e2acedbe0a")]
        public string IPv4_Source_Single3
        {
            get { return _IPv4_Source_Single3; }
            set { _IPv4_Source_Single3 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocumentIE.StartIPAddress2' at 31;16.", repo.WebDocumentIE.StartIPAddress2Info, new RecordItemIndex(0));
            repo.WebDocumentIE.StartIPAddress2.Click("31;16");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'WebDocumentIE.StartIPAddress2'.", repo.WebDocumentIE.StartIPAddress2Info, new RecordItemIndex(1));
            Keyboard.PrepareFocus(repo.WebDocumentIE.StartIPAddress2);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}' with focus on 'WebDocumentIE.StartIPAddress2'.", repo.WebDocumentIE.StartIPAddress2Info, new RecordItemIndex(2));
            repo.WebDocumentIE.StartIPAddress2.PressKeys("{Delete}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$IPv4_Source_Single2' with focus on 'WebDocumentIE.StartIPAddress2'.", repo.WebDocumentIE.StartIPAddress2Info, new RecordItemIndex(3));
            repo.WebDocumentIE.StartIPAddress2.PressKeys(IPv4_Source_Single2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocumentIE.StartIPAddress3' at 17;12.", repo.WebDocumentIE.StartIPAddress3Info, new RecordItemIndex(4));
            repo.WebDocumentIE.StartIPAddress3.Click("17;12");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'WebDocumentIE.StartIPAddress3'.", repo.WebDocumentIE.StartIPAddress3Info, new RecordItemIndex(5));
            Keyboard.PrepareFocus(repo.WebDocumentIE.StartIPAddress3);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}' with focus on 'WebDocumentIE.StartIPAddress3'.", repo.WebDocumentIE.StartIPAddress3Info, new RecordItemIndex(6));
            repo.WebDocumentIE.StartIPAddress3.PressKeys("{Delete}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$IPv4_Source_Single3' with focus on 'WebDocumentIE.StartIPAddress3'.", repo.WebDocumentIE.StartIPAddress3Info, new RecordItemIndex(7));
            repo.WebDocumentIE.StartIPAddress3.PressKeys(IPv4_Source_Single3);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocumentIE.DHCPv4' at 97;19.", repo.WebDocumentIE.DHCPv4Info, new RecordItemIndex(8));
            repo.WebDocumentIE.DHCPv4.Click("97;19");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='IP address is invalid.') on item 'WebDocumentIE.IPAddressIsInvalid'.", repo.WebDocumentIE.IPAddressIsInvalidInfo, new RecordItemIndex(9));
            Validate.Attribute(repo.WebDocumentIE.IPAddressIsInvalidInfo, "InnerText", "IP address is invalid.");
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=125,Height=26}) on item 'WebDocumentIE.IPAddressIsInvalid'.", repo.WebDocumentIE.IPAddressIsInvalidInfo, new RecordItemIndex(10));
            //Validate.ContainsImage(repo.WebDocumentIE.IPAddressIsInvalidInfo, IPAddressIsInvalid_Screenshot1, IPAddressIsInvalid_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Class='errTipClose') on item 'WebDocumentIE.ErrCloseStartIPAddress'.", repo.WebDocumentIE.ErrCloseStartIPAddressInfo, new RecordItemIndex(11));
            Validate.Attribute(repo.WebDocumentIE.ErrCloseStartIPAddressInfo, "Class", "errTipClose");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='errClose-StartIPAddress') on item 'WebDocumentIE.ErrCloseStartIPAddress'.", repo.WebDocumentIE.ErrCloseStartIPAddressInfo, new RecordItemIndex(12));
            Validate.Attribute(repo.WebDocumentIE.ErrCloseStartIPAddressInfo, "Id", "errClose-StartIPAddress");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Class='confirm-wizard-text') on item 'WebDocumentIE.SorryThereWasAnErrorWhileUpdating'.", repo.WebDocumentIE.SorryThereWasAnErrorWhileUpdatingInfo, new RecordItemIndex(13));
            Validate.Attribute(repo.WebDocumentIE.SorryThereWasAnErrorWhileUpdatingInfo, "Class", "confirm-wizard-text");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Sorry! There was an error while updating your settings. Please try again a bit later.') on item 'WebDocumentIE.SorryThereWasAnErrorWhileUpdating'.", repo.WebDocumentIE.SorryThereWasAnErrorWhileUpdatingInfo, new RecordItemIndex(14));
            Validate.Attribute(repo.WebDocumentIE.SorryThereWasAnErrorWhileUpdatingInfo, "InnerText", "Sorry! There was an error while updating your settings. Please try again a bit later.");
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(15));
            
        }

#region Image Feature Data
        CompressedImage IPAddressIsInvalid_Screenshot1
        { get { return repo.WebDocumentIE.IPAddressIsInvalidInfo.GetScreenshot1(new Rectangle(0, 0, 125, 26)); } }

        Imaging.FindOptions IPAddressIsInvalid_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
