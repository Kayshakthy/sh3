///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Rename_Wireless_Device_Recording8
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Choose_Wireless_Device_For_Rename()
        {
        	
        	//		/dom[@domain='192.168.0.1']//table[#'wireless_Device']
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'wireless_Device']"); 
            
            //count the rows
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            //Report.Info("Total rowsCnt",rowsCnt.ToString());
            Report.Info("Total Rows",rowsCnt.ToString());
			if(rowsCnt == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Device Rename ","There are no connected wireless devices to rename !!");
	     		TestSuite.Current.GetTestCase("Verify_Renamed_Wireless_Device_Name").Checked = false;
	     		return;
	     	}else{
            	//Choose_Wireless_Device_For_Rename
	     		if(rowsCnt > 0){
	     		  		Report.Info(" There are " + rowsCnt.ToString() + " devices attached to this router  !!! ");
	     		}
            	int rowNum = 1;  
				foreach (var row in rows)  
			    {  
			        Report.Info("Row: " + rowNum);     
			        Report.Info(row.GetInnerHtml().ToString());
			        IList<TdTag> cols = row.Find<TdTag>("./td");
			        Report.Info(" Total Columns(Devices)  : ",cols.Count.ToString());
			        int colNum = 1;
			        //String radiobuttonPath = "";
			        
			        foreach(TdTag MacCol in cols){
			        	Report.Info("MacCol: " + colNum);
			        	//Report.Info("MacCol Info: "+MacCol.InnerText);
			        	Report.Info(MacCol.GetInnerHtml().ToString());
			        	colNum ++;
			        }
			        rowNum ++;
				}
            }
        }

    }
}