///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class NavigateConnectedDevices
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
            //Console.WriteLine("-------------Inside Connected Devices List--------------");
            
           
           // Report.Screenshot(ReportLevel.Always,"user","Connected Devices List",repo.Form19216801DeviceConnectionmidEqCo.Element295471256,true);
             
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocument19216801.ConnectedDevices' at 41;2.", repo.WebDocument19216801.ConnectedDevicesInfo, new RecordItemIndex(0));
           //   repo.WebDocument19216801.ConnectedDevices.Click("41;2");
            
          // Report.Screenshot(ReportLevel.ReferenceEquals, "User", "Connected Devices List", repo.Form19216801DeviceConnectionmidEqCo.Element295471256, false, new RecordItemIndex(1));//Element295471256
             
            //Report.Screenshot(ReportLevel.Always, "User", "Connected Devices List", repo.Form19216801DeviceConnectionmidEqCo.Element295471256Info,true, new RecordItemIndex(1));//Element295471256Info
           
            
           // Report.Log(ReportLevel.Info,"Info", repo.WebDocument19216801.ConnectedDevices.Name);
           
        }

        public void Validate_ConnectedDevices()
        {        	
        	// Report.Log(ReportLevel.Info," //------------- Connected Devices Details Are ------------------------// ");
           // Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='yourtext') on item 'WebDocument19216801.ConnectedDevices'.", repo.WebDocument19216801.ConnectedDevicesInfo);
          //  Validate.Attribute(repo.WebDocument19216801.ConnectedDevicesInfo, "Text", "yourtext");
         // int count = repo.WebDocument19216801.ConnectedDevices.Tabindex.Length;
          //Console.WriteLine("count",count);
         // Delay.Milliseconds(1000);
          
          //string strCnt = count.ToString;
          //Report.Log(ReportLevel.Info, "Validation",strCnt);
          
                                            
          // Ranorex.Table table = repoItem.As <Ranorex.Table>();
          //int tableRowsCount = table.Rows.Count;
     	// Ranorex.Report.Log (ReportLevel.Success, "Table Rows count:" + tableRowsCount.ToString());
     	//Report.Snapshot(DevicesInformation_Screenshot1);
     	
     	System.DateTime  ExeTime = System.DateTime.Now;
     	Report.Info(string.Format("Devices Connected to this Router @:{0:H:mm:ss}",ExeTime));
     	//Report.Info("//------------------------------------------//");
     	//Report.Info("//------------- Connected Devices Details Are ------------------------//");
     	//Report.Screenshot();
     	
//     	Ranorex.Report.Log (ReportLevel.Success, "Validation","Connected Devices are validated successfully");
     	
    	
     	Ranorex.Report.Info("BEfore duration" + System.DateTime.Now.ToString());
		Duration newDuration = new Duration(240000);

//		repo.WebDocument19216801.DevicesInformationInfo.WaitForExists(newDuration);
		repo.WebDocument19216801.AttachedDevicesTableInfo.WaitForExists(newDuration);

//		Ranorex.Report.Info("After duration" + System.DateTime.Now.ToString());

		Delay.Seconds(40);
//		Ranorex.Report.Info("After seconds" + System.DateTime.Now.ToString());
     	//String browserName = webdocs.BrowserName;
     	
     	WebDocument webDocument = "/dom[@domain='192.168.0.1']";  	//// Identify a web document by its title  
     	
     	/*
     	if(webDocument.BrowserName == "IE")
		{		
     		Report . Info ("It is Internet Explorer Browser");
     	}else if (webDocument.BrowserName == "Firefox") {
     		Report . Info ("It is Firefox Browser");
     	}
     	
     	// Find a link by its link text (innertext)  
		ATag link = webDocument.FindSingle(".//a[@innertext='Admin']");  
		link.Click();
		*/
     	//TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ConnectedDevice']");  //Before 3.6 
     	TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'AttachedDevicesTable']"); //R3.6 ( 9.1.116P)
     	Report.Screenshot("Devices Connected",myTable.Element,true);	// print the devices table
     	
     	//identify the heading columns
     	IList<ThTag> headCols = myTable.Find<ThTag>("./thead//th");
     	int headColsCount = headCols.Count;
		//Report.Info("headColsCount",headColsCount.ToString());
		string deviceHeadInfo=" ";
		int i=1;
		foreach(ThTag col in headCols)  
    	{  
        	//Report.Info(col.InnerText); 
        	if(i < headColsCount){
        		deviceHeadInfo = deviceHeadInfo + col.InnerText +"||||";
        	}else{
        		deviceHeadInfo = deviceHeadInfo + col.InnerText;
        	}
        	i++;
		}
    	Report.Info(deviceHeadInfo);
    	
     	
     	//Count the rows(total no of devices)
     	IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
     	int rowsCount = rows.Count;
     	Report.Info("Total Devices Connected",rowsCount.ToString());
     	/*
     	foreach(TrTag row in rows)  
    	{  
        	Report.Info(row.InnerText); 
    	} 
     	*/
     	
     	//walkthrough the column values
		IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
		int colsCount = cols.Count;
		//int j=1,
		int k=1;
		//Report.Info("colsCount",colsCount.ToString());
		string deviceInfo=" ";
		//Report.Info("Total Columns :: ",colsCount.ToString());
		//string[] devicesInfo = new string[rowsCount];
		int rowsLength = colsCount/rowsCount ; //calculate no of columns in a row
		//Report.Info("rowsLength :: ",rowsLength.ToString());
		
		foreach(TdTag col in cols)  
    	{  
        	//Report.Info(col.InnerText); 
        	//if(j < colsCount) {
        	//if(j < rowsLength){
        	if(k < rowsLength){
        		deviceInfo = deviceInfo + col.InnerText +"||||";
        	}else{
        		deviceInfo = deviceInfo + col.InnerText;
        	}
        	//j++;
        	
        	if(k == rowsLength){
        		Report.Info(deviceInfo);
        		deviceInfo=" ";
        		k=1;
        		//j=1;
        	}else{	
        		k++; 
        		//j++;
        	}
		}
    	
    	//Report.Info(deviceInfo);
    	Ranorex.Report.Log (ReportLevel.Success, "Validation","Connected Devices are validated successfully");
    	
     	/*
     	//WebElement webElement = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ConnectedDevice']");
     	Table table = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ConnectedDevice']");
     	Report . Info (table.FlavorName);
     	int tableRowsCount = table.Rows.Count;
     	Ranorex.Report.Log (ReportLevel.Success, "Table Rows count:" + tableRowsCount.ToString());
     	
     	// List all elements of a table
     	foreach ( TrTag row in table.Find ("./ tbody /tr"))
		{
     	string rowInfo = "";
		TdTag rowNameCell = row. FindSingle ("./ td [2] ");
		rowInfo += " Row index : " + rowNameCell . PreviousSibling . InnerText + ", ";
		rowInfo += " Row name : " + rowNameCell . InnerText + ", ";
		rowInfo += " Row value : " + rowNameCell . NextSibling . InnerText + ", ";
		// Get all cells from the row
		rowInfo += " All Cells : ";
		foreach ( TdTag cell in row . Find ("./ td"))
		{
		rowInfo += cell . InnerText + ", ";
		// Move the mouse to each cell element
		cell . MoveTo ();
		// Set css style
		cell . SetStyle (" background - color "," #33 ff00 ");
		}
		Report . Info ( rowInfo );	
     	}
     	*/
     	
     	/*
     	RxPath path = repo.AbsoluteBasePath;
     	string absPath = path.ToString();
     	Report.Info(absPath);//repo.WebDocument19216801.ConnectedDevicesInfo
     	*/
     	
  
        }

    }
}