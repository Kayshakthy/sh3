///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
	public partial class Login_Screen_Router_Status_Status_Validation
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void View_Cablemodem_Status()
		{
			Delay.Seconds(30);
			WebDocument webDocument = "/dom[@domain='192.168.0.1']";
			webDocument.WaitForDocumentLoaded();
			TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'cableModemStatus']");
			IList<TrTag> totalRows = myTable.Find<TrTag>("./tbody//tr");
			int rowsCount = totalRows.Count;
			string totalRowsCnt = "Total Rows : "+rowsCount.ToString();
			Report.Info("Rows ",totalRowsCnt);
			
			Report.Screenshot("CableModem Status",myTable.Element);
			//validate the table rows & columns
			if(rowsCount >= 1){
				int rowNum = 1;
				foreach (var row in totalRows){
					Report.Info("Row # " + rowNum);
					Report.Info(row.GetInnerHtml());
					IList<TdTag> cols = row.Find<TdTag>("./td");
					int colsCnt =cols.Count;
					Report.Info("Total Columns (colsCnt) in this Row",colsCnt.ToString());
					foreach(TdTag col in cols)
					{
//						Report.Info(col.GetInnerHtml().ToString());
//						Report.Info("col value:", col.InnerText);
						IList<DivTag>  divTags =  col.Find<DivTag>("./div");
						Report.Info(divTags.Count.ToString());
						
						IList<SpanTag> spanVals = col.Find<SpanTag>("./span");
						Report.Info(spanVals.Count.ToString());
						foreach(SpanTag spanVal in spanVals){
							string colValue = spanVal.InnerText;
//							Report.Info(spanVal.InnerText);
							Report.Info(colValue);
						}
						
					}
					rowNum++;
				}
				
			}
			Delay.Seconds(2);
		}

	}
}