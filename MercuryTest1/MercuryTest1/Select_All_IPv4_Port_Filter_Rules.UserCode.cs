///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Select_All_IPv4_Port_Filter_Rules
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        int TotalRows1=0;
        private void Init()
        {
            // Your recording specific initialization code goes here.
            
            WebDocument webDocument1 = "/dom[@domain='192.168.0.1']";
            webDocument1.WaitForDocumentLoaded();
            Delay.Seconds(60);
            TableTag myTable1 = webDocument1.FindSingle("/dom[@domain='192.168.0.1']//table[#'ipv4FilterTable']"); 
            //count the rows
            IList<TrTag> rows1 = myTable1.Find<TrTag>("./tbody//tr");
            TotalRows1 = rows1.Count;
          
        }

        public void Select_Ipv4_Port_Rules()
        {
        	// code to select all the rows in IP Port Filter table
        	
        	//Report.Info("---inside choose_all_ipport_filter_rules_to_delete --- ");
        	
            WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            webDocument.WaitForDocumentLoaded();
        	if(TotalRows1 <=5 ){
        		Delay.Seconds(10);	// to load the pages
        	}else if((TotalRows1 >5 && TotalRows1 <=10) ){
        		Delay.Seconds(15);	// to load the pages
        	}else if((TotalRows1 >10 && TotalRows1 <=20) ){
        		Delay.Seconds(20);	// to load the pages
        	}else{
        		Delay.Seconds(60);	// to load the pages
        	}  
            //Report.Info(webDocument.GetHtml());
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ipv4FilterTable']"); 
            //Count the total no of IPv4 port Filter rules (rows)
	     	IList<TrTag> totalIPv4Rules = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalIPv4Rules.Count;   
	     	string totalPortRules = "Total Rules : "+rulesCount.ToString();
	     	Report.Info("IPv4 Port Filter ",totalPortRules);
	     	if(rulesCount == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("IPv4 Port Filter ","There are no active rules to delete !!");
	     		TestSuite.Current.GetTestCase("Delete_All_IPv4Port_Filtering_Rules").Checked = false;
	     		return;
	     	}else{
	     		//Report.Info(" Rules are there to delete !!! ");
	     		//walkthrough the column values
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				Report.Info("Total colsCount",colsCount.ToString());
				int j=1;
				int delCount =0;
				bool noFilterRule=false;
				foreach(TdTag ipv4Col in cols) {
					//Report.Info(ipv4Col.InnerText);
					//if(colsCount == 1 && ipv4Col.InnerText.StartsWith("No filtering rule") ){	//before 9.1.116u
					if(colsCount == 1 && ipv4Col.InnerText.StartsWith("No filtering rule applied!") ){	
						Report.Info("There are No filtering rule to Delete");
						noFilterRule=true;
						break;
						//return;
					}else if (j == 7){
						//Report.Info("---Checked  delete box ---");
						WebElement webElement = ipv4Col.Element;
						Delay.Seconds(2);
						webElement.Click();
						Report.Screenshot("Delete Ipv4_Port",webElement,true);
						j=0;
						delCount++;
					}
					j++;
				}
				if(noFilterRule){
					return;
				}
				if(delCount == rulesCount){
					// to check whether it selected all rows for deletion
					string rst = "The following "+ rulesCount.ToString() + " IPv4Port_Filtering rules are deleted permanently !!!";
					Report.Success(rst);
					Report.Screenshot("IPv4Port_Filtering",myTable.Element,true);	
					//Report.Screenshot("Delete PortFwd",webElement,true);
					TestSuite.Current.GetTestCase("Activate_Port_Filtering_Rule_Always2").Checked = true;
				}else{
					TestSuite.Current.GetTestCase("Activate_Port_Filtering_Rule_Always2").Checked = false;
					Report.Info(" All rows are not deleted !!! ");
				}
	     	}
	     	
        }

    }
}