///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Add_Duplicate_Device_To_DHCP_Reservation_List recording.
    /// </summary>
    [TestModule("e55769cd-ca6c-463d-aeb3-d89f279ece03", ModuleType.Recording, 1)]
    public partial class Add_Duplicate_Device_To_DHCP_Reservation_List : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Add_Duplicate_Device_To_DHCP_Reservation_List instance = new Add_Duplicate_Device_To_DHCP_Reservation_List();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Add_Duplicate_Device_To_DHCP_Reservation_List()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Add_Duplicate_Device_To_DHCP_Reservation_List Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            repo.WebDocument19216801.IPAdd2.Click("94;32");
            Delay.Milliseconds(200);
            
            repo.WebDocument19216801.IPAdd2.DoubleClick("60;22");
            Delay.Milliseconds(200);
            
            //Delay.Duration(1000, false);
            
            Validate.Exists(repo.WebDocumentIE.ErrTipMacAddressInfo, "Device Already Exist");
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "Duplicate Device", null, false, new RecordItemIndex(4));
            
            //Validate_ErrTipMacAddress1();
            //Delay.Milliseconds(0);
            
            //Report_Screenshot();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (spellcheck='True') on item 'WebDocumentIE.ErrTipMacAddress'.", repo.WebDocumentIE.ErrTipMacAddressInfo, new RecordItemIndex(7));
            //Validate.Attribute(repo.WebDocumentIE.ErrTipMacAddressInfo, "spellcheck", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=875,Height=61}) on item 'WebDocumentIE.ErrTipMacAddress'.", repo.WebDocumentIE.ErrTipMacAddressInfo, new RecordItemIndex(8));
            //Validate.ContainsImage(repo.WebDocumentIE.ErrTipMacAddressInfo, ErrTipMacAddress_Screenshot1_2, ErrTipMacAddress_Screenshot1_2_Options);
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocumentIE.DHCPLeaseTable' at 21;73.", repo.WebDocumentIE.DHCPLeaseTableInfo, new RecordItemIndex(9));
            //repo.WebDocumentIE.DHCPLeaseTable.Click("21;73");
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'WebDocument19216801.AttachedDevicesTable'.", repo.WebDocument19216801.AttachedDevicesTableInfo, new RecordItemIndex(10));
            //Validate.Attribute(repo.WebDocument19216801.AttachedDevicesTableInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='AttachedDevicesTable') on item 'WebDocument19216801.AttachedDevicesTable'.", repo.WebDocument19216801.AttachedDevicesTableInfo, new RecordItemIndex(11));
            //Validate.Attribute(repo.WebDocument19216801.AttachedDevicesTableInfo, "Id", "AttachedDevicesTable");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot2' with region {X=0,Y=0,Width=875,Height=242}) on item 'WebDocument19216801.AttachedDevicesTable'.", repo.WebDocument19216801.AttachedDevicesTableInfo, new RecordItemIndex(12));
            //Validate.ContainsImage(repo.WebDocument19216801.AttachedDevicesTableInfo, AttachedDevicesTable_Screenshot2, AttachedDevicesTable_Screenshot2_Options);
            //Delay.Milliseconds(100);
            
            try {
                //Validate_DHCP_Reserved_Rule();
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
        }

#region Image Feature Data
        CompressedImage ErrTipMacAddress_Screenshot1
        { get { return repo.WebDocumentIE.ErrTipMacAddressInfo.GetScreenshot1(new Rectangle(0, 0, 0, 0)); } }

        Imaging.FindOptions ErrTipMacAddress_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ErrTipMacAddress_Screenshot1_2
        { get { return repo.WebDocumentIE.ErrTipMacAddressInfo.GetScreenshot1(new Rectangle(0, 0, 875, 61)); } }

        Imaging.FindOptions ErrTipMacAddress_Screenshot1_2_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage AttachedDevicesTable_Screenshot2
        { get { return repo.WebDocument19216801.AttachedDevicesTableInfo.GetScreenshot2(new Rectangle(0, 0, 875, 242)); } }

        Imaging.FindOptions AttachedDevicesTable_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
