///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Add_New_Port_Forwarding_Recording8
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
       int TotalRows = 0;
        private void Init()
        {
            // Your recording specific initialization code goes here.
       // Your recording specific initialization code goes here.
            WebDocument webDocument1 = "/dom[@domain='192.168.0.1']";
            TableTag myTable1 = webDocument1.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']"); 
            //Report.Screenshot("New Port Triggering Rule", myTable.Element,true);
            
          
            //highlight the new port triggering rule
            IList<TrTag> rows1 = myTable1.Find<TrTag>("./tbody//tr");
            TotalRows = rows1.Count;
            Report.Info("------Inside Init()------ TotalRows(init)----- : " ,TotalRows.ToString());            
        }

        public void Validate_New_PortForwardingRule()
        {
        	//Validate New_PortForwardingRule
        	Delay.Seconds(20);
        	
			//Ranorex.Report.Log(ReportLevel.Success,"New Port Triggering Added Successfully!!");
			
			//Code to display the result screen
			
			WebDocument webDocument = "/dom[@domain='192.168.0.1']";
			
			//IList<TableTag> Tb = webDocument.FindChildren<TableTag>();
            //Report.Info(Tb.Count.ToString());
           
            //Report.Info(webDocument.GetHtml());
            
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'PortForwardingTable']"); 
            //Report.Screenshot("New Port Triggering Rule", myTable.Element,true);
                       
            //highlight the new port triggering rule
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            Report.Info("Total Rules(Rows)",rowsCnt.ToString());
            //Report.Info("------TotalRows(before Adding) : " ,TotalRows.ToString());
            
            if(TotalRows == rowsCnt ){		// no rows are added
            	Report.Info("//-------------------- TotalRows == rowsCnt ------------------------// ");
            	if(rowsCnt == 32){
					Report.Failure("PortForwardingTable"," There are already 32 rules, FW Table is full !!! ");
					//return;
				}
            	TableTag errorTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'AddRule']/table");
            	//Report.Info("InValid... This PortForwardingTable cannot be added !");
				//Report.Log(ReportLevel.Failure,"PortForwardingTable","Unable to add this new rule");
				
				IList<TrTag> errorRows = errorTable.Find<TrTag>("./tbody//tr");
				Report.Info("errorRows",errorRows.ToString());
				            
				Report.Failure("PortForwardingTable","Unable to add this new rule !!! ");
				Delay.Seconds(5);
				errorTable.EnsureVisible();
				Report.Screenshot("PortForwardingTable",errorTable.Element,false);
				return;
            }else{		// difference in rows
				int rowNum = 1;  
				foreach (var row in rows)  
				{  
					//Report.Info("<---This port triggering rule is disabled from the list--->");
					if(rowNum == rowsCnt){	//to get the last  added rule (row)
						Report.Info("//-------------------- rowNum == rowsCnt ------------------------// ");
						//Report.Info(row.Element.Visible.ToString());
						//Report.Info(row.Element.Size.ToString());
						
						/*
							row.Element.Focus();
							if(row.Element.Visible){// if true
								Report.Info("Valid... New PortForwardingTable is added!");
								Report.Screenshot("PortForwardingTable",row.Element,true);
							}else if(!row.Element.Visible){ //if false
								Report.Info("InValid... This PortForwardingTable cannot be added !");
								Report.Log(ReportLevel.Failure,"PortForwardingTable","Unable to add this new rule");
								Report.Screenshot();
							}
						*/
						Mouse.ScrollWheel(10);
						//row.Element.Focus();
						row.EnsureVisible();
						//Report.Info(row.Element.Visible.ToString());
						Report.Info("Valid... New PortForwardingTable is added!");
						Report.Screenshot("PortForwardingTable",row.Element,true);
						//CompressedImage CI = row.CaptureCompressedImage();
						//Delay.Seconds(2);
						//Report.Screenshot();
						break;
					}
					rowNum++;
				}	//end of for-loop
            }
        }

        public void Validate_InvalidPorts()
        {
        	//string localIP="",localStartPort="",localEndPort="",externalStartPort="",externalEndPort="";
        	//Validate if the ports are not configured/used before
           // Report.Log(ReportLevel.Info, "Validation", "Validating AttributeNotContains (InnerText!>'Invalid range of ports') on item 'WebDocumentIE.InvalidRangeOfPorts'.", repo.WebDocumentIE.InvalidRangeOfPortsInfo);
          	//Validate.Attribute(repo.WebDocumentIE.InvalidRangeOfPortsInfo, "InnerText", new Regex("^((?!("+Regex.Escape("Invalid range of ports")+"))(.|\n))*$"));

          	//check if the Error objects are exist
          	Boolean isInvalidRangeOfPorts = false;
          	Boolean isErrCloseLocalStartPort= false;
          	Boolean isErrCloseLocalEndPort= false;
          	Boolean isErrCloseExternalStartPort = false;
          	Boolean isErrCloseExternalEndPort= false;
          	
          	
          	/*
          	localIP=argument1;
          	//localIP=repo.WebDocument19216801.LocalIPAddress.InnerText;
          	
          		
          	localStartPort=argument2;
          	//localStartPort=repo.WebDocument19216801.LocalStartPort.InnerText;
          	
          	
          	localEndPort=argument3;
          	//localEndPort=repo.WebDocument19216801.LocalEndPort.InnerText;
          	
          	externalStartPort=argument4;
          	//externalStartPort=repo.WebDocument19216801.ExternalStartPort.InnerText;
          	          		
          	externalEndPort=argument5;
          	//externalEndPort=repo.WebDocument19216801.ExternalEndPort.InnerText;
          	*/
          	
          	//string localIp_and_Ports = "localIP :" + localIP + "localStartPort : " + localStartPort + "localEndPort: "+localEndPort + "externalStartPort: "+externalStartPort + "externalEndPort: "+externalEndPort;
          	//Report.Info("LocalIp_and_Ports",localIp_and_Ports);
           	
          	isInvalidRangeOfPorts = repo.WebDocumentIE.InvalidRangeOfPortsInfo.Exists();
          	
		          	//if(!isInvalidRangeOfPorts){
		          	//Ranorex.Report.Log(ReportLevel.Success,"Port Forwarding rule successfully added !!");
		          	//return;
		          	//}
          	if (isInvalidRangeOfPorts){
          		Ranorex.Report.Log(ReportLevel.Failure,"InvalidRangeOfPorts..The External ports are already used in another Rule !!");
          		Ranorex.Report.Log(ReportLevel.Failure,repo.WebDocumentIE.InvalidRangeOfPorts.InnerText);
          		TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes").Checked = false;
          		return;
          	}else {
	          	isErrCloseLocalStartPort = repo.WebDocumentIE.ErrCloseLocalStartPortInfo.Exists();
	          	if(isErrCloseExternalStartPort){
	          		Ranorex.Report.Log(ReportLevel.Failure,"ErrCloseLocalStartPortInfo...This is Invalid LocalStartPort !!");
          			TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes").Checked = false;
          			return;
	          	}
	          	isErrCloseLocalEndPort = repo.WebDocumentIE.ErrCloseLocalEndPortInfo.Exists(); 
	          	if(isErrCloseExternalEndPort){
	          		Ranorex.Report.Log(ReportLevel.Failure,"ErrCloseLocalEndPortInfo...This is Invalid LocalEndPort  !!");
          			TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes").Checked = false;
          			return;
	          	}
	          	isErrCloseExternalStartPort = repo.WebDocumentIE.ErrCloseExternalStartPortInfo.Exists();
	          	if(isErrCloseLocalStartPort){
	          		Ranorex.Report.Log(ReportLevel.Failure,"ErrCloseExternalStartPortInfo..This is Invalid ExternalStartPort!!");
          			TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes").Checked = false;
          			return;	          		
	          	}
	          	isErrCloseExternalEndPort = repo.WebDocumentIE.ErrCloseExternalEndPortInfo.Exists();
	          	if(isErrCloseLocalStartPort){
	          		Ranorex.Report.Log(ReportLevel.Failure,"ErrCloseExternalEndPortInfo..This is Invalid ExternalEndPort !!");
          			TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes").Checked = false;
          			return;	          		
	          	}
	          	Ranorex.Report.Log(ReportLevel.Success,"New port forwarding rule is successfully added !!");
	          	/*
          		if(isErrCloseExternalStartPort || isErrCloseExternalEndPort || isErrCloseLocalStartPort || isErrCloseLocalStartPort){
          			Ranorex.Report.Log(ReportLevel.Failure,"Sorry..This rule is already exists in the Router !!");
          			TestSuite.Current.GetTestCase("Apply_Port_Forward_Changes").Checked = false;
          		}else{
          			Ranorex.Report.Log(ReportLevel.Success,"New port forwarding rule is successfully added !!");
              		return;
          		}
          		*/
          	}
          	
          	
          	/*
        
	          //string strPortsInfo = repo.WebDocumentIE.InvalidRangeOfPorts.InnerText;
	          // Ranorex.Report.Log(ReportLevel.Info,"strPortsInfo",strPortsInfo);
	            
	          //  Boolean booleanPortsInfo = strPortsInfo.Contains("Invalid range of ports");
	          //  if(booleanPortsInfo){
	          //  	Ranorex.Report.Log(ReportLevel.Failure,"Sorry..This rule is already exists in the Router !!");
	          //   }else{
	          //  	Ranorex.Report.Log(ReportLevel.Success,"Port Forwarding rule successfully added !!");
	          //  }
	            
	           Ranorex.Report.Log(ReportLevel.Failure,"Sorry..This rule is already exists in the Router !!")  
           */
        }

    }
}