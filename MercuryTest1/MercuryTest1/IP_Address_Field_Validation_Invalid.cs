///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The IP_Address_Field_Validation_Invalid recording.
    /// </summary>
    [TestModule("4c6a73c0-4841-4395-906f-326c01b8997d", ModuleType.Recording, 1)]
    public partial class IP_Address_Field_Validation_Invalid : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static IP_Address_Field_Validation_Invalid instance = new IP_Address_Field_Validation_Invalid();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public IP_Address_Field_Validation_Invalid()
        {
            IP_Address_Value = "10";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static IP_Address_Field_Validation_Invalid Instance
        {
            get { return instance; }
        }

#region Variables

        string _IP_Address_Value;

        /// <summary>
        /// Gets or sets the value of variable IP_Address_Value.
        /// </summary>
        [TestVariable("e50952ef-37f1-4661-b60e-4eabf87096ba")]
        public string IP_Address_Value
        {
            get { return _IP_Address_Value; }
            set { _IP_Address_Value = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocument19216801.StartIPAddress3' at 25;19.", repo.WebDocument19216801.StartIPAddress3Info, new RecordItemIndex(0));
            repo.WebDocument19216801.StartIPAddress3.Click("25;19");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'WebDocument19216801.StartIPAddress3'.", repo.WebDocument19216801.StartIPAddress3Info, new RecordItemIndex(1));
            Keyboard.PrepareFocus(repo.WebDocument19216801.StartIPAddress3);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$IP_Address_Value' with focus on 'WebDocument19216801.StartIPAddress3'.", repo.WebDocument19216801.StartIPAddress3Info, new RecordItemIndex(2));
            repo.WebDocument19216801.StartIPAddress3.PressKeys(IP_Address_Value);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'WebDocument19216801.StartIPAddress3'.", repo.WebDocument19216801.StartIPAddress3Info, new RecordItemIndex(3));
            repo.WebDocument19216801.StartIPAddress3.PressKeys("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'WebDocument19216801.ErrCloseStartIPAddress'.", repo.WebDocument19216801.ErrCloseStartIPAddressInfo, new RecordItemIndex(4));
            Validate.Exists(repo.WebDocument19216801.ErrCloseStartIPAddressInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'WebDocument19216801.ErrCloseStartIPAddress'.", repo.WebDocument19216801.ErrCloseStartIPAddressInfo, new RecordItemIndex(5));
            Validate.Exists(repo.WebDocument19216801.ErrCloseStartIPAddressInfo);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'WebDocument19216801.ErrCloseStartIPAddress'.", repo.WebDocument19216801.ErrCloseStartIPAddressInfo, new RecordItemIndex(6));
            //Validate.Exists(repo.WebDocument19216801.ErrCloseStartIPAddressInfo);
            //Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(7));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
