///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
	public partial class Login_Screen_Router_Status_Downstream_Validation
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void Login_RouterStatus_Downstream_validation()
		{
			Delay.Seconds(30);
			WebDocument webDocument = "/dom[@domain='192.168.0.1']";
			webDocument.WaitForDocumentLoaded();
			
			//validate the DownloadChannel1(Downstream bonded channels) table rows & columns
			TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'DownstremChannel']");
			
			//identify the heading columns
	     	IList<ThTag> headCols = myTable.Find<ThTag>("./thead//th");
	     	int headColsCount = headCols.Count;
			Report.Info("HeadColsCount",headColsCount.ToString());
			string deviceHeadInfo=" ";
			int i=1;
			foreach(ThTag col in headCols)  
	    	{  
				//Report.Info("i:",i.ToString());
	        	//Report.Info(col.InnerText); 
	        	if(i < headColsCount && i >0){
	        		deviceHeadInfo = deviceHeadInfo + col.InnerText +"||||";
	        	}else if(i == headColsCount){
	        		deviceHeadInfo = deviceHeadInfo + col.InnerText;
	        	}
	        	i++;
			}
	    	Report.Info(deviceHeadInfo);	//print the table headers
	    	
	    	
			IList<TrTag> totalRows = myTable.Find<TrTag>("./tbody//tr");
			int rowsCount = totalRows.Count;
//			string totalRowsCnt = "Total Rows(DownloadChannel1) : "+rowsCount.ToString();
			string totalRowsCnt = rowsCount.ToString();
			Report.Info("Total Rows(DownloadChannel1) ",totalRowsCnt);
			
			
			if(rowsCount > 0){
				int rowNum = 1;
				foreach (var row in totalRows){
					Report.Info("Row # " + rowNum);
//					Report.Info(row.GetInnerHtml());
					IList<TdTag> cols = row.Find<TdTag>("./td");
					int colsCnt =cols.Count;
					Report.Info("Total Columns (colsCnt) in the Row",colsCnt.ToString());
					int colNum = 1; 
					foreach(TdTag col in cols)
					{
						Report.Info(" colNum : " + colNum);
//						Report.Info(col.GetInnerHtml().ToString());
						Report.Info("col value :", col.InnerText);
						
						/*
						IList<DivTag>  divTags =  col.Find<DivTag>("./div");
						Report.Info(divTags.Count.ToString());
						IList<SpanTag> spanVals = col.Find<SpanTag>("./span");
						Report.Info(spanVals.Count.ToString());
						foreach(SpanTag spanVal in spanVals){
							Report.Info(spanVal.InnerText);
						}
						*/
						
						colNum ++;
					}
					rowNum++;
				}
				
			}else{
				Report.Failure("There are no Downstream bonded channels");
			}
			
			//validate the DownloadChannel2(Downstream bonded channels) table rows & columns
			TableTag myTable1 = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'DownstremChannel2']");
						
			//identify the heading columns
	     	IList<ThTag> headCols1 = myTable1.Find<ThTag>("./thead//th");
	     	int headColsCount1 = headCols1.Count;
			Report.Info("HeadColsCount1",headColsCount1.ToString());
			string deviceHeadInfo1=" ";
			int j=1;
			foreach(ThTag col in headCols)  
	    	{  
				//Report.Info("i:",i.ToString());
	        	//Report.Info(col.InnerText); 
	        	if(j < headColsCount1 && j >0){
	        		deviceHeadInfo1 = deviceHeadInfo1 + col.InnerText +"||||";
	        	}else if(j == headColsCount1){
	        		deviceHeadInfo1 = deviceHeadInfo1 + col.InnerText;
	        	}
	        	j++;
			}
	    	Report.Info(deviceHeadInfo1);	//print the table headers
	    	
			//Table rows
			IList<TrTag> totalRows1 = myTable.Find<TrTag>("./tbody//tr");
			int rowsCount1 = totalRows1.Count;
//			string totalRowsCnt = "Total Rows(DownloadChannel1) : "+rowsCount.ToString();
			string totalRowsCnt1 = rowsCount1.ToString();
			Report.Info("Total Items(DownloadChannel2) ",totalRowsCnt1);

			if(rowsCount1 >= 1){
				int rowNum1 = 1;
				foreach (var row in totalRows1){
					Report.Info("Row # " + rowNum1);
//					Report.Info(row.GetInnerHtml());
					IList<TdTag> cols = row.Find<TdTag>("./td");
					int colsCnt =cols.Count;
					Report.Info("Total Columns (colsCnt) in this Row",colsCnt.ToString());
					int colNum = 1; 
					foreach(TdTag col in cols)
					{
//						Report.Info(col.GetInnerHtml().ToString());
						Report.Info(" colNum : " + colNum);
						Report.Info("col value:", col.InnerText);
						/*
						IList<DivTag>  divTags =  col.Find<DivTag>("./div");
						Report.Info(divTags.Count.ToString());
						
						IList<SpanTag> spanVals = col.Find<SpanTag>("./span");
						Report.Info(spanVals.Count.ToString());
						foreach(SpanTag spanVal in spanVals){
							Report.Info(spanVal.InnerText);
						}
						*/
						colNum ++;
					}
					rowNum1++;
				}	// end of for-loop	totalRows1
				
			}	//end of if-rowsCount1			
			
		}

	}
}