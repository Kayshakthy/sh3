///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Choose_All_From_DHCP_Reserved_List
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
            Report.Info("Inside init() of  Choose_All_From_DHCP_Reserved_List ");
        }

        public void Choose_All_DHCP_Reserved_Rules_To_Delete()
        {
        	
			//This method is to select all the filter rules to delete
        	Delay.Seconds(40);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
        	webDocument.WaitForDocumentLoaded();
        	//Report.Info(webDocument.GetHtml());
        	TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'dhcpClientsTable']"); 
            //Count the total no of DHCP Reserved rules (rows)
	     	IList<TrTag> totalDHCPList = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalDHCPList.Count;   
	     	string totalDHCPReservedList = "Total Rules : "+rulesCount.ToString();
	     	Report.Info("Active MAC  Filter Rules ",totalDHCPReservedList);
	     	
	     	if(rulesCount == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("DHCP Reserved List ","There are no active reservation list(s) to delete !!");
	     		TestSuite.Current.GetTestCase("Confirm_To_Delete_All_From_DHCP_Reservation").Checked = false;
	     		return;
	     	}else{
	     		Report.Info(" There are " + rulesCount.ToString() + " DHCP Reservation list(s) to delete !!! ");
	     		//walkthrough the column values

				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				Report.Info("Total colsCount",colsCount.ToString());
				int j=1,delCount =0,delCheck = 0;

				foreach(TdTag MacCol in cols) {
					//Report.Info("Column",j.ToString());
					//Report.Info(MacCol.InnerText);
					string macAddress = "",ipAddress="";
					if(j==1 && (MacCol.InnerText.ToString().StartsWith("No reserved rule"))){	//No reserved rule! --R3.7
						//Report.Info("No MAC filtering rule exists !!!");
	     				Report.Failure("MAC Filter ","There are No DHCP Reservation list to delete !!");
	     				TestSuite.Current.GetTestCase("Confirm_To_Delete_All_From_DHCP_Reservation").Checked = false;
	     				Delay.Seconds(1);
	     				Report.Screenshot("DHCP Reserved List",myTable.Element,true);	
	     				return;						
					}else if(j==1 && !(MacCol.InnerText.ToString().StartsWith("No reserved rule"))){
						//macAddress
						macAddress = MacCol.InnerText.ToString();
						//Report.Info("macAddress",macAddress);
					}else if(j==2){
						//Report.Info(MacCol.InnerText);
						//macAddress = MacCol;
						ipAddress = MacCol.InnerText.ToString();
						//Report.Info("ipAddress",ipAddress.ToString());
					}else if (j == 3){
						//Report.Info("---Checked  delete box ---");
						/*
						WebElement webElement = MacCol.Element;
						Delay.Seconds(2);
						webElement.Click();
						Report.Screenshot("Delete MACFilter",webElement,true);
						*/
						//Report.Info(MacCol.GetInnerHtml().ToString());
				        //Report.Info("MacCol path: "+MacCol.GetPath().ToString());
				        
				        String newPath = "";
				        newPath = MacCol.GetPath() + "/input[#'dhcpClientsTable-Delete-"+delCheck+"']";
						//Report.Info("newPath : "+ newPath);

				        Ranorex.InputTag DHCPClientsTableDeleteTag = newPath;
				       // Report.Info("DHCPClientsTableDeleteTag(Default) : " + DHCPClientsTableDeleteTag.Checked.ToString());
				        if (DHCPClientsTableDeleteTag.Checked.ToString() == "False"){
				        	//Report.Info("----------------- DHCPClientsTableDeleteTag was False ---");
				        	Delay.Seconds(1);
				        	DHCPClientsTableDeleteTag.PerformClick();
				        }else{
				       		//Report.Info("----------------- DHCPClientsTableDeleteTag was True ---");
							Report.Info(" DHCPClientsTableDeleteTag is already Enabled ");
						}
				        string rst = "The following DHCP Reserved List is selected to delete permanently !!!";
						Report.Success(rst);
						Delay.Seconds(2);
			        	Report.Screenshot("DHCP Reserved List",MacCol.Element,true);
			        	//Report.Screenshot("DHCP Reserved List",myTable.Element,true);
			        	Delay.Seconds(2);
						j=0;
						delCount++;
						delCheck++;
					}
					j++;
				}	//end of TdTag for-loop	
				
				if(delCount == rulesCount){
					// to check whether it selected all rows for deletion
					string rst = "All the "+ rulesCount.ToString() + " DHCP Reserved List(s) are deleted permanently !!!";
					Report.Success(rst);Delay.Seconds(2);
					Report.Screenshot("DHCP Reserved List",myTable.Element,true);	
				}else{
					Report.Info(" All rows are not deleted !!! ");
				}
				
	     	}        	
        }	//end of method Choose_All_DHCP_Reserved_Rules_To_Delete()

    }
}