///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Choose_All_Devices_From_MAC_List_5GHz_Primary
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Choose_Device_MAC_List_5GHz_Primary()
        {
        	//delete all devices that belongs to 5GHz_Primary
        	Delay.Seconds(30);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
        	// Wait until the document is loaded  
			webDocument.WaitForDocumentLoaded();  
			
        	//Report.Info(webDocument.GetHtml());
        	TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'macAddressFilterTable']"); 
            //Count the total no of IPv4 port Filter rules (rows)
	     	IList<TrTag> totalMACListDevices = myTable.Find<TrTag>("./tbody//tr");
	     	int rulesCount = totalMACListDevices.Count;   
	     	string totalMACFilterDevices = "Total Rules : "+rulesCount.ToString();
	     	Report.Info("Active Devices ",totalMACFilterDevices);
	     	
	     	if(rulesCount == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("MAC Filter Devices ","There are no MAC filters to delete !!");
	     		TestSuite.Current.GetTestCase("Delete_All_Devices_From_MAC_Filter_List_5GHz_Pmry_Wireless").Checked = false;
	     		return;
	     	}else {
	     		
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				Report.Info("colsCount",colsCount.ToString());
				
	     		if(rulesCount == 1 && colsCount ==1){	// No filtering device!
		     		//walkthrough the column values
					foreach(TdTag col in cols)  
			    	{
							string noFilterStr = col.InnerText.ToString();
							//Report.Info(noFilterStr);
							//if(noFilterStr.StartsWith("No filtering")){	//No filtering device!
							if(noFilterStr.StartsWith("You have not selected a device to filter. Please select a device from the attached devices list.")){
					     		Report.Failure("MAC Filter Devices ","There are no devie to delete !!");
					     		TestSuite.Current.GetTestCase("Delete_All_Devices_From_MAC_Filter_List_5GHz_Pmry_Wireless").Checked = false;
					     		return;						
							}
					}	//end of forloop			
				}else{
		     		Report.Info(" There are " + rulesCount.ToString() + " MAC filter list !!! ");
		     		TestSuite.Current.GetTestCase("Delete_All_Devices_From_MAC_Filter_List_5GHz_Pmry_Wireless").Checked = true;
		     		int rowNum = 1;  
				    int delCheck = 0;
			    
			    	foreach (var row in totalMACListDevices)  
			    	{ 
			    	 Report.Info("Row: " + rowNum);  
		     		//walkthrough the column values
					//IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
					/**
					IList<TdTag> cols = row.Find<TdTag>("./td");
					int colsCount = cols.Count;
					**/
					cols = row.Find<TdTag>("./td");
					colsCount = cols.Count;
					
					Report.Info("Total colsCount",colsCount.ToString());
					
					int j=1;	//column number
					string Wireless_radio="";
					foreach(TdTag col in cols)  
			    	{
						Report.Info("col number: " + j);
						Report.Info(col.InnerText);
						
						if(j==3){	//Wireless radio
							String wirelessRadioPath = "";	
							wirelessRadioPath = col.GetPath().ToString();
							//Report.Info("wirelessRadioPath",wirelessRadioPath);
							//find span tag
							IList<SpanTag> spanVals = col.Find<SpanTag>("./span");
							//Report.Info("span count :  "+spanVals.Count);
							
							foreach(SpanTag spanVal in spanVals){
								Wireless_radio  = spanVal.InnerText;
								Report.Info("Wireless_radio  : " + Wireless_radio );
							}
							//Report.Info("Wireless_radio",Wireless_radio);
							Report.LogHtml(ReportLevel.Info,Wireless_radio,"<b>Wireless_radio frequency</b>");
						}
						else if (j==4){
							if((Wireless_radio == "5GHz")||(Wireless_radio == "5 GHz")){	//updated this line on 17/10/17 based on SON code - 116.400
								Report.Info("----------------- click delete checkbox ------");
								//Report.Info("Wireless_radio",Wireless_radio);
								//isMatch = true;
								//Report.Info("----------------- Rules Matches !!! ------");
								String newPath = "",colPath="";
								colPath = col.GetPath().ToString();
								//Report.Info("col Path ", colPath);
								//newPath = col.GetPath() + "/input[#'macAddressFilterTable-Delete-"+delCheck+"']";	//fmChbx-macAddressFilterTable-Delete-0
								//macAddressFilterTable-Delete-0
								newPath = colPath + "/input[#'macAddressFilterTable-Delete-"+delCheck+"']";
								
								//newPath = "/dom[@domain='192.168.0.1']//input[#'macAddressFilterTable-"+delCheck+"']";
								//dom[@domain='192.168.0.1']//input[#'macAddressFilterTable-Delete-0']
								//Report.Info("newPath ", newPath);
								Ranorex.InputTag MACFilterTableDeleteTag = newPath;
								if (MACFilterTableDeleteTag.Checked.ToString() == "False"){
									Report.Info("----------------- MACFilterTableDeleteTag was False ---");
									Delay.Seconds(1);
									//MACFilterTableDeleteTag.Click();
									MACFilterTableDeleteTag.PerformClick();
									//MACFilterTableDeleteTag.Checked = "Checked";
									Delay.Seconds(2);
								}else{
									Report.Info(" MACFilterTableDeleteTag is already Enabled ");
								}
								string rst = "The following MACFilter_Filtering rule is deleted permanently !!!";
								Report.Success(rst);
								Delay.Seconds(1);
								Report.Screenshot("MACFiltering",col.Element,true);
							}else{
								Report.Info(" Different wireless radio frequency(2.4GHz) devices are added in the list ! ");
							}
						}
						j++;	//column number
					}	//end of foreach - column
					rowNum++;
			        delCheck++;	//counter to select delete checkbox
	     		}	//end of foreach - row
			
		    }	//end of if-else        	
        }

    }
  }
}