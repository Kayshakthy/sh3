///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class View_Router_Operational_Config
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void View_Router_Operational_Configurations()
        {
        	Delay.Seconds(30);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
        	webDocument.WaitForDocumentLoaded();
        	
        	TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'configuration']/?/?/table[@id='configuration']"); 
	    
	     	
			//identify the heading columns
	     	IList<ThTag> headCols = myTable.Find<ThTag>("./thead//th");
	     	int headColsCount = headCols.Count;
			Report.Info("HeadColsCount",headColsCount.ToString());
			string deviceHeadInfo=" ";
			int i=1;
			foreach(ThTag col in headCols)  
	    	{  
				//Report.Info("i:",i.ToString());
	        	Report.Info(col.InnerText); 
	        	if(i < headColsCount && i >1){
	        		deviceHeadInfo = deviceHeadInfo + col.InnerText +"	||||	";
	        	}else if(i == headColsCount){
	        		deviceHeadInfo = deviceHeadInfo + col.InnerText;
	        	}
	        	i++;
			}
	    	Report.Info(deviceHeadInfo);
	    
   			IList<TrTag> totalConfig = myTable.Find<TrTag>("./tbody//tr");
	     	int rowsCount = totalConfig.Count;   
	     	string totalRowsCnt = "Total Rows : "+rowsCount.ToString();
	     	Report.Info("Total Items ",totalRowsCnt); 
	     	
	     	//walkthrough all the columns
	    	foreach ( TrTag row in myTable.Find ("./ tbody /tr"))
			{
	    		
	    		string rowInfo = "",operVal="";
	    		
				foreach ( TdTag cell in row . Find ("./ td"))
				{
					//Report.Info(cell.GetInnerHtml().ToString());
					IList<DivTag> divVals = cell.Find<DivTag>("./div");	
					int divTagCount=0;
					divTagCount = divVals.Count;
					//Report.Info("divTag count :  "+ divTagCount);
					if(divTagCount > 0){
						foreach(DivTag divVal in divVals){
							IList<SpanTag> spanVals = divVal.Find<SpanTag>("./span");
							//Report.Info("spanTag count :  "+spanVals.Count);
							foreach ( SpanTag spancell in spanVals){
								operVal = spancell.InnerText;
								//Report.Info("operVal : " + operVal);
							}//end of for-loop :	SpanTag
						}//end of for-loop : DivTag
					}//end of if
					
					if(divTagCount > 0){
						rowInfo += operVal + ", ";
					}else{
						rowInfo += cell . InnerText + ", ";
					}
					// Move the mouse to each cell element
					cell . MoveTo ();
					// Set css style
					cell . SetStyle (" background - color "," #33 ff00 ");
				}
				Report . Info ( rowInfo );	
				
	    	}
	     	//Report.Screenshot("Router_Operational_Config Status",myTable.Element);
	     	//Delay.Seconds(2);    
	     	Report.Screenshot();	//capture full screen
        }

    }
}