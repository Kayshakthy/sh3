///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Invalid_Max_Hops_validation
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_MaximumNumberOfHopsMustBetween1An(string argument1)
        {
        	Report.Info("MaxHops : "+argument1);
        	if(argument1 == "-1"){
        		Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='-1 is an invalid number.') on item 'WebDocumentIE.SpanTag1IsAnInvalidNumber'.", repo.WebDocumentIE.SpanTag1IsAnInvalidNumberInfo);
        		Validate.Attribute(repo.WebDocumentIE.SpanTag1IsAnInvalidNumberInfo, "InnerText", "-1 is an invalid number.");
        	}else{
        		Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Maximum number of hops must between 1 and 255.') on item 'WebDocumentIE.MaximumNumberOfHopsMustBetween1An'.", repo.WebDocumentIE.MaximumNumberOfHopsMustBetween1AnInfo);
        		Validate.Attribute(repo.WebDocumentIE.MaximumNumberOfHopsMustBetween1AnInfo, "InnerText", "Maximum number of hops must between 1 and 255.");
        	}
        }

        public void Validate_SpanTag1IsAnInvalidNumber()
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='-1 is an invalid number.') on item 'WebDocumentIE.SpanTag1IsAnInvalidNumber'.", repo.WebDocumentIE.SpanTag1IsAnInvalidNumberInfo);
            Validate.Attribute(repo.WebDocumentIE.SpanTag1IsAnInvalidNumberInfo, "InnerText", "-1 is an invalid number.");
        }

    }
}