///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Form_Port_Triggering_Enabled
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Populate_Port_Triggering_Combo_Boxes(string argument1, string argument2)
        {
        	// argument1 - protocol
        	// argument2 - Enabled or Disabled
        	//Report.Info("Protocol :"+argument1);
        	//Report.Info(" Inside Populate_Port_Triggering_Combo_Boxes  " + "proto : "+argument1 + ": Enabled?:"+argument2);
               		
        	//	/dom[@domain='192.168.0.1']//div[#'fmSel-Protocol']//cite[@innertext='UDP']
        
          WebDocument webDocument = "/dom[@domain='192.168.0.1']";
          //DivTag myDiv = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'fmSel-Protocol']"); 
          //DivTag myDiv = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'tr_Protocol']"); 
                
         // var divTagMydiv = repo.WebDocument.YourElement;  
         // String pureInnerText;  
         // pureInnerText= Regex.Replace(divTagMydiv.GetInnerHtml(), "<.*?>", string.Empty);  
         //pureInnerText = myDiv.GetInnerHtml();
         //pureInnerText= Regex.Replace(myDiv.GetInnerHtml(), "<.*?>", string.Empty); 
         //Report.Info("PureInnerText: "+pureInnerText);  
         
        // Ranorex.SelectTag selectTag = Host.Local.FindSingle("/dom[@page='test.html']/body/select");      
        Ranorex.SelectTag selectTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'Protocol']");
		foreach(Ranorex.OptionTag optTag in selectTag.Find(".//option"))
		{
     		//Console.WriteLine(optTag.InnerText);
     		Report.Info(optTag.InnerText);
     		if(optTag.InnerText == argument1){
     			Report.Info("argument matching:: "+argument1 );
     			   // OptionTag option = "//rxpath/to/option";  
    				//option.Selected = true;  
    				optTag.Selected = true;
     		}
		}
	
        	if(argument1== "UDP"){
        		//Report.Info("UDP.....Protocol :"+argument1);
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_UDP").Checked = false;//true - to enable the test cases
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_TCP").Checked = false;
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_UDPandTCP").Checked = false;
        	}if(argument1 == "TCP"){
        		//Report.Info("TCP....Protocol :"+argument1);
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_TCP").Checked = false;
  				TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_UDP").Checked = false;
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_UDPandTCP").Checked = false;     		
        	}else if(argument1 == "UDP and TCP"){
        		//Report.Info("UDP and TCP ....Protocol :"+argument1);
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_UDPandTCP").Checked = false;
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_UDP").Checked = false;
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Protocol_TCP").Checked = false;
        	}
			
        	//Report.Info("RuleStatus : "+argument2);
        
	       // Ranorex.SelectTag selectTag1 = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'Enabled']");
	        Ranorex.SelectTag enableTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'tr_Enabled']/select[@id='Enabled']");
			foreach(Ranorex.OptionTag optTag in enableTag.Find(".//option"))
			{
	     		//Console.WriteLine(optTag.InnerText);
	     		Report.Info(optTag.InnerText);
	     		if(optTag.InnerText == argument2){
	     			Report.Info("argument matching:: "+argument2 );
	    				optTag.Selected = true;
	     		}
			}
			
        	if(argument2 == "On"){
        		//Report.Info("On RuleStatus : "+argument2);
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Enabled").Checked = false;// true - to enable the test cases
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Disabled").Checked = false;
        	}else if(argument2 == "Off"){
        		//Report.Info("Off RuleStatus : "+argument2);
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Disabled").Checked = false;
        		TestSuite.Current.GetTestCase("Choose_Port_Trigger_Enabled").Checked = false;
        	}
        	
        }

        public void Print_Port_Trigger_Values(string argument1, string argument2, string argument3, string argument4, string argument5, string argument6)
        {
        	Report.Info("Trigger Start : " + argument1);
        	Report.Info("Trigger End : " + argument1);
        	Report.Info("Target Start : " + argument1);
        	Report.Info("Target End : " + argument1);
        	Report.Info("Enable/Disable ? : " + argument1);
        	Report.Info("Protocol Type : " + argument1);

        	
        }

    }
}