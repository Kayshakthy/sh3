///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Form_Port_Filter_Single_Source_Destn recording.
    /// </summary>
    [TestModule("b4eb5a85-6363-4c27-b1a0-cb5537d36e5e", ModuleType.Recording, 1)]
    public partial class Form_Port_Filter_Single_Source_Destn : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Form_Port_Filter_Single_Source_Destn instance = new Form_Port_Filter_Single_Source_Destn();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Form_Port_Filter_Single_Source_Destn()
        {
            Dest_IP_Addr = "";
            SourcePortStart = "";
            SourcePortEnd = "80";
            DestPortStart = "";
            DestPortEnd = "";
            Src_Ip_Addr_Start = "";
            IPv4_DestIPAddress = "";
            IPv4_SourceIPAddress = "";
            IPv4_Filter_Protocol = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Form_Port_Filter_Single_Source_Destn Instance
        {
            get { return instance; }
        }

#region Variables

        string _Dest_IP_Addr;

        /// <summary>
        /// Gets or sets the value of variable Dest_IP_Addr.
        /// </summary>
        [TestVariable("dfbfc708-5d00-4b7d-93c1-60cc0d6f866c")]
        public string Dest_IP_Addr
        {
            get { return _Dest_IP_Addr; }
            set { _Dest_IP_Addr = value; }
        }

        string _SourcePortStart;

        /// <summary>
        /// Gets or sets the value of variable SourcePortStart.
        /// </summary>
        [TestVariable("78f2550a-7e04-43e6-98f9-e173276002fd")]
        public string SourcePortStart
        {
            get { return _SourcePortStart; }
            set { _SourcePortStart = value; }
        }

        string _SourcePortEnd;

        /// <summary>
        /// Gets or sets the value of variable SourcePortEnd.
        /// </summary>
        [TestVariable("4895b77f-2629-43da-a3f9-91fc62690c4a")]
        public string SourcePortEnd
        {
            get { return _SourcePortEnd; }
            set { _SourcePortEnd = value; }
        }

        string _DestPortStart;

        /// <summary>
        /// Gets or sets the value of variable DestPortStart.
        /// </summary>
        [TestVariable("da6ea4d3-e038-423e-9af9-369f52241ef8")]
        public string DestPortStart
        {
            get { return _DestPortStart; }
            set { _DestPortStart = value; }
        }

        string _DestPortEnd;

        /// <summary>
        /// Gets or sets the value of variable DestPortEnd.
        /// </summary>
        [TestVariable("93d37394-8c15-4c1f-a48e-91ac2d6c4795")]
        public string DestPortEnd
        {
            get { return _DestPortEnd; }
            set { _DestPortEnd = value; }
        }

        string _Src_Ip_Addr_Start;

        /// <summary>
        /// Gets or sets the value of variable Src_Ip_Addr_Start.
        /// </summary>
        [TestVariable("99996cb7-0d9f-4bd9-8bc8-a4147cb3aaff")]
        public string Src_Ip_Addr_Start
        {
            get { return _Src_Ip_Addr_Start; }
            set { _Src_Ip_Addr_Start = value; }
        }

        string _IPv4_DestIPAddress;

        /// <summary>
        /// Gets or sets the value of variable IPv4_DestIPAddress.
        /// </summary>
        [TestVariable("26ed0fb7-90d3-4b77-b472-c9654225466b")]
        public string IPv4_DestIPAddress
        {
            get { return _IPv4_DestIPAddress; }
            set { _IPv4_DestIPAddress = value; }
        }

        string _IPv4_SourceIPAddress;

        /// <summary>
        /// Gets or sets the value of variable IPv4_SourceIPAddress.
        /// </summary>
        [TestVariable("dc297523-846c-486c-a5ae-fc0bda4093d5")]
        public string IPv4_SourceIPAddress
        {
            get { return _IPv4_SourceIPAddress; }
            set { _IPv4_SourceIPAddress = value; }
        }

        string _IPv4_Filter_Protocol;

        /// <summary>
        /// Gets or sets the value of variable IPv4_Filter_Protocol.
        /// </summary>
        [TestVariable("7c33a780-d477-4a35-a511-8b74bb9b8135")]
        public string IPv4_Filter_Protocol
        {
            get { return _IPv4_Filter_Protocol; }
            set { _IPv4_Filter_Protocol = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'IPv4_Filter_Protocol' from item 'WebDocument19216801.FmSelSecurityModeGrp.SomeSpanTag4' and assigning its value to variable 'IPv4_Filter_Protocol'.", repo.WebDocument19216801.FmSelSecurityModeGrp.SomeSpanTag4Info, new RecordItemIndex(0));
            //IPv4_Filter_Protocol = repo.WebDocument19216801.FmSelSecurityModeGrp.SomeSpanTag4.Element.GetAttributeValueText("IPv4_Filter_Protocol");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'IPv4_SourceIPAddress' from item 'WebDocument19216801.FmSelDay.SomeSpanTag' and assigning its value to variable 'IPv4_SourceIPAddress'.", repo.WebDocument19216801.FmSelDay.SomeSpanTagInfo, new RecordItemIndex(1));
            //IPv4_SourceIPAddress = repo.WebDocument19216801.FmSelDay.SomeSpanTag.Element.GetAttributeValueText("IPv4_SourceIPAddress");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'IPv4_DestIPAddress' from item 'WebDocument19216801.SomeSpanTag5' and assigning its value to variable 'IPv4_DestIPAddress'.", repo.WebDocument19216801.SomeSpanTag5Info, new RecordItemIndex(2));
            //IPv4_DestIPAddress = repo.WebDocument19216801.SomeSpanTag5.Element.GetAttributeValueText("IPv4_DestIPAddress");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(3));
            //Delay.Duration(1000, false);
            
            try {
                Update_Combo_Boxes_For_IPv4Filtering_Rule(IPv4_Filter_Protocol, IPv4_SourceIPAddress, IPv4_DestIPAddress);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            //repo.WebDocument19216801.SomeSpanTag4.Click("172;22");
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.CiteTagAll.Click("150;10");
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.FmSelIPv4SrcIPGrp.SomeSpanTag.Click("165;12");
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.FmSelIPv4SrcIPGrp.Single.Click("56;9");
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.FmSelIPv4SrcIPGrp.SomeSpanTag.Click("174;15");
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.FmSelIPv4SrcIPGrp.CiteTagAll1.Click("118;10");
            //Delay.Milliseconds(200);
            
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcSingleAddress3Info, "Visible", "True");
            //Delay.Milliseconds(0);
            
            //Validate_IPv4SrcSingleAddress3();
            //Delay.Milliseconds(0);
            
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcSingleAddress3Info, "Value", "0");
            //Delay.Milliseconds(100);
            
            //repo.WebDocument19216801.IPv4SrcSingleAddress3.MoveTo("22;6");
            //Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
            //Delay.Milliseconds(200);
            
            repo.WebDocument19216801.IPv4SrcSingleAddress3.Click("6;11");
            Delay.Milliseconds(200);
            
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.IPv4SrcSingleAddress3.PressKeys(Src_Ip_Addr_Start);
            Delay.Milliseconds(0);
            
            //repo.WebDocument19216801.SomeSpanTag5.Click("173;20");
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.Single.Click("59;12");
            //Delay.Milliseconds(200);
            
            repo.WebDocument19216801.IPv4DestSingleAddress.Click();
            Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.IPv4DestSingleAddress.MoveTo("65;8");
            //Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.IPv4DestSingleAddress.MoveTo("73;0");
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.IPv4Address.MoveTo("74;20");
            //Mouse.ButtonUp(System.Windows.Forms.MouseButtons.Left);
            //Delay.Milliseconds(200);
            
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.IPv4DestSingleAddress.PressKeys(Dest_IP_Addr);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (HasFocus='True') on item 'WebDocument19216801.IPv4DestSingleAddress'.", repo.WebDocument19216801.IPv4DestSingleAddressInfo, new RecordItemIndex(28));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestSingleAddressInfo, "HasFocus", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='IPv4DestSingleAddress') on item 'WebDocument19216801.IPv4DestSingleAddress'.", repo.WebDocument19216801.IPv4DestSingleAddressInfo, new RecordItemIndex(29));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestSingleAddressInfo, "Id", "IPv4DestSingleAddress");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagName='input') on item 'WebDocument19216801.IPv4DestSingleAddress'.", repo.WebDocument19216801.IPv4DestSingleAddressInfo, new RecordItemIndex(30));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestSingleAddressInfo, "TagName", "input");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='192.168.0.10') on item 'WebDocument19216801.IPv4DestSingleAddress'.", repo.WebDocument19216801.IPv4DestSingleAddressInfo, new RecordItemIndex(31));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestSingleAddressInfo, "TagValue", "192.168.0.10");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='192.168.0.10') on item 'WebDocument19216801.IPv4DestSingleAddress'.", repo.WebDocument19216801.IPv4DestSingleAddressInfo, new RecordItemIndex(32));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestSingleAddressInfo, "Value", "192.168.0.10");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=122,Height=20}) on item 'WebDocument19216801.IPv4DestSingleAddress'.", repo.WebDocument19216801.IPv4DestSingleAddressInfo, new RecordItemIndex(33));
            //Validate.ContainsImage(repo.WebDocument19216801.IPv4DestSingleAddressInfo, IPv4DestSingleAddress_Screenshot1, IPv4DestSingleAddress_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            repo.WebDocument19216801.IPv4SrcPortStart.Click("48;10");
            Delay.Milliseconds(200);
            
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.IPv4SrcPortStart.PressKeys(SourcePortStart);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (HasFocus='True') on item 'WebDocument19216801.IPv4SrcPortStart'.", repo.WebDocument19216801.IPv4SrcPortStartInfo, new RecordItemIndex(38));
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcPortStartInfo, "HasFocus", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='IPv4SrcPortStart') on item 'WebDocument19216801.IPv4SrcPortStart'.", repo.WebDocument19216801.IPv4SrcPortStartInfo, new RecordItemIndex(39));
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcPortStartInfo, "Id", "IPv4SrcPortStart");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='80') on item 'WebDocument19216801.IPv4SrcPortStart'.", repo.WebDocument19216801.IPv4SrcPortStartInfo, new RecordItemIndex(40));
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcPortStartInfo, "TagValue", "80");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='80') on item 'WebDocument19216801.IPv4SrcPortStart'.", repo.WebDocument19216801.IPv4SrcPortStartInfo, new RecordItemIndex(41));
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcPortStartInfo, "Value", "80");
            //Delay.Milliseconds(100);
            
            repo.WebDocument19216801.IPv4SrcPortEnd.Click("36;14");
            Delay.Milliseconds(200);
            
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.IPv4SrcPortEnd.PressKeys(SourcePortEnd);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (HasFocus='True') on item 'WebDocument19216801.IPv4SrcPortEnd'.", repo.WebDocument19216801.IPv4SrcPortEndInfo, new RecordItemIndex(46));
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcPortEndInfo, "HasFocus", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='IPv4SrcPortEnd') on item 'WebDocument19216801.IPv4SrcPortEnd'.", repo.WebDocument19216801.IPv4SrcPortEndInfo, new RecordItemIndex(47));
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcPortEndInfo, "Id", "IPv4SrcPortEnd");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='80') on item 'WebDocument19216801.IPv4SrcPortEnd'.", repo.WebDocument19216801.IPv4SrcPortEndInfo, new RecordItemIndex(48));
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcPortEndInfo, "TagValue", "80");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='80') on item 'WebDocument19216801.IPv4SrcPortEnd'.", repo.WebDocument19216801.IPv4SrcPortEndInfo, new RecordItemIndex(49));
            //Validate.Attribute(repo.WebDocument19216801.IPv4SrcPortEndInfo, "Value", "80");
            //Delay.Milliseconds(100);
            
            repo.WebDocument19216801.IPv4DestPortStart.Click("45;12");
            Delay.Milliseconds(200);
            
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '80' with focus on 'WebDocument19216801.IPv4SrcPortEnd'.", repo.WebDocument19216801.IPv4SrcPortEndInfo, new RecordItemIndex(53));
            //repo.WebDocument19216801.IPv4SrcPortEnd.PressKeys("80");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocument19216801.IPv4DestPortStart' at 40;13.", repo.WebDocument19216801.IPv4DestPortStartInfo, new RecordItemIndex(54));
            //repo.WebDocument19216801.IPv4DestPortStart.Click("40;13");
            //Delay.Milliseconds(200);
            
            repo.WebDocument19216801.IPv4DestPortStart.PressKeys(DestPortStart);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (HasFocus='True') on item 'WebDocument19216801.IPv4DestPortStart'.", repo.WebDocument19216801.IPv4DestPortStartInfo, new RecordItemIndex(56));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestPortStartInfo, "HasFocus", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='IPv4DestPortStart') on item 'WebDocument19216801.IPv4DestPortStart'.", repo.WebDocument19216801.IPv4DestPortStartInfo, new RecordItemIndex(57));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestPortStartInfo, "Id", "IPv4DestPortStart");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='80') on item 'WebDocument19216801.IPv4DestPortStart'.", repo.WebDocument19216801.IPv4DestPortStartInfo, new RecordItemIndex(58));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestPortStartInfo, "TagValue", "80");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='80') on item 'WebDocument19216801.IPv4DestPortStart'.", repo.WebDocument19216801.IPv4DestPortStartInfo, new RecordItemIndex(59));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestPortStartInfo, "Value", "80");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'KIRUSHAKTHYPC.KIRUSHAKTHYPC' at 868;538.", repo.KIRUSHAKTHYPC.KIRUSHAKTHYPCInfo, new RecordItemIndex(60));
            //repo.KIRUSHAKTHYPC.KIRUSHAKTHYPC.Click("868;538");
            //Delay.Milliseconds(200);
            
            repo.WebDocument19216801.IPv4DestPortEnd.Click("45;12");
            Delay.Milliseconds(200);
            
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.IPv4DestPortEnd.PressKeys(DestPortEnd);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (HasFocus='True') on item 'WebDocument19216801.IPv4DestPortEnd'.", repo.WebDocument19216801.IPv4DestPortEndInfo, new RecordItemIndex(65));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestPortEndInfo, "HasFocus", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='IPv4DestPortEnd') on item 'WebDocument19216801.IPv4DestPortEnd'.", repo.WebDocument19216801.IPv4DestPortEndInfo, new RecordItemIndex(66));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestPortEndInfo, "Id", "IPv4DestPortEnd");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='80') on item 'WebDocument19216801.IPv4DestPortEnd'.", repo.WebDocument19216801.IPv4DestPortEndInfo, new RecordItemIndex(67));
            //Validate.Attribute(repo.WebDocument19216801.IPv4DestPortEndInfo, "TagValue", "80");
            //Delay.Milliseconds(100);
            
            //Validate_IPv4DestPortEnd(Dest_IP_Addr, SourcePortStart, SourcePortEnd, DestPortStart, DestPortEnd);
            //Delay.Milliseconds(0);
            
        }

#region Image Feature Data
        CompressedImage IPv4DestSingleAddress_Screenshot1
        { get { return repo.WebDocument19216801.IPv4DestSingleAddressInfo.GetScreenshot1(new Rectangle(0, 0, 122, 20)); } }

        Imaging.FindOptions IPv4DestSingleAddress_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
