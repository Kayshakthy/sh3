///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

//added on 24/08/16	--for IP Address Validation
using System.Net;
using System.Globalization;

namespace ArrisTest
{
    public partial class Verify_Validate_WPS_PIN
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void WPS_PIN_Verification_Validation()
        {
        	Delay.Seconds(5);
	        WebDocument webDocument = "/dom[@domain='192.168.0.1']";

			TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'PriSecurityStatusTable']"); 
			IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");
			//Report.Info(" Total columns ",cols.Count.ToString());

			bool isValidPIN = true;
			string WPSPIN="";
			foreach(TdTag col in cols)  
		    {
				WPSPIN = col.InnerText.ToString();
				//Report.Info("WPS PIN Value",col.InnerText);
				Report.Info("WPS PIN Value",WPSPIN);
				//Report.Info("WPS PIN Length",col.InnerText.Length.ToString());
				Report.Info("WPS PIN Length",WPSPIN.Length.ToString());
				//if(col.InnerText.Length < 8){
				if(WPSPIN.Length < 8){
					isValidPIN = false;
				}else{
					break;
				}
				
			}
			if(isValidPIN){
				Report.Success("Valid WPS PIN");
			}else{
				Report.Failure("Invalid WPS PIN");
			}
        	TableTag table_WPS_PIN = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'PriSecurityStatusTable']");
        	Report.Screenshot("WPS_PIN_Length",table_WPS_PIN.Element,false); 
        	
        	//Navigate to Admin-Info
        	Report.Info("Verify the PIN with IP Address and BOX serial Number");
        	Ranorex.ATag Admin = "/dom[@domain='192.168.0.1']//li[#'Admin']/a[@innertext='Admin']";
        	Admin.DoubleClick();
        	//Admin.PerformClick();
        	Delay.Seconds(2); 
        	Ranorex.ATag AdminInfo = "/dom[@domain='192.168.0.1']//li[#'Info']/a[@innertext='Info']";
        	AdminInfo.DoubleClick();   
        	AdminInfo.PerformClick();
        	Delay.Seconds(2); 
        	
        	// Verify the PIN with cable modem serial Number //
        	Delay.Seconds(20); 
        	TableTag myTable1 = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'Hub 3.0 device information']/table"); 
            //Count the total no of rows
	     	IList<TrTag> totalDeviceRows1 = myTable1.Find<TrTag>("./tbody//tr");
	     	int rulesCount1 = totalDeviceRows1.Count;   
	     	string totalDeviceInfoRows1 = rulesCount1.ToString() + " : Rows :";
	     	//Report.Info(" Hub 3.0 device information ",totalDeviceInfoRows1);
//	     	string cableSerialNumber="";
	     	if(rulesCount1 == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Device Info ","There are no active Hub 3.0 device information !!");
	     		return;
	     	}else{
	     		Report.Info(" There are " + totalDeviceInfoRows1 + " in Hub 3.0 device information !!! ");
	     		int rowNum = 1;  
	     		string devInfo = "",devInfoCol1 = "",deviceInfo="", devInfoSubstr = "";
	     		foreach (var row in totalDeviceRows1)  
			    { 	
	     			//Report.Info("Row: " + rowNum); 
	     			//Report.Info(row.GetInnerHtml().ToString());
			        IList<TdTag> cols1 = row.Find<TdTag>("./td");
			        //Report.Info(" Total Column ", cols.Count.ToString());
			        int colNum = 1;
			        foreach(TdTag MacCol in cols1){
			        	//Report.Info("MacCol: " + colNum); 
			        	if(colNum ==1){
			        		devInfoCol1 = MacCol.InnerText;
			        		//Report.Info("Col1 Info: "+MacCol.InnerText);	
			        		//Report.Info("Col1 Info: " + devInfoCol1);
			        	}if(colNum ==2){
			        		IList<SpanTag> spanVals = MacCol.Find<SpanTag>("./span");
			        		foreach(SpanTag spanVal in spanVals){
			        			devInfo = spanVal.InnerText;
			        			if(devInfo.Length > 0){
			        				devInfoSubstr = devInfo.Substring(1,devInfo.Length-1);	// for validation purpose
			        			}else{
			        				//blank
			        				devInfoSubstr = "";
			        			}
			        			//Report.Info(  "	devInfoSubstr 	" + devInfoSubstr);
			        		}
			        		//Report.Info("Col2 Info: "+devInfo);	
			        		deviceInfo =  devInfoCol1 + "		" + devInfo;
			        		//Report.Info( devInfoCol1 + "		" + devInfo);
			        		//Report.Info(deviceInfo);
			        		if (rowNum == 4){
			        			//MAC Address - C0:05:C2:00:24:1B  ( Arris1)
			        			if(devInfoSubstr.Length == 0){
			        				Report.Failure("	MAC Address  is BLANK 	");
			        			}else if(devInfoSubstr.Trim() != WPSPIN){
			        				Report.Info ("WPSPIN : "+ WPSPIN + "  MAC Address : " + devInfoSubstr);
				        			Report.Success(  "	WPS PIN is different from MAC Address  	" + " PASS");
			        			}else{
			        				Report.Failure("	MAC Address  	" + " FAIL");
			        			}
			        		}else if(rowNum == 5){
			        			//Cable modem serial number
			        			if(devInfoSubstr.Length == 0){
			        				Report.Failure("	Cable modem serial number  is BLANK 	");
			        			}else if(devInfoSubstr.Trim() != WPSPIN){
			        				Report.Info ("WPSPIN : "+ WPSPIN + "  Cable Modem Serial Number : " + devInfoSubstr);
			        				Report.Success(  "	WPS PIN is different from Modem Serial Number	" + " PASS");
			        			}else{
			        				//validate Cable modem serial number
			        				Report.Failure(  "	WPS PIN  	" + " FAIL");
			        			}
			        		}
			        	}
			        	colNum++;
			        }//end of COLUMN forloop
			        rowNum++;
	     		}//end of ROW forloop
	     	}
	     	
	     	//Verify the PIN with IP Addresses //
	     	Delay.Seconds(20);
        	TableTag myTable2 = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'WANIPv4Info']/table"); 
            //Count the total no of rows
	     	IList<TrTag> totalDeviceRows2 = myTable2.Find<TrTag>("./tbody//tr");
	     	int rulesCount2 = totalDeviceRows2.Count;   
	     	string totalDeviceInfoRows2 = rulesCount2.ToString() + " : Rows :";
	     	//Report.Info(" Hub 3.0 WAN IP information Rows ",totalDeviceInfoRows2);

     		if(rulesCount2 == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Device Info ","There are no WAN IP information !!");
	     		return;
	     	}else{
	     		Report.Info(" There are " + totalDeviceInfoRows2 + " in Hub 3.0 WAN IP information !!! ");
	     		 int rowNum1 = 1;  
	     		 string WANIPInfo = "",WANIPInfoCol1 = "",WANInfo="",WANIPInfoSubstr ="";
//	     		 string deviceIPAddress="",deviceGatwayIP="";
	     		foreach (var row in totalDeviceRows2)  
			    { 	
	     			//Report.Info("Row: " + rowNum1); 
	     			//Report.Info(row.GetInnerHtml().ToString());
			        IList<TdTag> cols2 = row.Find<TdTag>("./td");
			        //Report.Info(" Total Column ", cols.Count.ToString());
			        int colNum1 = 1;
			        foreach(TdTag MacCol in cols2){
			        	//Report.Info("MacCol: " + colNum1); 
			        	if(colNum1 == 1){
			        		WANIPInfoCol1 = MacCol.InnerText;
			        		//Report.Info("Col1 Info: "+MacCol.InnerText);	
			        		//Report.Info("Col1 Info: "+WANIPInfoCol1);
			        	}if(colNum1 == 2){
			        		IList<SpanTag> spanVals = MacCol.Find<SpanTag>("./span");
			        		foreach(SpanTag spanVal in spanVals){
			        			WANIPInfo = spanVal.InnerText;
			        			WANIPInfoSubstr = WANIPInfo.Substring(1,WANIPInfo.Length-1);	// for validation purpose
			        			//Report.Info(  "	WANIPInfoSubstr 	" + WANIPInfoSubstr);
			        		}
			        		//Report.Info("Col2 Info: "+WANIPInfo);	
			        		WANInfo = WANIPInfoCol1 + "		" + WANIPInfo;
			        		//Report.Info( WANIPInfoCol1 + "		" + WANIPInfo);
			        		//Report.Info(WANInfo);
			        		//Report.LogHtml(ReportLevel.Info, "WANInfo", "<a>WANInfo</a>");

			        		//IPv4 address : 80.2.153.121 
			        		//Default gateway : 80.2.153.97 
			        		//IPv4 lease time : 0 days 19h:24m:26s
			        		//IPv4 lease expire : 2016-07-01 04:09:29.00
			        		//IPv4 DNS servers : 194.168.4.100 
			        		if(rowNum1 == 1 || rowNum1 == 2 || rowNum1 == 5 ){
			        			//IP Address Validation
			        			if(WANIPInfoSubstr.Length == 0){
			        				Report.Failure("	InValid IP Address 	");
			        			}else{
							     	Boolean CheckIPAddress = CheckIPAddressValid(WANIPInfoSubstr.Trim());//Calling CheckIPAddressValid()
							     	if(CheckIPAddress){
							     		Report.Success("Valid IP Address");
							     		if(WANIPInfoSubstr.Trim() != WPSPIN){
							     			Report.Info ("WPSPIN : " + WPSPIN + "  IP Address : " + WANIPInfoSubstr);
							     			if(rowNum1 == 1){
							     				Report.Success(  "	WPS PIN  is different from IPv4 address 	" + " PASS");
							     			}else if(rowNum1 == 2){
							     				Report.Success(  "	WPS PIN  is different from Default Gateway IPv4 address 	" + " PASS");
							     			}else if(rowNum1 == 5){
							     				Report.Success(  "	WPS PIN  is different from IPv4 DNS servers IPv4 address 	" + " PASS");
							     			}
							     		}
							     	}else{
							     		Report.Failure("InValid IP Address");
							     	}			        					
			        			}
			        		}			        		
			        	}
			        	colNum1++;
			        }//end of COLUMN forloop
			        rowNum1++;
	     		}//end of ROW forloop
	     	}        	
        }
        //              Validate IP Address
        public Boolean CheckIPAddressValid(String strIP)
        {
        	//string addrString = "192.168.0.1";
        	string addrString = strIP;
			IPAddress address;
			if (IPAddress.TryParse(addrString, out address)) {
	      		 //Valid IP, with address containing the IP
	      		 return true;
			} else {
	       		//Invalid IP
	       		 return false;
			}	

        }

    }
}