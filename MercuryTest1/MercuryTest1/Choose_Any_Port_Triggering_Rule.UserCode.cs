///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Choose_Any_Port_Triggering_Rule
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Delete_Any_Port_Trigger_Rule(string argument1, string argument2, string argument3, string argument4)
        {
        	//Implemented based on R2.4.2 (9.1.88S)
        	//identify the rules to delete
        	Report.Info( "--------Inside Delete_Any_Port_Trigger_Rule -------");
			string triggerRangeStartPort="",triggerRangeEndPort="",targetRangeStartPort="",targetRangeEndPort="";
			Delay.Seconds(30);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']"); 
            
            //count the rows
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            //Report.Info("Total rowsCnt",rowsCnt.ToString());
            Report.Info("Total Rules",rowsCnt.ToString());
            
            /**
            //Walkthrough rows and columns
            int rowNum = 1;  
		    foreach (var row in rows)  
		    {  
		        Report.Info("===========================");  
		        Report.Info("Row: " + rowNum);                
		        var cells = row.FindDescendants<TdTag>();                   
		        foreach (var cell in cells)  
		        {  
		            Report.Info("Cell: " + cell.InnerText);  
		        }  
		        rowNum++;                 
		    } 
            **/

            //walkthrough the column values
			IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
			int colsCount = cols.Count;
			Report.Info("Total colsCount",colsCount.ToString());
			int j=1;
			bool isRuleExist=false;
			String portTriggerRule ="";
			foreach(TdTag col in cols)  
	    	{
				//Report.Info(col.InnerText);
				if(j==1 && (!(col.InnerText.Equals("No triggering rule!")))){	//if there are port trigger rules
					//triggerRangeStartPort
					triggerRangeStartPort = col.InnerText;
				}else if(j==2){
					//triggerRangeEndPort
					triggerRangeEndPort = col.InnerText;
				}else if(j==3){
					//targetRangeStartPort
					targetRangeStartPort = col.InnerText;
				}else if(j==4){
					//targetRangeEndPort
					targetRangeEndPort = col.InnerText;
				}
				
				if (j ==7){
					//perfrom validation
					if((triggerRangeStartPort==argument1) && (triggerRangeEndPort== argument2)&& (targetRangeStartPort == argument3)&& (targetRangeEndPort == argument4) ){

						//Delay.Seconds(5);
						//click the delete checkbox
						WebElement webElement = col.Element;
						webElement.Click();
						Delay.Seconds(3);
	        			//Report.Info("Clicked");
	        			//portTriggerRule = "triggerRangeStartPort :: "+ triggerRangeStartPort + "||"+"triggerRangeEndPort :: "+triggerRangeEndPort+"||"+"targetRangeStartPort :: "+targetRangeStartPort+ "||"+"targetRangeEndPort :: "+targetRangeEndPort;
						portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
	        			Report.Log(ReportLevel.Success,"PortTriggerRule",portTriggerRule);
						//Report.Info("<---This port forwarding rule is deleted from the list--->");
						Report.Log(ReportLevel.Success,"PortTriggerRule","This port triggering rule is deleted from the list");
						//Report.Snapshot(myTable);
						//Report.Snapshot("PortTriggerRule",myTable);
						//Report.Screenshot("PortTriggerRule",myTable,true);
						//Report.Screenshot("PortTriggerRule",webElement,true);
						
						int rowNum = 1;  
					    foreach (var row in rows)  
					    {  
           					var cells = row.FindDescendants<TdTag>(); 
					        int colNum=1;
					        string triggerStart="" , triggerEnd="", targetStart="", targetEnd="";
					        foreach (var cell in cells)  
					        {  
					           // Report.Info("Cell: " + cell.InnerText);  
					            if(colNum==1){
					            	//triggerRangeStartPort
					            	triggerStart = cell.InnerText;
					            }else if(colNum==2){
					            	//triggerRangeEndPort
					            	triggerEnd= cell.InnerText; 
					            }else if(colNum==3){
					            	//targetRangeStartPort
					            	targetStart = cell.InnerText; 
					            }else if(colNum==4){
					            	//targetRangeEndPort
					            	targetEnd = cell.InnerText;
					            }
					            colNum++;
					        }
					        if(triggerStart == triggerRangeStartPort && triggerEnd == triggerRangeEndPort && targetStart == targetRangeStartPort && targetEnd == targetRangeEndPort ){
					        	Report.Screenshot("PortTriggerRule",row.Element,true);
					        	break;
					        }
					        rowNum++;                 
					    } 
		    
	        			isRuleExist = true;
	        			break;
					}
					j=0;
				}
				j++;
			}	//end of foreach
			if(!isRuleExist){
				portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
				Report.Log(ReportLevel.Failure,"PortTriggerRule",portTriggerRule);
				Report.Log(ReportLevel.Failure,"PortTriggerRule","This port triggering rule does not exist");
			}        	
        }

        public void Delete_Any_Port_Triggering_Rule(string argument1, string argument2, string argument3, string argument4)
        {
        	//Implemented based on R3.5 (9.1.116J) and later version
        	//identify the rules to delete
        	Report.Info( "--------Inside Delete_Any_Port_Trigger_Rule -------");
			string triggerRangeStartPort="",triggerRangeEndPort="",targetRangeStartPort="",targetRangeEndPort="";
			string triggerRangePort="",targetRangePort="";
			Delay.Seconds(30);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']"); 
            
            //count the rows
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            //Report.Info("Total rowsCnt",rowsCnt.ToString());
            Report.Info("Total Rules",rowsCnt.ToString());
			if(rowsCnt == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Port Triggering ","There are no active port triggering rules to delete !!");
	     		//TestSuite.Current.GetTestCase("Delete_All_Port_Trigger_Rules").Checked = false;
	     		return;
	     	}else{
	            //walkthrough the column values
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				Report.Info("Total colsCount",colsCount.ToString());
				int j=1;
				bool isRuleExist=false;
				String portTriggerRule ="";
				int index=0,strLen=0;
				foreach(TdTag col in cols)  
		    	{
					if(j==1 && (!(col.InnerText.Equals("No triggering rule!")))){	//if there are port trigger rules
						triggerRangePort= col.InnerText;
						Report.Info(triggerRangePort.ToString());
						index = triggerRangePort.IndexOf("-");
						Report.Info(index.ToString());
						triggerRangeStartPort = triggerRangePort.Substring(0,index);
						Report.Info(triggerRangeStartPort.ToString());
						strLen = triggerRangePort.Length;
						Report.Info(strLen.ToString());
						triggerRangeEndPort= triggerRangePort.Substring(index+1);
						Report.Info(triggerRangeEndPort.ToString());
						
					}else if(j==2){
						targetRangePort = col.InnerText;
						Report.Info(targetRangePort.ToString());
						index = targetRangePort.IndexOf("-");
						Report.Info(index.ToString());
						targetRangeStartPort = targetRangePort.Substring(0,index);
						Report.Info(targetRangeStartPort.ToString());
						targetRangeEndPort = targetRangePort.Substring(index+1);
						Report.Info(targetRangeEndPort.ToString());
						
					}else if(j==5){
						// j==3 -> prototocol  	//j==4 -> Enable or Disable
						//perfrom validation
						if((triggerRangeStartPort==argument1) && (triggerRangeEndPort== argument2)&& (targetRangeStartPort == argument3)&& (targetRangeEndPort == argument4) ){
							//Delay.Seconds(5);
							//click the delete checkbox
							WebElement webElement = col.Element;
							webElement.Click();
							Delay.Seconds(3);
							//Report.Info("Clicked");
							//portTriggerRule = "triggerRangeStartPort :: "+ triggerRangeStartPort + "||"+"triggerRangeEndPort :: "+triggerRangeEndPort+"||"+"targetRangeStartPort :: "+targetRangeStartPort+ "||"+"targetRangeEndPort :: "+targetRangeEndPort;
							portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
							Report.Log(ReportLevel.Success,"PortTriggerRule",portTriggerRule);
							//Report.Info("<---This port forwarding rule is deleted from the list--->");
							Report.Log(ReportLevel.Success,"PortTriggerRule","This port triggering rule is deleted from the list");
							
							int rowNum = 1;
							foreach (var row in rows)
							{
								var cells = row.FindDescendants<TdTag>();
								int colNum=1;
								string triggerStart="" , triggerEnd="", targetStart="", targetEnd="";
								int index1=0;
								foreach (var cell in cells)
								{
									// Report.Info("Cell: " + cell.InnerText);
									if(colNum==1){
										//triggerRangeStartPort
										//triggerRangeEndPort
										triggerRangePort = cell.InnerText;
										index1 = triggerRangePort.IndexOf("-");
										triggerStart = targetRangePort.Substring(0,index1);
										triggerEnd= triggerRangePort.Substring(index1+1);
									}else if(colNum==2){
										//targetRangeStartPort
										//targetRangeEndPort
										targetRangePort = col.InnerText;
										index1 = targetRangePort.IndexOf("-");
										targetStart = targetRangePort.Substring(0,index1);								
										targetEnd = targetRangePort.Substring(index1+1);									
									}
									colNum++;
								}
								if(triggerStart == triggerRangeStartPort && triggerEnd == triggerRangeEndPort && targetStart == targetRangeStartPort && targetEnd == targetRangeEndPort ){
									Report.Screenshot("PortTriggerRule",row.Element,true);
									break;
								}
								rowNum++;
							}
							
							isRuleExist = true;
							break;
						} 
						j=0;						
					}
					j++;
	            }//end of for-loop : TdTag
				if(!isRuleExist){
					portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
					Report.Log(ReportLevel.Failure,"PortTriggerRule",portTriggerRule);
					Report.Log(ReportLevel.Failure,"PortTriggerRule","This port triggering rule does not exist");
				}				
            }
        }//end of method

    }
}