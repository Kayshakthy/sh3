///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Validate_Firewall_Page recording.
    /// </summary>
    [TestModule("6b1f46c7-ccd6-4a4d-a53c-4f3c99779247", ModuleType.Recording, 1)]
    public partial class Validate_Firewall_Page : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Validate_Firewall_Page instance = new Validate_Firewall_Page();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Validate_Firewall_Page()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Validate_Firewall_Page Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                //Validate.Attribute(repo.WebDocument19216801.FmChbxEnableFirewallInfo, "Visible", "True", Validate.DefaultMessage, false);
                //Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            // Firewall
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nFirewall\r\nValidating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=25,Height=25}) on item 'WebDocument19216801.FmChbxEnableFirewall'.", repo.WebDocument19216801.FmChbxEnableFirewallInfo, new RecordItemIndex(1));
                //Validate.ContainsImage(repo.WebDocument19216801.FmChbxEnableFirewallInfo, FmChbxEnableFirewall_Screenshot1, FmChbxEnableFirewall_Screenshot1_Options, Validate.DefaultMessage, false);
                //Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                //Validate.Attribute(repo.WebDocument19216801.FmChbxEnableBlockFramentedPktsInfo, "Visible", "True", Validate.DefaultMessage, false);
                //Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            // Block Framented Pkts
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nBlock Framented Pkts\r\nValidating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=25,Height=25}) on item 'WebDocument19216801.FmChbxEnableBlockFramentedPkts'.", repo.WebDocument19216801.FmChbxEnableBlockFramentedPktsInfo, new RecordItemIndex(3));
                //Validate.ContainsImage(repo.WebDocument19216801.FmChbxEnableBlockFramentedPktsInfo, FmChbxEnableBlockFramentedPkts_Screenshot1, FmChbxEnableBlockFramentedPkts_Screenshot1_Options, Validate.DefaultMessage, false);
                //Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                //Validate.Attribute(repo.WebDocument19216801.FmChbxEnablePortScanDetectionInfo, "Visible", "True", Validate.DefaultMessage, false);
                //Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            // Port Scan Detection
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nPort Scan Detection\r\nValidating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=25,Height=25}) on item 'WebDocument19216801.FmChbxEnablePortScanDetection'.", repo.WebDocument19216801.FmChbxEnablePortScanDetectionInfo, new RecordItemIndex(5));
                //Validate.ContainsImage(repo.WebDocument19216801.FmChbxEnablePortScanDetectionInfo, FmChbxEnablePortScanDetection_Screenshot1, FmChbxEnablePortScanDetection_Screenshot1_Options, Validate.DefaultMessage, false);
                //Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                //Validate.Attribute(repo.WebDocument19216801.FmChbxEnableIPFloodDetectionInfo, "Visible", "True", Validate.DefaultMessage, false);
                //Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            // IP Flood Detection
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nIP Flood Detection\r\nValidating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=25,Height=25}) on item 'WebDocument19216801.FmChbxEnableIPFloodDetection'.", repo.WebDocument19216801.FmChbxEnableIPFloodDetectionInfo, new RecordItemIndex(7));
                //Validate.ContainsImage(repo.WebDocument19216801.FmChbxEnableIPFloodDetectionInfo, FmChbxEnableIPFloodDetection_Screenshot1, FmChbxEnableIPFloodDetection_Screenshot1_Options, Validate.DefaultMessage, false);
                //Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            Validate_Firewall_Page_Default_Settings();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
        CompressedImage FmChbxEnableFirewall_Screenshot1
        { get { return repo.WebDocument19216801.FmChbxEnableFirewallInfo.GetScreenshot1(new Rectangle(0, 0, 25, 25)); } }

        Imaging.FindOptions FmChbxEnableFirewall_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage FmChbxEnableBlockFramentedPkts_Screenshot1
        { get { return repo.WebDocument19216801.FmChbxEnableBlockFramentedPktsInfo.GetScreenshot1(new Rectangle(0, 0, 25, 25)); } }

        Imaging.FindOptions FmChbxEnableBlockFramentedPkts_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage FmChbxEnablePortScanDetection_Screenshot1
        { get { return repo.WebDocument19216801.FmChbxEnablePortScanDetectionInfo.GetScreenshot1(new Rectangle(0, 0, 25, 25)); } }

        Imaging.FindOptions FmChbxEnablePortScanDetection_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage FmChbxEnableIPFloodDetection_Screenshot1
        { get { return repo.WebDocument19216801.FmChbxEnableIPFloodDetectionInfo.GetScreenshot1(new Rectangle(0, 0, 25, 25)); } }

        Imaging.FindOptions FmChbxEnableIPFloodDetection_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
