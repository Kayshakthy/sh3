///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
	public partial class Ping_Test
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void Validate_PingResult()
		{
			// Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (TagValue>'Pinging www.google.com with 64 bytes of data. \nPing Statistics :\n \nNumber of Ping Packets Sent : 3 \nNumber of Ping Replies Received: 3\nNumber of Ping Replies Verified : 3 \n') on item 'WebDocument19216801.PingResult'.", repo.WebDocument19216801.PingResultInfo);
			//Validate.Attribute(repo.WebDocument19216801.PingResultInfo, "TagValue", new Regex(Regex.Escape("Pinging www.google.com with 64 bytes of data. \nPing Statistics :\n \nNumber of Ping Packets Sent : 3 \nNumber of Ping Replies Received: 3\nNumber of Ping Replies Verified : 3 \n")));
			//Console.WriteLine("-------------Validate_PingResult--------------");
			// repo.WebDocument19216801.PingResult.TagValue
			//repo.WebDocument19216801.PingResultInfo
			
			/*
             Report.Log(ReportLevel.Info," Validate_PingResult","--------------------PingResults are Validated here-----------------------\n");
             Report.Log(ReportLevel.Info," Validate_Result",repo.WebDocument19216801.PingResult.TagValue);
             Report.Log(ReportLevel.Info," Validate_PingResult","-------------------PingResult.Name are Validated here-----------------------\n");
           Report.Log(ReportLevel.Info," Validate_PingResult",repo.WebDocument19216801.PingResultInfo.Name);
             Report.Log(ReportLevel.Info," Validate_PingResult","-------------------PingResult.TagName-----------\n");
             Report.Log(ReportLevel.Info," Validate_PingResult", repo.WebDocument19216801.PingResult.TagName);
              Report.Log(ReportLevel.Info, "Validation", "validating PingResultInfo ", repo.WebDocument19216801.PingResultInfo);
           string str = repo.WebDocument19216801.PingResultInfo.FullName;
             Report.Log(ReportLevel.Info, "Validation", str);
     // Validate.Attribute(repo.WebDocument19216801.PingResult,"InnerTest","Apply chnages");
    //string str1 = repo.WebDocument19216801.PingResult.GetInnerHtml;
			 */
			// Report.Log(ReportLevel.Info,"===========================================","==============");
			//  String pingTarget = repo.WebDocument19216801.Target.InnerText;
			
//			Duration newDuration = new Duration(240000);
//			repo.WebDocument19216801.StartInfo.WaitForExists(newDuration);
			Boolean recd = true;
			String pingRst = repo.WebDocument19216801.PingResult.InnerText.ToString();
			
			Report.Log(ReportLevel.Info,pingRst);
//			Report.Log(ReportLevel.Info,repo.WebDocument19216801.PingResult.InnerText.ToString());
			
			int Sent = pingRst.IndexOf("Sent :");
//			Report.Info("Sent index :: " , Sent.ToString());
			String SentVal = pingRst.Substring(Sent+7,2);
//			Report.Info("Sent Value :: " , SentVal);
			
			int Received = pingRst.IndexOf("Received:");
//			Report.Info("Received index :: " , Received.ToString());
			String ReceivedVal = pingRst.Substring(Received+9,2);
//			Report.Info("Received Value :: " , ReceivedVal);
			
			
			int Verified = pingRst.IndexOf("Verified :");
//			Report.Info("Verified index :: " , Verified.ToString());
			String VerifiedVal = pingRst.Substring(Verified+11,2);
//			Report.Info("Verified Value :: " , VerifiedVal);
			
			/*
			if( repo.WebDocument19216801.PingResult.InnerText.Contains("Received: 3")){
				Report.Info("Received: 3");
				recd = repo.WebDocument19216801.PingResult.InnerText.Contains("Received: 3");
			}else if(repo.WebDocument19216801.PingResult.InnerText.Contains("Received: 2")){
				Report.Info("Received: 2");
				recd = true;
			}else if(repo.WebDocument19216801.PingResult.InnerText.Contains("Received: 1")){
				recd = true;
				Report.Info("Received: 1");
			}else{
				recd = false;
			}
			*/
			if((SentVal.Trim().Equals(ReceivedVal.Trim()) ) && (SentVal.Trim().Equals(VerifiedVal.Trim()))){	//verify if ping is success
//				Report.Info("TRUE");
				recd = true;
			}else{
				recd = false;
//				Report.Info("FALSE");
			}
			
			Report.Info(recd.ToString());
			
			if(recd){
				Report.Log(ReportLevel.Success,"Validation","PING success");
				Report.Log(ReportLevel.Info,"Ping Target",PingURL);
				Report.Log(ReportLevel.Info,"Ping Result",repo.WebDocument19216801.PingResult.InnerText);
			}else{
				Report.Log(ReportLevel.Failure,"validation","PING failure");
				Report.Log(ReportLevel.Info,"Ping Target",PingURL);
				Report.Log(ReportLevel.Info,"Ping Result",repo.WebDocument19216801.PingResult.InnerText);
			}
			Report.Screenshot();
			
			/*
    Report.Log(ReportLevel.Info,"==============","==========================================");
    //Pinging www.google.com with 64 bytes of data.
Ping Statistics :
 
Number of Ping Packets Sent : 3
Number of Ping Replies Received: 3
Number of Ping Replies Verified : 3
			 */
			
			
			
			/*int i =5;
if(i<10){
	//Report.Log(ReportLevel.Info," for lloop", repo.WebDocument19216801.);
        }
			 */
		}

		public void DoDelay()
		{
			
//			Duration newDuration = new Duration(240000);
//			repo.WebDocument19216801.StartInfo.WaitForExists(newDuration);		
			
//			Delay.Duration(500, false);
			Delay.Seconds(20);
			
		}

        public void Wait_For_Start()
        {
            repo.WebDocument19216801.StartInfo.WaitForExists(50000);
        }
	}
}