///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class MM_Admin_Menu_Items_Validate
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void MM_Admin_Menu_Item_Validations()
        {
        	Delay.Seconds(5);
        	WebDocument webDocument = "/dom[@domain='192.168.100.1']";
        	webDocument.WaitForDocumentLoaded();
        	
        	//TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'ConnectionTable']"); 
        	Ranorex.UlTag menuUITag = webDocument.FindSingle("/dom[@domain='192.168.100.1']//ul[#'menu']");      	
        	IList<LiTag> menuCounts = menuUITag.FindChildren<LiTag>();	//counting menu items		
	     	int menuItemsCount = menuCounts.Count;
	     	Report.Info("menuItemsCount" + menuItemsCount.ToString());
	     	if(menuItemsCount>4){
	     		Report.Failure(" Other than Home,Modem Mode and Admin menu items are present in the screen");
	     		return ;
	     	}
	     	Boolean isAdminTrue =true;
	     	Ranorex.ATag adminTag = null;
			foreach(LiTag col in menuCounts)  
	    	{  
//	        	Report.Info(col.InnerText); 
	        	
	        	IList<ATag> aVals = col.Find<ATag>("./a");
	        	
	        	foreach(ATag aVal in aVals){
	        		string menuItem = aVal.InnerText.ToString();
	        		Report.Info(  "	menuItem Name: 	" + menuItem + "   : is present");
	        		//if((menuItem.Trim().StartsWith("Home")) || (menuItem.Trim().StartsWith("Modem Mode" ))|| (menuItem.Trim().StartsWith("Admin") )){
	        		if(menuItem.Trim().StartsWith("Admin") ){
	        			isAdminTrue = true;
	        			//get path of Admin element
	        			//find sub menu's under admin
//	        			/dom[@domain='192.168.100.1']//li[#'Admin']
//	        			/dom[@domain='192.168.100.1']//li[#'Admin']/ul
	        			
	        			//Ranorex.LiTag testTag = aVal;
	        			//Report.Info(LiTag.GetPath().ToString());
	        			
	        					String newPath = "";
	        					newPath = aVal.GetPath().ToString() ; //+ "/input[#'macFilterTable-Delete-"+delCheck+"']";
//			        			Report.Info("newPath : " + newPath);
			        			//Ranorex.InputTag MACFilterTableDeleteTag = newPath;
			        			//Ranorex.ATag adminTag = newPath;
			        			adminTag = newPath;
			        			adminTag.Click();
			        			Delay.Seconds(5);
			        			IList<LiTag> adminMenuCounts = col.FindDescendants<LiTag>();	//counting menu items	
			        			int adminMenuCount = adminMenuCounts.Count;
			        			Report.Info("adminMenuCount" + adminMenuCount.ToString());
			        			foreach(LiTag col1 in adminMenuCounts)  
	    						{
			        				IList<ATag> aVals1 = col1.Find<ATag>("./a");
			        				foreach(ATag aVal1 in aVals1){
				        				string menuItem1 = aVal1.InnerText.ToString();
				        				if(menuItem1.StartsWith("Remote Access")){
				        					isAdminTrue = false;
				        					break;
				        				}else{
				        					Report.Info(  "	menuItem : 	" + menuItem1 + "   : is present under Admin menu");
				        					isAdminTrue = true;
				        				}
			        				}
			        				
			        			}
			        			Report.Screenshot(adminTag.Element,true);
			        			
	        			
	        		}
	        	}
	        	
				
			       		
			}
			if(!isAdminTrue){
				Report.Failure("Different Menu items exist");
			}else{
				Report.Success("Admin menu item exist with required ");
				Report.Screenshot(menuUITag.Element,true);
				
			}
        }

    }
}