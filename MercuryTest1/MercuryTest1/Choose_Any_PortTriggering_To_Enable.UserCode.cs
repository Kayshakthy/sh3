///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Choose_Any_PortTriggering_To_Enable
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Choose_Any_PortTriggering_Rule_To_Enable(string argument1, string argument2, string argument3, string argument4, string argument5, string argument6)
        {
        	//Implemented based on R2.4.2 (9.1.88S)
        	//argument1-Trigger range start port, argument2-Trigger range end port,argument3-Target range start port,argument4-,argument5-Target range end port,argument6-Protocol
   
        	
        	//choose rules to enable //
			Delay.Seconds(20);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
        	webDocument.WaitForDocumentLoaded();
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']"); 
            
            //count the rows
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            bool isRuleExist=false;
            //Report.Info("Total rowsCnt",rowsCnt.ToString());
            Report.Info("Total Rules",rowsCnt.ToString());
            Report.Info("Trigger range start port : ",argument1);
            Report.Info("Trigger range end port : ",argument2);
            Report.Info("Target range start port : ",argument3);
            Report.Info("Target range end port : ",argument4);
            Report.Info("TProtocol : ",argument5);
            Report.Info("Enable/Disable : ",argument6);
            
            if(rowsCnt > 0){	//if there are any rules exist ?
				int rowNum = 1;  
				//int c=0;
				//int enableCheck = 0;
				foreach (var row in rows)  
				{  
	           					var cells = row.FindDescendants<TdTag>(); 
						        int colNum=1;
						        string triggerStart="" , triggerEnd="", targetStart="", targetEnd="";
						        //Report.Info("cells count",cells.Count.ToString());//count columns in a row
						        //Report.Info("Cell[0]: " + cells[c].InnerText);
						        foreach (var cell in cells)  
						        {  
						           	//Report.Info("Cell: " + cell.InnerText);  
   									if(cells.Count ==1 && cell.InnerText.StartsWith("No triggering rule")){
							           		Report.Failure("There are no active PortTriggerRule to enable !!!");
            								Report.Screenshot("PortTriggerRule",myTable.Element,true);
            								TestSuite.Current.GetTestCase("Apply_Any_Enable_PortTrigger_Changes").Checked = false;
            								break;
						           	}else{
								            if(colNum==1){
								            	//triggerRangeStartPort
								            	triggerStart = cell.InnerText;
								            }else if(colNum==2){
								            	//triggerRangeEndPort
								            	triggerEnd= cell.InnerText; 
								            }else if(colNum==3){
								            	//targetRangeStartPort
								            	targetStart = cell.InnerText; 
								            }else if(colNum==4){
								            	//targetRangeEndPort
								            	targetEnd = cell.InnerText;
								           }else if(colNum==5){
								           		//enabled of disabled?
								           }
								            colNum++;
								            //cell.click();
						        	}
						           	//cell.MoveTo();
						        }//end of for-loop column
						        if(triggerStart == argument1 && triggerEnd == argument2 && targetStart == argument3 && targetEnd == argument4 ){
						        	//Report.Info(cells[5].GetInnerHtml().ToString());
						        	IList<InputTag> inputVals = cells[5].Find<InputTag>("./input");
			        				//Report.Info("input count :  "+inputVals.Count);
			        		 		foreach(InputTag inputVal in inputVals){
			        					Ranorex.InputTag testTag = inputVal;
			        					//Report.Info(inputVal.GetPath().ToString());
			        					if(testTag.Checked.ToString() == "False"){
			        							//False - Currently DISABLED
		        							Report.Info(" portTriggeringTableEnabledTag is currently disabled and it will be enabled soon..! ");
			        						inputVal.PerformClick();
			        						//inputVal.Checked="True";
			        						Delay.Seconds(5);
			        						Report.Log(ReportLevel.Success,"This port triggering rule is enabled !!!");
					        				Report.Screenshot("PortTriggerRule",row.Element,true);					        						
			        					}else{
			        							//True - Currently ENABLED
			        						Report.Info(" portTriggeringTableEnabledTag is already enabled !!! ");
			        						/*
			        						//inputVal.DoubleClick();
			        						inputVal.Checked="False";
			        						Delay.Seconds(5);
			        						Report.Log(ReportLevel.Success,"This port triggering rule is disabled");
			        						*/
					        				Report.Screenshot("PortTriggerRule",row.Element,true);
			        					}
			        					
			        				}//end of  InputTag : for-loop  

									//Report.Info(cells[5].GetInnerHtml().ToString());					        	
									isRuleExist = true;
						        	Report.Success("PortTriggerRule","This port triggering rule is enabled from the list");
						        	Report.Screenshot("PortTriggerRule",row.Element,true);									
									break;
						        }else{
						        	isRuleExist=false;
						        	
						        }//end of IF-ELSE condition
						        rowNum++;
				}//end of for-loop ROWS

            }else{	//if there are NO active rules
            	Report.Failure("There are no active port triggering rules to enable !!!");
            	Report.Screenshot("PortTriggerRule",myTable.Element,false);
            }//end of IF-ELSE rowcount       
            
            if(!isRuleExist){
            	//argument1-Trigger range start port, argument2-Trigger range end port,argument3-Target range start port,argument4-,argument5-Target range end port,argument6-Protocol
            	Report.Failure("The given Port Triggering Rule does not exist in the PortTrigger Table");
            	//TestSuite.Current.GetTestCase("Apply_Any_Enable_PortTrigger_Changes").Checked=false;
            }else{
            	Report.Info("// The following port triggering rule(s) are Enabled from the list //");
				Report.Screenshot("PortTriggerRule",myTable.Element,false);
				//TestSuite.Current.GetTestCase("Apply_Any_Enable_PortTrigger_Changes").Checked=true;
				//Report.Screenshot();
            }
            
        }

        public void Choose_Any_Port_Triggering_Rule_To_Enable(string argument1, string argument2, string argument3, string argument4)
        {
        	//Implemented based on R3.7 (9.1.116S)
        	//Implemented based on R3.5 (9.1.116J),R3.7 (9.1.116S) and later version
        	//Report.Info( "//--------Inside Choose_Any_Port_Triggering_Rule_To_Enable -------//");
			string triggerRangeStartPort="",triggerRangeEndPort="",targetRangeStartPort="",targetRangeEndPort="";
			string triggerRangePort="",targetRangePort="";
			Delay.Seconds(45);
        	WebDocument webDocument = "/dom[@domain='192.168.0.1']";
            TableTag myTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'portTriggeringTable']"); 
            
            //count the rows
            IList<TrTag> rows = myTable.Find<TrTag>("./tbody//tr");
            int rowsCnt = rows.Count;
            //Report.Info("Total rowsCnt",rowsCnt.ToString());
            Report.Info("Total Rules",rowsCnt.ToString());
			if(rowsCnt == 0){
	     		//Mouse.ScrollWheel(150);
	     		Report.Failure("Port Triggering ","There are no active port triggering rules to enable !!");
	     		//TestSuite.Current.GetTestCase("Delete_All_Port_Trigger_Rules").Checked = false;
	     		return;
	     	}else{
	            //walkthrough the column values
				IList<TdTag> cols = myTable.Find<TdTag>("./tbody//td");  
				int colsCount = cols.Count;
				//Report.Info("Total colsCount",colsCount.ToString());
				int j=1;
				bool isRuleExist=false;
				String portTriggerRule ="";
				int index=0,strLen=0;
				foreach(TdTag col in cols)  
		    	{
					//Report.Info("J value ",j.ToString());
					if(j==1 && (!(col.InnerText.Equals("No triggering rule!")))){	//if there are port trigger rules
						triggerRangePort= col.InnerText;
						//Report.Info("TriRangePort",triggerRangePort.ToString());
						index = triggerRangePort.IndexOf("-");
						//Report.Info("TriRangePort-index",index.ToString());
						triggerRangeStartPort = triggerRangePort.Substring(0,index);
						//Report.Info("TriRangeStartPort",triggerRangeStartPort.ToString());
						strLen = triggerRangePort.Length;
						//Report.Info("TriRangePort-strLen",strLen.ToString());
						triggerRangeEndPort= triggerRangePort.Substring(index+1);
						//Report.Info("TriRangeEndPort",triggerRangeEndPort.ToString());
						//j++;
					}else if(j==2){
						targetRangePort = col.InnerText;
						//Report.Info("TarRangePort",targetRangePort.ToString());
						index = targetRangePort.IndexOf("-");
						//Report.Info("tarRangePort-index",index.ToString());
						targetRangeStartPort = targetRangePort.Substring(0,index);
						//Report.Info("tarRangeStartPort",targetRangeStartPort.ToString());
						targetRangeEndPort = targetRangePort.Substring(index+1);
						//Report.Info("tarRangeEndPort",targetRangeEndPort.ToString());
						//j++;
					}else if(j==3){
						//j++;	//protocol
					}else if(j==4){
						if((triggerRangeStartPort==argument1) && (triggerRangeEndPort== argument2)&& (targetRangeStartPort == argument3)&& (targetRangeEndPort == argument4) ){
							portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
							Report.Log(ReportLevel.Success,"PortTrigger",portTriggerRule);
							Report.Log(ReportLevel.Success,"PortTrigger","This port triggering rule will be enabled from the list");
							
							IList<InputTag> inputVals = col.Find<InputTag>("./input");
							//Report.Info("input count :  "+inputVals.Count);
							foreach(InputTag inputVal in inputVals){
								Ranorex.InputTag testTag = inputVal;
								//Report.Info(inputVal.GetPath().ToString());
								if(testTag.Checked.ToString() == "True"){
									Report.Info(" portTriggering rule is already enabled ");
									//inputVal.DoubleClick();
									//inputVal.Checked="False";
									Delay.Seconds(5);
									Report.Log(ReportLevel.Success,"This port triggering rule is enabled");
									Report.Screenshot("PortTrigger",col.Element,true);
								}else{
									Report.Info(" portTriggering rule is currently disabled ");
									inputVal.PerformClick();
									Delay.Seconds(5);
									Report.Log(ReportLevel.Success,"This port triggering rule is enabled");
									Report.Screenshot("PortTrigger",col.Element,true);
								}
			        		}	//end of for loop: InputTag
							isRuleExist = true;
							break;
						}else{
							isRuleExist = false;
						}//end of port comparision IF-ELSE
						//j=0;
					}else if(j==5){
						//j++;	//delete
						j=0;
					}
					j++;
					col.MoveTo();
				}//end of for-loop : TdTag
				
				if(!isRuleExist){
	            	portTriggerRule = "triggerRangeStartPort :: "+ argument1 + "||"+"triggerRangeEndPort :: "+argument2+"||"+"targetRangeStartPort :: "+argument3+ "||"+"targetRangeEndPort :: "+argument4 ;
	            	Report.Log(ReportLevel.Failure,"PortTrigger",portTriggerRule);
	            	Report.Log(ReportLevel.Failure,"PortTrigger","This port triggering rule does not exist");
				}
            }//end of if-else        	
        }//end of method

    }
}