///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Check_2_4GHzPassword_Field
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_Passphrase()
        {
//        	String currentTestcaseName = TestCase.Current.Name;	//obsolete in 6.x
        	string  currentTestcaseName = TestCaseNode.Current.Name;
        	
        	Report.Info("Current TC ", currentTestcaseName);
        	//check if ghe text field is enabled
//            Validate.Attribute(repo.WebDocument19216801.PassphraseInfo, "Enabled", "True");
			bool isEnabled = Validate.Attribute(repo.WebDocument19216801.PassphraseInfo, "Enabled", "True","{2}",false);
			if(isEnabled){
				Report.Success(" Passphrase is enabled !");
				if(currentTestcaseName.StartsWith("Validate_2GHz_Good_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Primary_Good_Password_Validation_Security_Mode").Checked = true;
					TestSuite.Current.GetTestCase("Validate_Good_Pass").Checked = true;	
				}else if(currentTestcaseName.StartsWith("Validate_2GHz_Strong_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Strong_Password_Validation_Sec_Mode").Checked = true;
					TestSuite.Current.GetTestCase("Validate_Strong_Pass").Checked = true;					
				}else if(currentTestcaseName.StartsWith("Validate_2GHz_Very_Strong_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Primary_Very_Strong_Pass_Validation_Sec_Mode").Checked = true;
					TestSuite.Current.GetTestCase("Validate_Very_Strong_Pass").Checked = true;					
				}else if(currentTestcaseName.StartsWith("Validate_2GHz_Not_Sufficient_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Not_Sufficient_Password_Validation_Sec_Mode").Checked = true;
					TestSuite.Current.GetTestCase("Validate_Not_Sufficient_Pass").Checked = true;					
				}else if(currentTestcaseName.StartsWith("Validate_2GHz_Invalid_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Primary_Invalid_Password_Validation_Sec_Mode").Checked = true;
					TestSuite.Current.GetTestCase("Validate_Invalid_Pass").Checked = true;					
				}
			}else{
				Report.Failure(" Passphrase is disabled !");
				if(currentTestcaseName.StartsWith("Validate_2GHz_Good_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Primary_Good_Password_Validation_Security_Mode").Checked = false;
					TestSuite.Current.GetTestCase("Validate_Good_Pass").Checked = false;
				}else if(currentTestcaseName.StartsWith("Validate_2GHz_Strong_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Strong_Password_Validation_Sec_Mode").Checked = false;
					TestSuite.Current.GetTestCase("Validate_Strong_Pass").Checked = false;
				}else if(currentTestcaseName.StartsWith("Validate_2GHz_Very_Strong_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Primary_Very_Strong_Pass_Validation_Sec_Mode").Checked = false;
					TestSuite.Current.GetTestCase("Validate_Very_Strong_Pass").Checked = false;					
				}else if(currentTestcaseName.StartsWith("Validate_2GHz_Not_Sufficient_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Not_Sufficient_Password_Validation_Sec_Mode").Checked = false;
					TestSuite.Current.GetTestCase("Validate_Not_Sufficient_Pass").Checked = false;					
				}else if(currentTestcaseName.StartsWith("Validate_2GHz_Invalid_Password_Field")){
					TestSuite.Current.GetTestCase("Choose_2.4GHz_Primary_Invalid_Password_Validation_Sec_Mode").Checked = false;
					TestSuite.Current.GetTestCase("Validate_Invalid_Pass").Checked = false;					
				}
			}            
        }

    }
}