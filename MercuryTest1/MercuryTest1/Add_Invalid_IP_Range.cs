///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Add_Invalid_IP_Range recording.
    /// </summary>
    [TestModule("6af5b96c-db15-49d6-a914-d526f4be33bb", ModuleType.Recording, 1)]
    public partial class Add_Invalid_IP_Range : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Add_Invalid_IP_Range instance = new Add_Invalid_IP_Range();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Add_Invalid_IP_Range()
        {
            MacAdd01 = "";
            MacAdd11 = "";
            MacAdd21 = "01";
            MacAdd31 = "";
            MacAdd41 = "";
            MacAdd51 = "";
            Ipv4SourceSingle3 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Add_Invalid_IP_Range Instance
        {
            get { return instance; }
        }

#region Variables

        string _MacAdd01;

        /// <summary>
        /// Gets or sets the value of variable MacAdd01.
        /// </summary>
        [TestVariable("04f62b5e-60d5-4448-a97d-7ec576fe96cb")]
        public string MacAdd01
        {
            get { return _MacAdd01; }
            set { _MacAdd01 = value; }
        }

        string _MacAdd11;

        /// <summary>
        /// Gets or sets the value of variable MacAdd11.
        /// </summary>
        [TestVariable("a15b25bb-d4fb-403d-8f0f-3e8a0b28479b")]
        public string MacAdd11
        {
            get { return _MacAdd11; }
            set { _MacAdd11 = value; }
        }

        string _MacAdd21;

        /// <summary>
        /// Gets or sets the value of variable MacAdd21.
        /// </summary>
        [TestVariable("6005a207-cda6-488a-af61-f7bd7b81161f")]
        public string MacAdd21
        {
            get { return _MacAdd21; }
            set { _MacAdd21 = value; }
        }

        string _MacAdd31;

        /// <summary>
        /// Gets or sets the value of variable MacAdd31.
        /// </summary>
        [TestVariable("17626d00-68c1-445d-8397-15fb936910f8")]
        public string MacAdd31
        {
            get { return _MacAdd31; }
            set { _MacAdd31 = value; }
        }

        string _MacAdd41;

        /// <summary>
        /// Gets or sets the value of variable MacAdd41.
        /// </summary>
        [TestVariable("77af9d75-34ba-4923-ae60-5d4305b8dc91")]
        public string MacAdd41
        {
            get { return _MacAdd41; }
            set { _MacAdd41 = value; }
        }

        string _MacAdd51;

        /// <summary>
        /// Gets or sets the value of variable MacAdd51.
        /// </summary>
        [TestVariable("3e37debd-09de-4689-a230-0d7cf8f22ace")]
        public string MacAdd51
        {
            get { return _MacAdd51; }
            set { _MacAdd51 = value; }
        }

        string _Ipv4SourceSingle3;

        /// <summary>
        /// Gets or sets the value of variable Ipv4SourceSingle3.
        /// </summary>
        [TestVariable("be9243b2-eb99-42d3-8c66-59f5d3214892")]
        public string Ipv4SourceSingle3
        {
            get { return _Ipv4SourceSingle3; }
            set { _Ipv4SourceSingle3 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            repo.WebDocument19216801.MacAddress01.Click();
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress01);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress01);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.MacAddress01.PressKeys(MacAdd01);
            Delay.Milliseconds(100);
            
            repo.WebDocument19216801.MacAddress11.Click();
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress11);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress11);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.MacAddress11.PressKeys(MacAdd11);
            Delay.Milliseconds(100);
            
            repo.WebDocument19216801.MacAddress21.Click();
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress21);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress21);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.MacAddress21.PressKeys(MacAdd21);
            Delay.Milliseconds(100);
            
            repo.WebDocument19216801.MacAddress31.Click();
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress31);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress31);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.MacAddress31.PressKeys(MacAdd31);
            Delay.Milliseconds(100);
            
            repo.WebDocument19216801.MacAddress41.Click();
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress41);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress41);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.MacAddress41.PressKeys(MacAdd41);
            Delay.Milliseconds(100);
            
            repo.WebDocument19216801.MacAddress51.Click();
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress51);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.MacAddress51);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.MacAddress51.PressKeys(MacAdd51);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.IPv4SrcSingle3.Click();
            Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.IPv4SrcSingle3);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.IPv4SrcSingle3);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.IPv4SrcSingle3.PressKeys(Ipv4SourceSingle3);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(28));
            //Delay.Duration(1000, false);
            
            try {
                repo.WebDocument19216801.IPAdd2.Click();
                Delay.Milliseconds(200);
            } catch(Exception) {  }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(30));
            Delay.Duration(5000, false);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot2' with region {X=0,Y=0,Width=268,Height=61}) on item 'WebDocument19216801.ErrTipIPv4SrcSingle'.", repo.WebDocument19216801.ErrTipIPv4SrcSingleInfo, new RecordItemIndex(31));
            //Validate.ContainsImage(repo.WebDocument19216801.ErrTipIPv4SrcSingleInfo, ErrTipIPv4SrcSingle_Screenshot2, ErrTipIPv4SrcSingle_Screenshot2_Options);
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='is not a valid IP address.') on item 'WebDocumentIE.IsNotAValidIPAddress'.", repo.WebDocumentIE.IsNotAValidIPAddressInfo, new RecordItemIndex(32));
            //Validate.Attribute(repo.WebDocumentIE.IsNotAValidIPAddressInfo, "InnerText", "is not a valid IP address.");
            //Delay.Milliseconds(100);
            
            //Validate_IsNotAValidIPAddress();
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=148,Height=26}) on item 'WebDocumentIE.IsNotAValidIPAddress'.", repo.WebDocumentIE.IsNotAValidIPAddressInfo, new RecordItemIndex(34));
            //Validate.ContainsImage(repo.WebDocumentIE.IsNotAValidIPAddressInfo, IsNotAValidIPAddress_Screenshot1_2, IsNotAValidIPAddress_Screenshot1_2_Options);
            //Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='errClose-IPv4SrcSingle') on item 'WebDocument19216801.ErrCloseIPv4SrcSingle'.", repo.WebDocument19216801.ErrCloseIPv4SrcSingleInfo, new RecordItemIndex(35));
            Validate.Attribute(repo.WebDocument19216801.ErrCloseIPv4SrcSingleInfo, "Id", "errClose-IPv4SrcSingle");
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=31,Height=36}) on item 'WebDocument19216801.ErrCloseIPv4SrcSingle'.", repo.WebDocument19216801.ErrCloseIPv4SrcSingleInfo, new RecordItemIndex(36));
            //Validate.ContainsImage(repo.WebDocument19216801.ErrCloseIPv4SrcSingleInfo, ErrCloseIPv4SrcSingle_Screenshot1, ErrCloseIPv4SrcSingle_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(37));
            
        }

#region Image Feature Data
        CompressedImage ErrTipIPv4SrcSingle_Screenshot2
        { get { return repo.WebDocument19216801.ErrTipIPv4SrcSingleInfo.GetScreenshot2(new Rectangle(0, 0, 268, 61)); } }

        Imaging.FindOptions ErrTipIPv4SrcSingle_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage IsNotAValidIPAddress_Screenshot1
        { get { return repo.WebDocumentIE.IsNotAValidIPAddressInfo.GetScreenshot1(new Rectangle(0, 0, 0, 0)); } }

        Imaging.FindOptions IsNotAValidIPAddress_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage IsNotAValidIPAddress_Screenshot1_2
        { get { return repo.WebDocumentIE.IsNotAValidIPAddressInfo.GetScreenshot1(new Rectangle(0, 0, 148, 26)); } }

        Imaging.FindOptions IsNotAValidIPAddress_Screenshot1_2_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ErrCloseIPv4SrcSingle_Screenshot1
        { get { return repo.WebDocument19216801.ErrCloseIPv4SrcSingleInfo.GetScreenshot1(new Rectangle(0, 0, 31, 36)); } }

        Imaging.FindOptions ErrCloseIPv4SrcSingle_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
