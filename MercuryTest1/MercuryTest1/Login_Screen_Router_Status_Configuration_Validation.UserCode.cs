///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
	public partial class Login_Screen_Router_Status_Configuration_Validation
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void Validate_Router_Status_Configuration()
		{
			//validate router status configuration tables -> Configuration, PrimaryDWFlow, PrimaryUPFlow
			
			Delay.Seconds(30);
			WebDocument webDocument = "/dom[@domain='192.168.0.1']";
			webDocument.WaitForDocumentLoaded();
			
			//validate the Configuration table rows & columns
//			TableTag configTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'configuration']");
			TableTag configTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'configuration']//table[@id='configuration']");
			IList<TrTag> totalRows = configTable.Find<TrTag>("./tbody//tr");
			int configRowsCount = totalRows.Count;
//			string totalConfigRowsCnt = "Total Rows(Configuration) : "+configRowsCount.ToString();
			string totalConfigRowsCnt = configRowsCount.ToString();
			Report.Info("Total Items(Configuration) ",totalConfigRowsCnt);
			if(configRowsCount == 0){
				//Mouse.ScrollWheel(150);
				Report.Failure("Device Info ","There are no Router status-Configuration information !!");
				return;
			}else{
				Report.Info(" There are " + totalConfigRowsCnt + " in General Configuration information !!! ");
				int rowNum = 1;
				string configInfo = "",configInfoTitle = "";
				foreach (var row in totalRows)
				{
					Report.Info("Configuration -Row#: " + rowNum);
//					Report.Info(row.GetInnerHtml().ToString());
					IList<TdTag> cols = row.Find<TdTag>("./td");
					Report.Info(" Configuration -Row-Total Columns ", cols.Count.ToString());
					int colNum = 1;
					foreach(TdTag MacCol in cols){
//						Report.Info("Configuration Col # " + colNum);
						if(colNum ==1){
							configInfoTitle = MacCol.InnerText;
//							Report.Info("Col1 Info: "+MacCol.InnerText);
							Report.Info("Col1 Info: " + configInfoTitle);
						}if(colNum ==2){

							IList<DivTag> divVals = MacCol.Find<DivTag>("./div");
//							Report.Info("divVals count : " + divVals.Count.ToString());
							
							foreach(DivTag divVal in divVals){
								IList<SpanTag> spanVals = divVal.Find<SpanTag>("./span");
//								Report.Info("spanVals count : " + spanVals.Count.ToString());
								foreach(SpanTag spanVal in spanVals){
									configInfo = spanVal.InnerText;
								}
								Report.Info("Col2 Info: "+configInfo);
							}
					
						}
						
						colNum++;
					}
					rowNum++;
				}	//end of totalRows
				
			}//end if IF-ELSE -Configuration
			
			
			//validate the PPrimary Downstream Service Flow table rows & columns
			TableTag primaryDWTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'primaryDWFlow']");
			IList<TrTag> totalRows1 = primaryDWTable.Find<TrTag>("./tbody//tr");
			int primaryDWRowsCount = totalRows1.Count;
//			string totalPrimaryDWRowsCount = "Total Rows(primaryDW) : "+primaryDWRowsCount.ToString();
			string totalPrimaryDWRowsCount = primaryDWRowsCount.ToString();
			Report.Info("Total Items(PrimaryDW) ",totalPrimaryDWRowsCount);
			if(primaryDWRowsCount == 0){
				//Mouse.ScrollWheel(150);
				Report.Failure("Device Info ","There are no Primary Downstream Service Flow information !!");
				return;
			}else{
				Report.Info(" There are " + totalPrimaryDWRowsCount + " in Primary Downstream Service Flow information !!! ");
				int rowNum = 1;
				string primaryDWInfo="",primaryDWInfoTitle = "";
				foreach (var row in totalRows1)
				{
					Report.Info("Configuration -Row#: " + rowNum);
//					Report.Info(row.GetInnerHtml().ToString());
					IList<TdTag> cols = row.Find<TdTag>("./td");
					Report.Info(" Configuration -Row-Total Columns ", cols.Count.ToString());
					int colNum = 1;
					foreach(TdTag MacCol in cols){
//						Report.Info("Configuration Col # " + colNum);
						if(colNum ==1){
							primaryDWInfoTitle = MacCol.InnerText;
//							Report.Info("Col1 Info: "+MacCol.InnerText);
							Report.Info("Col1 Info: " + primaryDWInfoTitle);
						}if(colNum ==2){
							primaryDWInfo = MacCol.InnerText;
//							Report.Info("Col2 Info: "+MacCol.InnerText);
							IList<DivTag> divVals = MacCol.Find<DivTag>("./div");
//							Report.Info("divVals count : " + divVals.Count.ToString());
							
							foreach(DivTag divVal in divVals){
								IList<SpanTag> spanVals = divVal.Find<SpanTag>("./span");
//								Report.Info("spanVals count : " + spanVals.Count.ToString());
								foreach(SpanTag spanVal in spanVals){
									primaryDWInfo = spanVal.InnerText;
								}
								Report.Info("Col2 Info: "+primaryDWInfo);
							}
							Report.Info("Col2 Info: "+primaryDWInfo);
					
						}
						
						colNum++;
					}
					rowNum++;
				}	//end of totalRows
				
			}//end if IF-ELSE -Configuration
			
			//validate the Primary Upstream Service Flow table rows & columns
			TableTag primaryUPTable = webDocument.FindSingle("/dom[@domain='192.168.0.1']//table[#'primaryUPFlow']");
			IList<TrTag> totalRows2 = primaryUPTable.Find<TrTag>("./tbody//tr");
			int primaryUPRowsCount = totalRows2.Count;
//			string totalPrimaryUPRowsCount = "Total Rows(primaryUP) : "+primaryUPRowsCount.ToString();
			string totalPrimaryUPRowsCount = primaryUPRowsCount.ToString();
			Report.Info("Total Items(PrimaryUP) ",totalPrimaryUPRowsCount);
			if(primaryUPRowsCount == 0){
				//Mouse.ScrollWheel(150);
				Report.Failure("Device Info ","There are no Primary Upstrean Service Flow information !!");
				return;
			}else{
				Report.Info(" There are " + primaryUPRowsCount + " in Primary Upstrean Service Flow information !!! ");
				int rowNum = 1;
				string primaryUPInfo="",primaryUPInfoTitle = "";
				foreach (var row in totalRows2)
				{
					Report.Info("Configuration -Row#: " + rowNum);
//					Report.Info(row.GetInnerHtml().ToString());
					IList<TdTag> cols = row.Find<TdTag>("./td");
					Report.Info(" Configuration -Row-Total Columns ", cols.Count.ToString());
					int colNum = 1;
					foreach(TdTag MacCol in cols){
//						Report.Info("Configuration Col # " + colNum);
						if(colNum ==1){
							primaryUPInfoTitle = MacCol.InnerText;
//							Report.Info("Col1 Info: "+MacCol.InnerText);
							Report.Info("Col1 Info: " + primaryUPInfoTitle);
						}if(colNum ==2){
							primaryUPInfo = MacCol.InnerText;
//							Report.Info("Col2 Info: "+MacCol.InnerText);
							IList<DivTag> divVals = MacCol.Find<DivTag>("./div");
//							Report.Info("divVals count : " + divVals.Count.ToString());
							
							foreach(DivTag divVal in divVals){
								IList<SpanTag> spanVals = divVal.Find<SpanTag>("./span");
//								Report.Info("spanVals count : " + spanVals.Count.ToString());
								foreach(SpanTag spanVal in spanVals){
									primaryUPInfo = spanVal.InnerText;
								}
								Report.Info("Col2 Info: "+primaryUPInfo);
							}
							Report.Info("Col2 Info: "+primaryUPInfo);
					
						}
						
						colNum++;
					}
					rowNum++;
				}	//end of totalRows
				
			}//end if IF-ELSE -Configuration			
			
		}

		public void Report_Screenshot()
		{
			Report.Screenshot(ReportLevel.Info, "User", "", null, false);
		}

		public void Report_Screenshot1()
		{
			Report.Screenshot(ReportLevel.Info, "User", "", null, false);
		}

		public void Report_Screenshot2()
		{
			Report.Screenshot(ReportLevel.Info, "User", "", null, false);
		}

	}
}