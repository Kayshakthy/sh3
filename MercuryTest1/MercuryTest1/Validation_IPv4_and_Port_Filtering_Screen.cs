///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Validation_IPv4_and_Port_Filtering_Screen recording.
    /// </summary>
    [TestModule("3fa7cf4c-edc2-449d-b867-676beccd9fc3", ModuleType.Recording, 1)]
    public partial class Validation_IPv4_and_Port_Filtering_Screen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Validation_IPv4_and_Port_Filtering_Screen instance = new Validation_IPv4_and_Port_Filtering_Screen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Validation_IPv4_and_Port_Filtering_Screen()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Validation_IPv4_and_Port_Filtering_Screen Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Validate.Attribute(repo.WebDocument19216801.LabelIPFilteringInfo, "Visible", "True");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.LabelIPFilteringInfo, "InnerText", "IP and port filtering");
            Delay.Milliseconds(100);
            
            //Validate.ContainsImage(repo.WebDocument19216801.LabelIPFilteringInfo, LabelIPFiltering_Screenshot2, LabelIPFiltering_Screenshot2_Options);
            //Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.LabelIPv4PortFilteringInfo, "Visible", "True");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.LabelIPv4PortFilteringInfo, "InnerText", "IPv4 port filtering");
            Delay.Milliseconds(100);
            
            //Validate.ContainsImage(repo.WebDocument19216801.LabelIPv4PortFilteringInfo, LabelIPv4PortFiltering_Screenshot1, LabelIPv4PortFiltering_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.IPAdd1Info, "Id", "IP_Add");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.IPAdd1Info, "TagValue", "Create a new rule");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.IPAdd1Info, "Type", "button");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.IPAdd1Info, "Value", "Create a new rule");
            Delay.Milliseconds(100);
            
            //Validate.ContainsImage(repo.WebDocument19216801.IPAdd1Info, IPAdd1_Screenshot6, IPAdd1_Screenshot6_Options);
            //Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.Ipv4FilterTable.SourceIPAddressInfo, "InnerText", "Source IP address");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.Ipv4FilterTable.DestinationIPAddressInfo, "InnerText", "Destination IP address");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.Ipv4FilterTable.ProtocolInfo, "InnerText", "Protocol");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.Ipv4FilterTable.SourcePortInfo, "InnerText", "Source port");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.Ipv4FilterTable.DestinationPortInfo, "InnerText", "Destination port");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.Ipv4FilterTable.Enabled1Info, "InnerText", "Enabled");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.Ipv4FilterTable.DeleteInfo, "InnerText", "Delete");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.LabelContentLimitationInfo, "Visible", "True");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.LabelContentLimitationInfo, "Id", "label_ContentLimitation");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.LabelContentLimitationInfo, "InnerText", "When would you like your IP and Port filtering to be active?");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.AlwaysOn1Info, "InnerText", "Always on");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.IOnlyWantToRestrictInternetAccessInfo, "InnerText", "I only want to restrict internet access at");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocumentIE.TheSameTimeEveryDayInfo, "InnerText", "The same time every day");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocumentIE.DifferentTimesOnDifferentDaysOfTheInfo, "InnerText", "Different times on different days of the week.");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.WeekSchedule.HoursInfo, "InnerText", "Hours");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.WeekSchedule.ClickOnTheTilesToBlockInfo, "InnerText", "Click on the tiles to block");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.WeekSchedule.ClearAllInfo, "InnerText", "Clear All");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.WeekSchedule.ClearAllInfo, "TagName", "a");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.WeekSchedule.InverseInfo, "InnerText", "Inverse");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.WeekSchedule.InverseInfo, "TagName", "a");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.WeekSchedule.LabelTagTipInfo, "InnerText", "Tip");
            Delay.Milliseconds(100);
            
            Validate.Attribute(repo.WebDocument19216801.WeekSchedule.LabelTagTipInfo, "TagName", "label");
            Delay.Milliseconds(100);
            
            //Validate.ContainsImage(repo.WebDocument19216801.WeekSchedule.LabelTagTipInfo, LabelTagTip_Screenshot1, LabelTagTip_Screenshot1_Options);
            //Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(34));
            
        }

#region Image Feature Data
        CompressedImage LabelIPFiltering_Screenshot2
        { get { return repo.WebDocument19216801.LabelIPFilteringInfo.GetScreenshot2(new Rectangle(0, 0, 700, 63)); } }

        Imaging.FindOptions LabelIPFiltering_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage LabelIPv4PortFiltering_Screenshot1
        { get { return repo.WebDocument19216801.LabelIPv4PortFilteringInfo.GetScreenshot1(new Rectangle(0, 0, 700, 67)); } }

        Imaging.FindOptions LabelIPv4PortFiltering_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage IPAdd1_Screenshot6
        { get { return repo.WebDocument19216801.IPAdd1Info.GetScreenshot6(new Rectangle(0, 0, 183, 42)); } }

        Imaging.FindOptions IPAdd1_Screenshot6_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage LabelTagTip_Screenshot1
        { get { return repo.WebDocument19216801.WeekSchedule.LabelTagTipInfo.GetScreenshot1(new Rectangle(0, 0, 23, 20)); } }

        Imaging.FindOptions LabelTagTip_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
