///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Not_Sufficient_Passwords recording.
    /// </summary>
    [TestModule("f6c9471d-7c8b-4281-93af-f482bfc8c8f9", ModuleType.Recording, 1)]
    public partial class Not_Sufficient_Passwords : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static Not_Sufficient_Passwords instance = new Not_Sufficient_Passwords();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Not_Sufficient_Passwords()
        {
            notSufficientPass = "p";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Not_Sufficient_Passwords Instance
        {
            get { return instance; }
        }

#region Variables

        string _notSufficientPass;

        /// <summary>
        /// Gets or sets the value of variable notSufficientPass.
        /// </summary>
        [TestVariable("92b46f60-e25d-44c9-ad35-6d3c898bad69")]
        public string notSufficientPass
        {
            get { return _notSufficientPass; }
            set { _notSufficientPass = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //repo.WebDocument19216801.Passphrase.MoveTo("135;19");
            //Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
            //Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.Passphrase.MoveTo("143;11");
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocument19216801.Passphrase' at 31;8.", repo.WebDocument19216801.PassphraseInfo, new RecordItemIndex(2));
            //repo.WebDocument19216801.Passphrase.Click("31;8");
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocument19216801.Passphrase' at 31;8.", repo.WebDocument19216801.PassphraseInfo, new RecordItemIndex(3));
            //repo.WebDocument19216801.Passphrase.Click("31;8");
            //Delay.Milliseconds(200);
            
            repo.WebDocument19216801.Passphrase.Click();
            Delay.Milliseconds(200);
            
            //repo.WebDocument19216801.WiFiPasswordSecurityKey.MoveTo("191;31");
            //Mouse.ButtonUp(System.Windows.Forms.MouseButtons.Left);
            //Delay.Milliseconds(200);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.Passphrase);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Keyboard.PrepareFocus(repo.WebDocument19216801.Passphrase);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.Passphrase.PressKeys(notSufficientPass);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocument19216801.Passphrase' at 61;19.", repo.WebDocument19216801.PassphraseInfo, new RecordItemIndex(9));
            //repo.WebDocument19216801.Passphrase.Click("61;19");
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'a{LShiftKey down}M{LShiftKey up}{LShiftKey down}I{LShiftKey up}n' with focus on 'WebDocument19216801.Passphrase'.", repo.WebDocument19216801.PassphraseInfo, new RecordItemIndex(10));
            //repo.WebDocument19216801.Passphrase.PressKeys("a{LShiftKey down}M{LShiftKey up}{LShiftKey down}I{LShiftKey up}n");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'WebDocument19216801.PasstextWifi'.", repo.WebDocument19216801.PasstextWifiInfo, new RecordItemIndex(11));
            //Validate.Attribute(repo.WebDocument19216801.PasstextWifiInfo, "Enabled", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'WebDocument19216801.PasstextWifi'.", repo.WebDocument19216801.PasstextWifiInfo, new RecordItemIndex(12));
            //Validate.Attribute(repo.WebDocument19216801.PasstextWifiInfo, "Visible", "True");
            //Delay.Milliseconds(100);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (InnerText='Not Sufficient') on item 'WebDocument19216801.PasstextWifi'.", repo.WebDocument19216801.PasstextWifiInfo, new RecordItemIndex(13));
                Validate.Attribute(repo.WebDocument19216801.PasstextWifiInfo, "InnerText", "Not Sufficient", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot13' with region {X=0,Y=0,Width=70,Height=14}) on item 'WebDocument19216801.PasstextWifi'.", repo.WebDocument19216801.PasstextWifiInfo, new RecordItemIndex(14));
            //Validate.ContainsImage(repo.WebDocument19216801.PasstextWifiInfo, PasstextWifi_Screenshot13, PasstextWifi_Screenshot13_Options);
            //Delay.Milliseconds(100);
            
            //Validate.Attribute(repo.WebDocument19216801.PasstextWifiInfo, "InnerText", "Not Sufficient");
            //Delay.Milliseconds(100);
            
            Validate_Not_Sufficient_Pass(notSufficientPass);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
        CompressedImage PasstextWifi_Screenshot13
        { get { return repo.WebDocument19216801.PasstextWifiInfo.GetScreenshot13(new Rectangle(0, 0, 70, 14)); } }

        Imaging.FindOptions PasstextWifi_Screenshot13_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
