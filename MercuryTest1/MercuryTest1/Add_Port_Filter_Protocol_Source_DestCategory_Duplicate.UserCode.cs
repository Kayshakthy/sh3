///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace ArrisTest
{
    public partial class Add_Port_Filter_Protocol_Source_DestCategory_Duplicate
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Accept_IPv4_Port_Filter_Protocol_SourceIPCat_DestIPCat(string argument1, string argument2, string argument3)
        {
			//select combo box values
        	//argument1 - protocol, 
        	//argument2 - Source IP group category
        	//argument3 - Destination IP group category
        	
        	//Report.Info("------------Inside Update_Combo_Boxes_For_IPv4Filtering_Rule------------- ");
        	Delay.Seconds(5);
	        WebDocument webDocument = "/dom[@domain='192.168.0.1']";
	        
	        Report.Info("Protocol(argument1) : "+argument1);
	        Ranorex.SelectTag protocolTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'IPv4ProtocolGrp']");
	        //Report.Info(protocolTag.GetInnerHtml().ToString());
			foreach(Ranorex.OptionTag optTag in protocolTag.Find(".//option"))
			{	//TO SELECT THE PROTOCOL
	     		//Console.WriteLine(optTag.InnerText);
	     		//Report.Info(optTag.InnerText);
	     		if(optTag.InnerText == argument1){
	     			//Report.Info("argument1 matching:: "+argument1 );
	     			   // OptionTag option = "//rxpath/to/option";  
	    				//option.Selected = true;  
	    				optTag.Selected = true;
	    				//Delay.Seconds(1);
	    				break;
	     		}
			}		//end of for-loop for Protocol 
			
	        Report.Info("Source IP Group(argument2) : "+argument2);
			Ranorex.SelectTag IPv4SrcIPGrpTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'IPv4SrcIPGrp']");
		    //Ranorex.SelectTag enableTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'tr_Enabled']/select[@id='Enabled']");
		    //Report.Info(IPv4SrcIPGrpTag.GetInnerHtml().ToString());
			foreach(Ranorex.OptionTag optTag in IPv4SrcIPGrpTag.Find(".//option"))
			{		//TO enable/disable  PORT TRIGGER RULE
		     		//Console.WriteLine(optTag.InnerText);
		     		//Report.Info(optTag.InnerText);
		     		if(optTag.InnerText == argument2){
		     			//Report.Info("argument2 matching:: "+argument2 );
		     			//Delay.Seconds(1);
		    			optTag.Selected = true;
		    			//Delay.Seconds(1);
		    			//check Source IP Group
		    			if(argument2=="single"){	// if it is single source Source IP
		    				TestSuite.Current.GetTestCase("Input_Single_SourceIP1").Checked = true;
		    				TestSuite.Current.GetTestCase("Input_Range_SourceIP1").Checked = false;
		    			}else if(argument2=="range"){	//if it is  range source IP
		    				
		    				TestSuite.Current.GetTestCase("Input_Range_SourceIP1").Checked = true;
		    				TestSuite.Current.GetTestCase("Input_Single_SourceIP1").Checked = false;
		    			}
		    			break;
		     		}
			}		//end of for-loop for  Source IP Group
			
	        Report.Info("Destination IP Category(argument3) : "+argument3);
			Ranorex.SelectTag IPv4DestIPGrpTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//select[#'IPv4DestIPGrp']");
		    //Ranorex.SelectTag enableTag = webDocument.FindSingle("/dom[@domain='192.168.0.1']//div[#'tr_Enabled']/select[@id='Enabled']");
		    //Report.Info(IPv4DestIPGrpTag.GetInnerHtml().ToString());
			foreach(Ranorex.OptionTag optTag in IPv4DestIPGrpTag.Find(".//option"))
			{		//TO enable/disable  PORT TRIGGER RULE
		     		//Console.WriteLine(optTag.InnerText);
		     		//Report.Info(optTag.InnerText);
		     		if(optTag.InnerText == argument3){
		     			//Report.Info("argument3 matching:: "+argument3 );
		     			//Delay.Seconds(1);
		    			optTag.Selected = true;
		    			//Delay.Seconds(1);
		    			//check Destination IP Category
		    			if(argument3=="single"){	// if it is single destination Source IP
		    				TestSuite.Current.GetTestCase("Input_Single_DestIP1").Checked = true;
		    				TestSuite.Current.GetTestCase("Input_Range_DestIP1").Checked = false;
		    			}else if(argument3=="range"){	//if it range destination IP
		    				
		    				TestSuite.Current.GetTestCase("Input_Range_DestIP1").Checked = true;
		    				TestSuite.Current.GetTestCase("Input_Single_DestIP1").Checked = false;
		    			}
		    			break;
		     		}
			}		//end of for-loop for  Destination IP Group
        }

    }
}