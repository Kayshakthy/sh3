///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The GUi_Should_Not_Allow_Simultaneous_Logins recording.
    /// </summary>
    [TestModule("e708e84d-ed10-4f56-bafc-a427d174b83a", ModuleType.Recording, 1)]
    public partial class GUi_Should_Not_Allow_Simultaneous_Logins : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static GUi_Should_Not_Allow_Simultaneous_Logins instance = new GUi_Should_Not_Allow_Simultaneous_Logins();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public GUi_Should_Not_Allow_Simultaneous_Logins()
        {
            BoxURL = "";
            BrowserName = "";
            LoginPassword = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static GUi_Should_Not_Allow_Simultaneous_Logins Instance
        {
            get { return instance; }
        }

#region Variables

        string _BoxURL;

        /// <summary>
        /// Gets or sets the value of variable BoxURL.
        /// </summary>
        [TestVariable("c66d28a7-d853-44b6-b9ef-4d6b5a7dfc98")]
        public string BoxURL
        {
            get { return _BoxURL; }
            set { _BoxURL = value; }
        }

        string _BrowserName;

        /// <summary>
        /// Gets or sets the value of variable BrowserName.
        /// </summary>
        [TestVariable("eb7fe821-4984-4d8c-9c59-06c68cc3a162")]
        public string BrowserName
        {
            get { return _BrowserName; }
            set { _BrowserName = value; }
        }

        string _LoginPassword;

        /// <summary>
        /// Gets or sets the value of variable LoginPassword.
        /// </summary>
        [TestVariable("10a7e6bc-7bd5-47b4-8073-76362c3b8140")]
        public string LoginPassword
        {
            get { return _LoginPassword; }
            set { _LoginPassword = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocument19216801.Password' at 65;17.", repo.WebDocument19216801.PasswordInfo, new RecordItemIndex(0));
            //repo.WebDocument19216801.Password.Click("65;17");
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LShiftKey down}' with focus on 'WebDocument19216801.Password'.", repo.WebDocument19216801.PasswordInfo, new RecordItemIndex(1));
            //repo.WebDocument19216801.Password.PressKeys("{LShiftKey down}");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'C{LShiftKey up}hangeme0' with focus on 'WebDocument19216801.Password'.", repo.WebDocument19216801.PasswordInfo, new RecordItemIndex(2));
            //repo.WebDocument19216801.Password.PressKeys("C{LShiftKey up}hangeme0");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'WebDocument19216801.Button' at 56;42.", repo.WebDocument19216801.ButtonInfo, new RecordItemIndex(3));
            //repo.WebDocument19216801.Button.Click("56;42");
            //Delay.Milliseconds(200);
            
            repo.WebDocument19216801.Password.Click("80;15");
            Delay.Milliseconds(200);
            
            repo.WebDocument19216801.Password.PressKeys(LoginPassword);
            Delay.Milliseconds(0);
            
            repo.WebDocument19216801.Button.Click("61;34");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Remote user has already logged in, please wait...') on item 'WebDocument19216801.RemoteUserHasAlreadyLoggedInPleas'.", repo.WebDocument19216801.RemoteUserHasAlreadyLoggedInPleasInfo, new RecordItemIndex(7));
            Validate.Attribute(repo.WebDocument19216801.RemoteUserHasAlreadyLoggedInPleasInfo, "InnerText", "Remote user has already logged in, please wait...");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=248,Height=43}) on item 'WebDocument19216801.RemoteUserHasAlreadyLoggedInPleas'.", repo.WebDocument19216801.RemoteUserHasAlreadyLoggedInPleasInfo, new RecordItemIndex(8));
            Validate.ContainsImage(repo.WebDocument19216801.RemoteUserHasAlreadyLoggedInPleasInfo, RemoteUserHasAlreadyLoggedInPleas_Screenshot1, RemoteUserHasAlreadyLoggedInPleas_Screenshot1_Options);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Class='errTipClose') on item 'WebDocumentIE.ErrClosePassword'.", repo.WebDocumentIE.ErrClosePasswordInfo, new RecordItemIndex(9));
            Validate.Attribute(repo.WebDocumentIE.ErrClosePasswordInfo, "Class", "errTipClose");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='errClose-Password') on item 'WebDocumentIE.ErrClosePassword'.", repo.WebDocumentIE.ErrClosePasswordInfo, new RecordItemIndex(10));
            Validate.Attribute(repo.WebDocumentIE.ErrClosePasswordInfo, "Id", "errClose-Password");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot2' with region {X=0,Y=0,Width=31,Height=36}) on item 'WebDocumentIE.ErrClosePassword'.", repo.WebDocumentIE.ErrClosePasswordInfo, new RecordItemIndex(11));
            Validate.ContainsImage(repo.WebDocumentIE.ErrClosePasswordInfo, ErrClosePassword_Screenshot2, ErrClosePassword_Screenshot2_Options);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(12));
            
        }

#region Image Feature Data
        CompressedImage RemoteUserHasAlreadyLoggedInPleas_Screenshot1
        { get { return repo.WebDocument19216801.RemoteUserHasAlreadyLoggedInPleasInfo.GetScreenshot1(new Rectangle(0, 0, 248, 43)); } }

        Imaging.FindOptions RemoteUserHasAlreadyLoggedInPleas_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ErrClosePassword_Screenshot2
        { get { return repo.WebDocumentIE.ErrClosePasswordInfo.GetScreenshot2(new Rectangle(0, 0, 31, 36)); } }

        Imaging.FindOptions ErrClosePassword_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
