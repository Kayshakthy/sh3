///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ArrisTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The MM_Restart_Hub recording.
    /// </summary>
    [TestModule("7ec90c31-70f1-4b77-9c1a-6437b4af5078", ModuleType.Recording, 1)]
    public partial class MM_Restart_Hub : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MercuryTest1Repository repository.
        /// </summary>
        public static MercuryTest1Repository repo = MercuryTest1Repository.Instance;

        static MM_Restart_Hub instance = new MM_Restart_Hub();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public MM_Restart_Hub()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static MM_Restart_Hub Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Validate.Attribute(repo.WebDocumentIE.AdminInfo, "InnerText", "Admin", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                repo.WebDocumentIE.Admin.Click("35;16");
                Delay.Milliseconds(200);
            } catch(Exception) {  }
            
            try {
                Validate.Attribute(repo.WebDocumentIE.ReloadAndRebootInfo, "InnerText", "Reload and Reboot", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                repo.WebDocumentIE.ReloadAndReboot.Click("39;6");
                Delay.Milliseconds(200);
            } catch(Exception) {  }
            
            try {
                Validate.Attribute(repo.WebDocument1921681001.LabelReloadAndRebootInfo, "InnerText", "Reload and Reboot", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                repo.WebDocument1921681001.Self.MoveTo("1905;449");
                Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
                Delay.Milliseconds(200);
            } catch(Exception) {  }
            
            try {
                repo.WebDocument1921681001.Self.MoveTo("1887;678");
                Mouse.ButtonUp(System.Windows.Forms.MouseButtons.Left);
                Delay.Milliseconds(200);
            } catch(Exception) {  }
            
            try {
                Validate.Attribute(repo.WebDocumentIE.ClickingOnTheRebootButtonWillRestaInfo, "InnerText", "Clicking on the 'Reboot' button will restart your Hub 3.0 immediately. This can take up to 5 minutes to complete.", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                Validate.ContainsImage(repo.WebDocumentIE.ClickingOnTheRebootButtonWillRestaInfo, ClickingOnTheRebootButtonWillResta_Screenshot1, ClickingOnTheRebootButtonWillResta_Screenshot1_Options, Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                Validate.Attribute(repo.WebDocumentIE.Button2Info, "Class", "submitNoBg BtnReboot", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                Validate.Attribute(repo.WebDocumentIE.Button2Info, "TagValue", "Reboot", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                repo.WebDocumentIE.Button2.Click("59;25");
                Delay.Milliseconds(200);
            } catch(Exception) {  }
            
            try {
                Validate.Attribute(repo.WebDocumentIE.EnableRestartBtnInfo, "Id", "enableRestartBtn", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                Validate.Attribute(repo.WebDocumentIE.EnableRestartBtnInfo, "TagValue", "Restart", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                Validate.ContainsImage(repo.WebDocumentIE.EnableRestartBtnInfo, EnableRestartBtn_Screenshot1, EnableRestartBtn_Screenshot1_Options, Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception) {  }
            
            try {
                repo.WebDocumentIE.EnableRestartBtn.Click("98;27");
                Delay.Milliseconds(200);
            } catch(Exception) {  }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1m.", new RecordItemIndex(16));
            Delay.Duration(60000, false);
            
        }

#region Image Feature Data
        CompressedImage ClickingOnTheRebootButtonWillResta_Screenshot1
        { get { return repo.WebDocumentIE.ClickingOnTheRebootButtonWillRestaInfo.GetScreenshot1(new Rectangle(0, 0, 700, 16)); } }

        Imaging.FindOptions ClickingOnTheRebootButtonWillResta_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage EnableRestartBtn_Screenshot1
        { get { return repo.WebDocumentIE.EnableRestartBtnInfo.GetScreenshot1(new Rectangle(0, 0, 163, 60)); } }

        Imaging.FindOptions EnableRestartBtn_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
